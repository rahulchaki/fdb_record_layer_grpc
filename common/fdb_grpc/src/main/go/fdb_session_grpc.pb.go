// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.24.4
// source: fdb_session.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FDBStreamingSession_Execute_FullMethodName = "/cio.fdb.record.grpc.FDBStreamingSession/execute"
)

// FDBStreamingSessionClient is the client API for FDBStreamingSession service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FDBStreamingSessionClient interface {
	Execute(ctx context.Context, opts ...grpc.CallOption) (FDBStreamingSession_ExecuteClient, error)
}

type fDBStreamingSessionClient struct {
	cc grpc.ClientConnInterface
}

func NewFDBStreamingSessionClient(cc grpc.ClientConnInterface) FDBStreamingSessionClient {
	return &fDBStreamingSessionClient{cc}
}

func (c *fDBStreamingSessionClient) Execute(ctx context.Context, opts ...grpc.CallOption) (FDBStreamingSession_ExecuteClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FDBStreamingSession_ServiceDesc.Streams[0], FDBStreamingSession_Execute_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &fDBStreamingSessionExecuteClient{ClientStream: stream}
	return x, nil
}

type FDBStreamingSession_ExecuteClient interface {
	Send(*FDBStreamingSessionComand) error
	CloseAndRecv() (*FDBStreamingSessionResponse, error)
	grpc.ClientStream
}

type fDBStreamingSessionExecuteClient struct {
	grpc.ClientStream
}

func (x *fDBStreamingSessionExecuteClient) Send(m *FDBStreamingSessionComand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fDBStreamingSessionExecuteClient) CloseAndRecv() (*FDBStreamingSessionResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FDBStreamingSessionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FDBStreamingSessionServer is the server API for FDBStreamingSession service.
// All implementations must embed UnimplementedFDBStreamingSessionServer
// for forward compatibility
type FDBStreamingSessionServer interface {
	Execute(FDBStreamingSession_ExecuteServer) error
	mustEmbedUnimplementedFDBStreamingSessionServer()
}

// UnimplementedFDBStreamingSessionServer must be embedded to have forward compatible implementations.
type UnimplementedFDBStreamingSessionServer struct {
}

func (UnimplementedFDBStreamingSessionServer) Execute(FDBStreamingSession_ExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedFDBStreamingSessionServer) mustEmbedUnimplementedFDBStreamingSessionServer() {}

// UnsafeFDBStreamingSessionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FDBStreamingSessionServer will
// result in compilation errors.
type UnsafeFDBStreamingSessionServer interface {
	mustEmbedUnimplementedFDBStreamingSessionServer()
}

func RegisterFDBStreamingSessionServer(s grpc.ServiceRegistrar, srv FDBStreamingSessionServer) {
	s.RegisterService(&FDBStreamingSession_ServiceDesc, srv)
}

func _FDBStreamingSession_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FDBStreamingSessionServer).Execute(&fDBStreamingSessionExecuteServer{ServerStream: stream})
}

type FDBStreamingSession_ExecuteServer interface {
	SendAndClose(*FDBStreamingSessionResponse) error
	Recv() (*FDBStreamingSessionComand, error)
	grpc.ServerStream
}

type fDBStreamingSessionExecuteServer struct {
	grpc.ServerStream
}

func (x *fDBStreamingSessionExecuteServer) SendAndClose(m *FDBStreamingSessionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fDBStreamingSessionExecuteServer) Recv() (*FDBStreamingSessionComand, error) {
	m := new(FDBStreamingSessionComand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FDBStreamingSession_ServiceDesc is the grpc.ServiceDesc for FDBStreamingSession service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FDBStreamingSession_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cio.fdb.record.grpc.FDBStreamingSession",
	HandlerType: (*FDBStreamingSessionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "execute",
			Handler:       _FDBStreamingSession_Execute_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "fdb_session.proto",
}
