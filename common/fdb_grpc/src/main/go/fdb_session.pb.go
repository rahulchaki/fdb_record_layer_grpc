// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.24.4
// source: fdb_session.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FDBNewStreamingSessionComand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId int64  `protobuf:"varint,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *FDBNewStreamingSessionComand) Reset() {
	*x = FDBNewStreamingSessionComand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_session_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBNewStreamingSessionComand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBNewStreamingSessionComand) ProtoMessage() {}

func (x *FDBNewStreamingSessionComand) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_session_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBNewStreamingSessionComand.ProtoReflect.Descriptor instead.
func (*FDBNewStreamingSessionComand) Descriptor() ([]byte, []int) {
	return file_fdb_session_proto_rawDescGZIP(), []int{0}
}

func (x *FDBNewStreamingSessionComand) GetClientId() int64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *FDBNewStreamingSessionComand) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type FDBStreamingSessionComand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandId int64 `protobuf:"varint,1,opt,name=commandId,proto3" json:"commandId,omitempty"`
	// Types that are assignable to Command:
	//
	//	*FDBStreamingSessionComand_Begin
	//	*FDBStreamingSessionComand_Execute
	Command isFDBStreamingSessionComand_Command `protobuf_oneof:"command"`
}

func (x *FDBStreamingSessionComand) Reset() {
	*x = FDBStreamingSessionComand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_session_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBStreamingSessionComand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBStreamingSessionComand) ProtoMessage() {}

func (x *FDBStreamingSessionComand) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_session_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBStreamingSessionComand.ProtoReflect.Descriptor instead.
func (*FDBStreamingSessionComand) Descriptor() ([]byte, []int) {
	return file_fdb_session_proto_rawDescGZIP(), []int{1}
}

func (x *FDBStreamingSessionComand) GetCommandId() int64 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

func (m *FDBStreamingSessionComand) GetCommand() isFDBStreamingSessionComand_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *FDBStreamingSessionComand) GetBegin() *FDBNewStreamingSessionComand {
	if x, ok := x.GetCommand().(*FDBStreamingSessionComand_Begin); ok {
		return x.Begin
	}
	return nil
}

func (x *FDBStreamingSessionComand) GetExecute() *FDBCrudCommand {
	if x, ok := x.GetCommand().(*FDBStreamingSessionComand_Execute); ok {
		return x.Execute
	}
	return nil
}

type isFDBStreamingSessionComand_Command interface {
	isFDBStreamingSessionComand_Command()
}

type FDBStreamingSessionComand_Begin struct {
	Begin *FDBNewStreamingSessionComand `protobuf:"bytes,4,opt,name=begin,proto3,oneof"`
}

type FDBStreamingSessionComand_Execute struct {
	Execute *FDBCrudCommand `protobuf:"bytes,8,opt,name=execute,proto3,oneof"`
}

func (*FDBStreamingSessionComand_Begin) isFDBStreamingSessionComand_Command() {}

func (*FDBStreamingSessionComand_Execute) isFDBStreamingSessionComand_Command() {}

type FDBStreamingSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandId int64 `protobuf:"varint,1,opt,name=commandId,proto3" json:"commandId,omitempty"`
	// Types that are assignable to Response:
	//
	//	*FDBStreamingSessionResponse_Database
	//	*FDBStreamingSessionResponse_ExecResponse
	Response isFDBStreamingSessionResponse_Response `protobuf_oneof:"response"`
}

func (x *FDBStreamingSessionResponse) Reset() {
	*x = FDBStreamingSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_session_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBStreamingSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBStreamingSessionResponse) ProtoMessage() {}

func (x *FDBStreamingSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_session_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBStreamingSessionResponse.ProtoReflect.Descriptor instead.
func (*FDBStreamingSessionResponse) Descriptor() ([]byte, []int) {
	return file_fdb_session_proto_rawDescGZIP(), []int{2}
}

func (x *FDBStreamingSessionResponse) GetCommandId() int64 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

func (m *FDBStreamingSessionResponse) GetResponse() isFDBStreamingSessionResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *FDBStreamingSessionResponse) GetDatabase() *FDBDatabaseMetadata {
	if x, ok := x.GetResponse().(*FDBStreamingSessionResponse_Database); ok {
		return x.Database
	}
	return nil
}

func (x *FDBStreamingSessionResponse) GetExecResponse() *FDBCrudResponse {
	if x, ok := x.GetResponse().(*FDBStreamingSessionResponse_ExecResponse); ok {
		return x.ExecResponse
	}
	return nil
}

type isFDBStreamingSessionResponse_Response interface {
	isFDBStreamingSessionResponse_Response()
}

type FDBStreamingSessionResponse_Database struct {
	Database *FDBDatabaseMetadata `protobuf:"bytes,4,opt,name=database,proto3,oneof"`
}

type FDBStreamingSessionResponse_ExecResponse struct {
	ExecResponse *FDBCrudResponse `protobuf:"bytes,8,opt,name=execResponse,proto3,oneof"`
}

func (*FDBStreamingSessionResponse_Database) isFDBStreamingSessionResponse_Response() {}

func (*FDBStreamingSessionResponse_ExecResponse) isFDBStreamingSessionResponse_Response() {}

var File_fdb_session_proto protoreflect.FileDescriptor

var file_fdb_session_proto_rawDesc = []byte{
	0x0a, 0x11, 0x66, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x69, 0x6f, 0x2e, 0x66, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x0e, 0x66, 0x64, 0x62, 0x5f, 0x63, 0x72,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x66, 0x64, 0x62, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x56, 0x0a, 0x1c, 0x46, 0x44, 0x42, 0x4e, 0x65, 0x77, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0xd0, 0x01, 0x0a,
	0x19, 0x46, 0x44, 0x42, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x69, 0x6f, 0x2e, 0x66, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x44,
	0x42, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x05, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x69, 0x6f, 0x2e, 0x66, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x72,
	0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x07, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22,
	0xdb, 0x01, 0x0a, 0x1b, 0x46, 0x44, 0x42, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x46, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x69, 0x6f, 0x2e, 0x66, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x44, 0x42, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x69,
	0x6f, 0x2e, 0x66, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x72, 0x75, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x86, 0x01,
	0x0a, 0x13, 0x46, 0x44, 0x42, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x12, 0x2e, 0x2e, 0x63, 0x69, 0x6f, 0x2e, 0x66, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x44, 0x42, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x61, 0x6e, 0x64,
	0x1a, 0x30, 0x2e, 0x63, 0x69, 0x6f, 0x2e, 0x66, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x44, 0x42, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x42, 0x2a, 0x0a, 0x13, 0x63, 0x69, 0x6f, 0x2e, 0x66, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5a, 0x13, 0x63,
	0x69, 0x6f, 0x2f, 0x66, 0x64, 0x62, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fdb_session_proto_rawDescOnce sync.Once
	file_fdb_session_proto_rawDescData = file_fdb_session_proto_rawDesc
)

func file_fdb_session_proto_rawDescGZIP() []byte {
	file_fdb_session_proto_rawDescOnce.Do(func() {
		file_fdb_session_proto_rawDescData = protoimpl.X.CompressGZIP(file_fdb_session_proto_rawDescData)
	})
	return file_fdb_session_proto_rawDescData
}

var file_fdb_session_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_fdb_session_proto_goTypes = []any{
	(*FDBNewStreamingSessionComand)(nil), // 0: cio.fdb.record.grpc.FDBNewStreamingSessionComand
	(*FDBStreamingSessionComand)(nil),    // 1: cio.fdb.record.grpc.FDBStreamingSessionComand
	(*FDBStreamingSessionResponse)(nil),  // 2: cio.fdb.record.grpc.FDBStreamingSessionResponse
	(*FDBCrudCommand)(nil),               // 3: cio.fdb.record.grpc.FDBCrudCommand
	(*FDBDatabaseMetadata)(nil),          // 4: cio.fdb.record.grpc.FDBDatabaseMetadata
	(*FDBCrudResponse)(nil),              // 5: cio.fdb.record.grpc.FDBCrudResponse
}
var file_fdb_session_proto_depIdxs = []int32{
	0, // 0: cio.fdb.record.grpc.FDBStreamingSessionComand.begin:type_name -> cio.fdb.record.grpc.FDBNewStreamingSessionComand
	3, // 1: cio.fdb.record.grpc.FDBStreamingSessionComand.execute:type_name -> cio.fdb.record.grpc.FDBCrudCommand
	4, // 2: cio.fdb.record.grpc.FDBStreamingSessionResponse.database:type_name -> cio.fdb.record.grpc.FDBDatabaseMetadata
	5, // 3: cio.fdb.record.grpc.FDBStreamingSessionResponse.execResponse:type_name -> cio.fdb.record.grpc.FDBCrudResponse
	1, // 4: cio.fdb.record.grpc.FDBStreamingSession.execute:input_type -> cio.fdb.record.grpc.FDBStreamingSessionComand
	2, // 5: cio.fdb.record.grpc.FDBStreamingSession.execute:output_type -> cio.fdb.record.grpc.FDBStreamingSessionResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_fdb_session_proto_init() }
func file_fdb_session_proto_init() {
	if File_fdb_session_proto != nil {
		return
	}
	file_fdb_crud_proto_init()
	file_fdb_metadata_manager_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fdb_session_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FDBNewStreamingSessionComand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_session_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*FDBStreamingSessionComand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_session_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*FDBStreamingSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_fdb_session_proto_msgTypes[1].OneofWrappers = []any{
		(*FDBStreamingSessionComand_Begin)(nil),
		(*FDBStreamingSessionComand_Execute)(nil),
	}
	file_fdb_session_proto_msgTypes[2].OneofWrappers = []any{
		(*FDBStreamingSessionResponse_Database)(nil),
		(*FDBStreamingSessionResponse_ExecResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fdb_session_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fdb_session_proto_goTypes,
		DependencyIndexes: file_fdb_session_proto_depIdxs,
		MessageInfos:      file_fdb_session_proto_msgTypes,
	}.Build()
	File_fdb_session_proto = out.File
	file_fdb_session_proto_rawDesc = nil
	file_fdb_session_proto_goTypes = nil
	file_fdb_session_proto_depIdxs = nil
}
