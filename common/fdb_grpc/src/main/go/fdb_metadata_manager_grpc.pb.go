// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.24.4
// source: fdb_metadata_manager.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FDBMetadataManager_CreateOrOpen_FullMethodName = "/cio.fdb.record.grpc.FDBMetadataManager/CreateOrOpen"
)

// FDBMetadataManagerClient is the client API for FDBMetadataManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FDBMetadataManagerClient interface {
	CreateOrOpen(ctx context.Context, in *FDBCreateOrOpenRequest, opts ...grpc.CallOption) (*FDBCreateOrOpenResponse, error)
}

type fDBMetadataManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewFDBMetadataManagerClient(cc grpc.ClientConnInterface) FDBMetadataManagerClient {
	return &fDBMetadataManagerClient{cc}
}

func (c *fDBMetadataManagerClient) CreateOrOpen(ctx context.Context, in *FDBCreateOrOpenRequest, opts ...grpc.CallOption) (*FDBCreateOrOpenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FDBCreateOrOpenResponse)
	err := c.cc.Invoke(ctx, FDBMetadataManager_CreateOrOpen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FDBMetadataManagerServer is the server API for FDBMetadataManager service.
// All implementations must embed UnimplementedFDBMetadataManagerServer
// for forward compatibility
type FDBMetadataManagerServer interface {
	CreateOrOpen(context.Context, *FDBCreateOrOpenRequest) (*FDBCreateOrOpenResponse, error)
	mustEmbedUnimplementedFDBMetadataManagerServer()
}

// UnimplementedFDBMetadataManagerServer must be embedded to have forward compatible implementations.
type UnimplementedFDBMetadataManagerServer struct {
}

func (UnimplementedFDBMetadataManagerServer) CreateOrOpen(context.Context, *FDBCreateOrOpenRequest) (*FDBCreateOrOpenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrOpen not implemented")
}
func (UnimplementedFDBMetadataManagerServer) mustEmbedUnimplementedFDBMetadataManagerServer() {}

// UnsafeFDBMetadataManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FDBMetadataManagerServer will
// result in compilation errors.
type UnsafeFDBMetadataManagerServer interface {
	mustEmbedUnimplementedFDBMetadataManagerServer()
}

func RegisterFDBMetadataManagerServer(s grpc.ServiceRegistrar, srv FDBMetadataManagerServer) {
	s.RegisterService(&FDBMetadataManager_ServiceDesc, srv)
}

func _FDBMetadataManager_CreateOrOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FDBCreateOrOpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FDBMetadataManagerServer).CreateOrOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FDBMetadataManager_CreateOrOpen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FDBMetadataManagerServer).CreateOrOpen(ctx, req.(*FDBCreateOrOpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FDBMetadataManager_ServiceDesc is the grpc.ServiceDesc for FDBMetadataManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FDBMetadataManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cio.fdb.record.grpc.FDBMetadataManager",
	HandlerType: (*FDBMetadataManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrOpen",
			Handler:    _FDBMetadataManager_CreateOrOpen_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fdb_metadata_manager.proto",
}
