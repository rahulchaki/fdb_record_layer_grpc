// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.24.4
// source: fdb_record_grpc.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FDBRemote_NewSession_FullMethodName     = "/cio.fdb.record.grpc.FDBRemote/NewSession"
	FDBRemote_NewRecordStore_FullMethodName = "/cio.fdb.record.grpc.FDBRemote/NewRecordStore"
	FDBRemote_Commit_FullMethodName         = "/cio.fdb.record.grpc.FDBRemote/commit"
	FDBRemote_SaveRecord_FullMethodName     = "/cio.fdb.record.grpc.FDBRemote/SaveRecord"
	FDBRemote_DeleteRecord_FullMethodName   = "/cio.fdb.record.grpc.FDBRemote/DeleteRecord"
	FDBRemote_GetDump_FullMethodName        = "/cio.fdb.record.grpc.FDBRemote/GetDump"
)

// FDBRemoteClient is the client API for FDBRemote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FDBRemoteClient interface {
	NewSession(ctx context.Context, in *FDBRemoteSessionRequest, opts ...grpc.CallOption) (*FDBRemoteSessionHandle, error)
	NewRecordStore(ctx context.Context, in *FDBRemoteRecordStoreRequest, opts ...grpc.CallOption) (*FDBRemoteRecordStoreHandle, error)
	Commit(ctx context.Context, in *FDBRemoteSessionCommitRequest, opts ...grpc.CallOption) (*FDBRemoteSessionCommitResponse, error)
	SaveRecord(ctx context.Context, in *FDBSaveRecordCommand, opts ...grpc.CallOption) (*FDBSaveRecordResult, error)
	DeleteRecord(ctx context.Context, in *FDBDeleteRecordCommand, opts ...grpc.CallOption) (*FDBDeleteRecordResult, error)
	GetDump(ctx context.Context, in *FDBDumpAllCommand, opts ...grpc.CallOption) (FDBRemote_GetDumpClient, error)
}

type fDBRemoteClient struct {
	cc grpc.ClientConnInterface
}

func NewFDBRemoteClient(cc grpc.ClientConnInterface) FDBRemoteClient {
	return &fDBRemoteClient{cc}
}

func (c *fDBRemoteClient) NewSession(ctx context.Context, in *FDBRemoteSessionRequest, opts ...grpc.CallOption) (*FDBRemoteSessionHandle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FDBRemoteSessionHandle)
	err := c.cc.Invoke(ctx, FDBRemote_NewSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fDBRemoteClient) NewRecordStore(ctx context.Context, in *FDBRemoteRecordStoreRequest, opts ...grpc.CallOption) (*FDBRemoteRecordStoreHandle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FDBRemoteRecordStoreHandle)
	err := c.cc.Invoke(ctx, FDBRemote_NewRecordStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fDBRemoteClient) Commit(ctx context.Context, in *FDBRemoteSessionCommitRequest, opts ...grpc.CallOption) (*FDBRemoteSessionCommitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FDBRemoteSessionCommitResponse)
	err := c.cc.Invoke(ctx, FDBRemote_Commit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fDBRemoteClient) SaveRecord(ctx context.Context, in *FDBSaveRecordCommand, opts ...grpc.CallOption) (*FDBSaveRecordResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FDBSaveRecordResult)
	err := c.cc.Invoke(ctx, FDBRemote_SaveRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fDBRemoteClient) DeleteRecord(ctx context.Context, in *FDBDeleteRecordCommand, opts ...grpc.CallOption) (*FDBDeleteRecordResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FDBDeleteRecordResult)
	err := c.cc.Invoke(ctx, FDBRemote_DeleteRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fDBRemoteClient) GetDump(ctx context.Context, in *FDBDumpAllCommand, opts ...grpc.CallOption) (FDBRemote_GetDumpClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FDBRemote_ServiceDesc.Streams[0], FDBRemote_GetDump_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &fDBRemoteGetDumpClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FDBRemote_GetDumpClient interface {
	Recv() (*FDBDumpAllResponseBatch, error)
	grpc.ClientStream
}

type fDBRemoteGetDumpClient struct {
	grpc.ClientStream
}

func (x *fDBRemoteGetDumpClient) Recv() (*FDBDumpAllResponseBatch, error) {
	m := new(FDBDumpAllResponseBatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FDBRemoteServer is the server API for FDBRemote service.
// All implementations must embed UnimplementedFDBRemoteServer
// for forward compatibility
type FDBRemoteServer interface {
	NewSession(context.Context, *FDBRemoteSessionRequest) (*FDBRemoteSessionHandle, error)
	NewRecordStore(context.Context, *FDBRemoteRecordStoreRequest) (*FDBRemoteRecordStoreHandle, error)
	Commit(context.Context, *FDBRemoteSessionCommitRequest) (*FDBRemoteSessionCommitResponse, error)
	SaveRecord(context.Context, *FDBSaveRecordCommand) (*FDBSaveRecordResult, error)
	DeleteRecord(context.Context, *FDBDeleteRecordCommand) (*FDBDeleteRecordResult, error)
	GetDump(*FDBDumpAllCommand, FDBRemote_GetDumpServer) error
	mustEmbedUnimplementedFDBRemoteServer()
}

// UnimplementedFDBRemoteServer must be embedded to have forward compatible implementations.
type UnimplementedFDBRemoteServer struct {
}

func (UnimplementedFDBRemoteServer) NewSession(context.Context, *FDBRemoteSessionRequest) (*FDBRemoteSessionHandle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSession not implemented")
}
func (UnimplementedFDBRemoteServer) NewRecordStore(context.Context, *FDBRemoteRecordStoreRequest) (*FDBRemoteRecordStoreHandle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewRecordStore not implemented")
}
func (UnimplementedFDBRemoteServer) Commit(context.Context, *FDBRemoteSessionCommitRequest) (*FDBRemoteSessionCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedFDBRemoteServer) SaveRecord(context.Context, *FDBSaveRecordCommand) (*FDBSaveRecordResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRecord not implemented")
}
func (UnimplementedFDBRemoteServer) DeleteRecord(context.Context, *FDBDeleteRecordCommand) (*FDBDeleteRecordResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}
func (UnimplementedFDBRemoteServer) GetDump(*FDBDumpAllCommand, FDBRemote_GetDumpServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDump not implemented")
}
func (UnimplementedFDBRemoteServer) mustEmbedUnimplementedFDBRemoteServer() {}

// UnsafeFDBRemoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FDBRemoteServer will
// result in compilation errors.
type UnsafeFDBRemoteServer interface {
	mustEmbedUnimplementedFDBRemoteServer()
}

func RegisterFDBRemoteServer(s grpc.ServiceRegistrar, srv FDBRemoteServer) {
	s.RegisterService(&FDBRemote_ServiceDesc, srv)
}

func _FDBRemote_NewSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FDBRemoteSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FDBRemoteServer).NewSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FDBRemote_NewSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FDBRemoteServer).NewSession(ctx, req.(*FDBRemoteSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FDBRemote_NewRecordStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FDBRemoteRecordStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FDBRemoteServer).NewRecordStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FDBRemote_NewRecordStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FDBRemoteServer).NewRecordStore(ctx, req.(*FDBRemoteRecordStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FDBRemote_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FDBRemoteSessionCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FDBRemoteServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FDBRemote_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FDBRemoteServer).Commit(ctx, req.(*FDBRemoteSessionCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FDBRemote_SaveRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FDBSaveRecordCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FDBRemoteServer).SaveRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FDBRemote_SaveRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FDBRemoteServer).SaveRecord(ctx, req.(*FDBSaveRecordCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _FDBRemote_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FDBDeleteRecordCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FDBRemoteServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FDBRemote_DeleteRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FDBRemoteServer).DeleteRecord(ctx, req.(*FDBDeleteRecordCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _FDBRemote_GetDump_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FDBDumpAllCommand)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FDBRemoteServer).GetDump(m, &fDBRemoteGetDumpServer{ServerStream: stream})
}

type FDBRemote_GetDumpServer interface {
	Send(*FDBDumpAllResponseBatch) error
	grpc.ServerStream
}

type fDBRemoteGetDumpServer struct {
	grpc.ServerStream
}

func (x *fDBRemoteGetDumpServer) Send(m *FDBDumpAllResponseBatch) error {
	return x.ServerStream.SendMsg(m)
}

// FDBRemote_ServiceDesc is the grpc.ServiceDesc for FDBRemote service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FDBRemote_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cio.fdb.record.grpc.FDBRemote",
	HandlerType: (*FDBRemoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewSession",
			Handler:    _FDBRemote_NewSession_Handler,
		},
		{
			MethodName: "NewRecordStore",
			Handler:    _FDBRemote_NewRecordStore_Handler,
		},
		{
			MethodName: "commit",
			Handler:    _FDBRemote_Commit_Handler,
		},
		{
			MethodName: "SaveRecord",
			Handler:    _FDBRemote_SaveRecord_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _FDBRemote_DeleteRecord_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDump",
			Handler:       _FDBRemote_GetDump_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fdb_record_grpc.proto",
}
