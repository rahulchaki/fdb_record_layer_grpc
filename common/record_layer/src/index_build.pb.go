//
// index_metadata.proto
//
// This source file is part of the FoundationDB open source project
//
// Copyright 2015-2021 Apple Inc. and the FoundationDB project authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.24.4
// source: index_build.proto

package src

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IndexBuildIndexingStamp_Method int32

const (
	IndexBuildIndexingStamp_INVALID                 IndexBuildIndexingStamp_Method = 0 // let zero be invalid
	IndexBuildIndexingStamp_BY_RECORDS              IndexBuildIndexingStamp_Method = 1 // indexing by records - scanning all records in a record store
	IndexBuildIndexingStamp_BY_INDEX                IndexBuildIndexingStamp_Method = 2 // indexing by a source index. When source index points to all possible records of the target index.
	IndexBuildIndexingStamp_SCRUB_REPAIR            IndexBuildIndexingStamp_Method = 3 // while readable, verify index validity. Repair if needed.
	IndexBuildIndexingStamp_MULTI_TARGET_BY_RECORDS IndexBuildIndexingStamp_Method = 4 // scan records, build multiple target indexes
	IndexBuildIndexingStamp_MUTUAL_BY_RECORDS       IndexBuildIndexingStamp_Method = 5 // scan records, build multiple target indexes, while allowing multiple indexer processes
	IndexBuildIndexingStamp_NONE                    IndexBuildIndexingStamp_Method = 6 // return this stamp in query when null - never to be written in the DB
)

// Enum value maps for IndexBuildIndexingStamp_Method.
var (
	IndexBuildIndexingStamp_Method_name = map[int32]string{
		0: "INVALID",
		1: "BY_RECORDS",
		2: "BY_INDEX",
		3: "SCRUB_REPAIR",
		4: "MULTI_TARGET_BY_RECORDS",
		5: "MUTUAL_BY_RECORDS",
		6: "NONE",
	}
	IndexBuildIndexingStamp_Method_value = map[string]int32{
		"INVALID":                 0,
		"BY_RECORDS":              1,
		"BY_INDEX":                2,
		"SCRUB_REPAIR":            3,
		"MULTI_TARGET_BY_RECORDS": 4,
		"MUTUAL_BY_RECORDS":       5,
		"NONE":                    6,
	}
)

func (x IndexBuildIndexingStamp_Method) Enum() *IndexBuildIndexingStamp_Method {
	p := new(IndexBuildIndexingStamp_Method)
	*p = x
	return p
}

func (x IndexBuildIndexingStamp_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexBuildIndexingStamp_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_index_build_proto_enumTypes[0].Descriptor()
}

func (IndexBuildIndexingStamp_Method) Type() protoreflect.EnumType {
	return &file_index_build_proto_enumTypes[0]
}

func (x IndexBuildIndexingStamp_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *IndexBuildIndexingStamp_Method) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = IndexBuildIndexingStamp_Method(num)
	return nil
}

// Deprecated: Use IndexBuildIndexingStamp_Method.Descriptor instead.
func (IndexBuildIndexingStamp_Method) EnumDescriptor() ([]byte, []int) {
	return file_index_build_proto_rawDescGZIP(), []int{0, 0}
}

type IndexBuildIndexingStamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method                         *IndexBuildIndexingStamp_Method `protobuf:"varint,1,opt,name=method,enum=com.apple.foundationdb.record.IndexBuildIndexingStamp_Method" json:"method,omitempty"`
	SourceIndexSubspaceKey         []byte                          `protobuf:"bytes,2,opt,name=source_index_subspace_key,json=sourceIndexSubspaceKey" json:"source_index_subspace_key,omitempty"`                            // relevant only with BY_INDEX method
	SourceIndexLastModifiedVersion *int32                          `protobuf:"varint,3,opt,name=source_index_last_modified_version,json=sourceIndexLastModifiedVersion" json:"source_index_last_modified_version,omitempty"` // only with BY_INDEX method
	TargetIndex                    []string                        `protobuf:"bytes,4,rep,name=targetIndex" json:"targetIndex,omitempty"`                                                                                    // (Only with MULTI_TARGET & MUTUAL) list of target indexes sorted alphabetically
	// the first item is used as the primary index
	Block                        *bool   `protobuf:"varint,5,opt,name=block" json:"block,omitempty"`                                               // if true and unexpired, indexing may not be continued
	BlockExpireEpochMilliSeconds *uint64 `protobuf:"varint,6,opt,name=blockExpireEpochMilliSeconds" json:"blockExpireEpochMilliSeconds,omitempty"` // if non zero, the block expiration time in milliseconds since epoch
	BlockID                      *string `protobuf:"bytes,7,opt,name=blockID" json:"blockID,omitempty"`                                            // optional, a short string that describes the reason for the block.
}

func (x *IndexBuildIndexingStamp) Reset() {
	*x = IndexBuildIndexingStamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_build_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexBuildIndexingStamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexBuildIndexingStamp) ProtoMessage() {}

func (x *IndexBuildIndexingStamp) ProtoReflect() protoreflect.Message {
	mi := &file_index_build_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexBuildIndexingStamp.ProtoReflect.Descriptor instead.
func (*IndexBuildIndexingStamp) Descriptor() ([]byte, []int) {
	return file_index_build_proto_rawDescGZIP(), []int{0}
}

func (x *IndexBuildIndexingStamp) GetMethod() IndexBuildIndexingStamp_Method {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return IndexBuildIndexingStamp_INVALID
}

func (x *IndexBuildIndexingStamp) GetSourceIndexSubspaceKey() []byte {
	if x != nil {
		return x.SourceIndexSubspaceKey
	}
	return nil
}

func (x *IndexBuildIndexingStamp) GetSourceIndexLastModifiedVersion() int32 {
	if x != nil && x.SourceIndexLastModifiedVersion != nil {
		return *x.SourceIndexLastModifiedVersion
	}
	return 0
}

func (x *IndexBuildIndexingStamp) GetTargetIndex() []string {
	if x != nil {
		return x.TargetIndex
	}
	return nil
}

func (x *IndexBuildIndexingStamp) GetBlock() bool {
	if x != nil && x.Block != nil {
		return *x.Block
	}
	return false
}

func (x *IndexBuildIndexingStamp) GetBlockExpireEpochMilliSeconds() uint64 {
	if x != nil && x.BlockExpireEpochMilliSeconds != nil {
		return *x.BlockExpireEpochMilliSeconds
	}
	return 0
}

func (x *IndexBuildIndexingStamp) GetBlockID() string {
	if x != nil && x.BlockID != nil {
		return *x.BlockID
	}
	return ""
}

var File_index_build_proto protoreflect.FileDescriptor

var file_index_build_proto_rawDesc = []byte{
	0x0a, 0x11, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x22, 0x93, 0x04, 0x0a, 0x17, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x55,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x75, 0x62, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x4a, 0x0a, 0x22, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x42, 0x0a, 0x1c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x44, 0x22, 0x83, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x59,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x59,
	0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x43, 0x52, 0x55,
	0x42, 0x5f, 0x52, 0x45, 0x50, 0x41, 0x49, 0x52, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x53, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x55, 0x54, 0x55, 0x41,
	0x4c, 0x5f, 0x42, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x53, 0x10, 0x05, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x06, 0x42, 0x25, 0x42, 0x0f, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x12, 0x63, 0x69, 0x6f,
	0x2f, 0x66, 0x64, 0x62, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x73, 0x72, 0x63,
}

var (
	file_index_build_proto_rawDescOnce sync.Once
	file_index_build_proto_rawDescData = file_index_build_proto_rawDesc
)

func file_index_build_proto_rawDescGZIP() []byte {
	file_index_build_proto_rawDescOnce.Do(func() {
		file_index_build_proto_rawDescData = protoimpl.X.CompressGZIP(file_index_build_proto_rawDescData)
	})
	return file_index_build_proto_rawDescData
}

var file_index_build_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_index_build_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_index_build_proto_goTypes = []any{
	(IndexBuildIndexingStamp_Method)(0), // 0: com.apple.foundationdb.record.IndexBuildIndexingStamp.Method
	(*IndexBuildIndexingStamp)(nil),     // 1: com.apple.foundationdb.record.IndexBuildIndexingStamp
}
var file_index_build_proto_depIdxs = []int32{
	0, // 0: com.apple.foundationdb.record.IndexBuildIndexingStamp.method:type_name -> com.apple.foundationdb.record.IndexBuildIndexingStamp.Method
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_index_build_proto_init() }
func file_index_build_proto_init() {
	if File_index_build_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_index_build_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*IndexBuildIndexingStamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_index_build_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_index_build_proto_goTypes,
		DependencyIndexes: file_index_build_proto_depIdxs,
		EnumInfos:         file_index_build_proto_enumTypes,
		MessageInfos:      file_index_build_proto_msgTypes,
	}.Build()
	File_index_build_proto = out.File
	file_index_build_proto_rawDesc = nil
	file_index_build_proto_goTypes = nil
	file_index_build_proto_depIdxs = nil
}
