//
// record_query_plan.proto
//
// This source file is part of the FoundationDB open source projectsour
//
// Copyright 2015-2018 Apple Inc. and the FoundationDB project authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.24.4
// source: record_query_plan.proto

package src

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PIndexFetchMethod int32

const (
	PIndexFetchMethod_SCAN_AND_FETCH                 PIndexFetchMethod = 1
	PIndexFetchMethod_USE_REMOTE_FETCH               PIndexFetchMethod = 2
	PIndexFetchMethod_USE_REMOTE_FETCH_WITH_FALLBACK PIndexFetchMethod = 3
)

// Enum value maps for PIndexFetchMethod.
var (
	PIndexFetchMethod_name = map[int32]string{
		1: "SCAN_AND_FETCH",
		2: "USE_REMOTE_FETCH",
		3: "USE_REMOTE_FETCH_WITH_FALLBACK",
	}
	PIndexFetchMethod_value = map[string]int32{
		"SCAN_AND_FETCH":                 1,
		"USE_REMOTE_FETCH":               2,
		"USE_REMOTE_FETCH_WITH_FALLBACK": 3,
	}
)

func (x PIndexFetchMethod) Enum() *PIndexFetchMethod {
	p := new(PIndexFetchMethod)
	*p = x
	return p
}

func (x PIndexFetchMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PIndexFetchMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_record_query_plan_proto_enumTypes[0].Descriptor()
}

func (PIndexFetchMethod) Type() protoreflect.EnumType {
	return &file_record_query_plan_proto_enumTypes[0]
}

func (x PIndexFetchMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PIndexFetchMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PIndexFetchMethod(num)
	return nil
}

// Deprecated: Use PIndexFetchMethod.Descriptor instead.
func (PIndexFetchMethod) EnumDescriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{0}
}

type PFetchIndexRecords int32

const (
	PFetchIndexRecords_PRIMARY_KEY            PFetchIndexRecords = 1
	PFetchIndexRecords_SYNTHETIC_CONSTITUENTS PFetchIndexRecords = 2
)

// Enum value maps for PFetchIndexRecords.
var (
	PFetchIndexRecords_name = map[int32]string{
		1: "PRIMARY_KEY",
		2: "SYNTHETIC_CONSTITUENTS",
	}
	PFetchIndexRecords_value = map[string]int32{
		"PRIMARY_KEY":            1,
		"SYNTHETIC_CONSTITUENTS": 2,
	}
)

func (x PFetchIndexRecords) Enum() *PFetchIndexRecords {
	p := new(PFetchIndexRecords)
	*p = x
	return p
}

func (x PFetchIndexRecords) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PFetchIndexRecords) Descriptor() protoreflect.EnumDescriptor {
	return file_record_query_plan_proto_enumTypes[1].Descriptor()
}

func (PFetchIndexRecords) Type() protoreflect.EnumType {
	return &file_record_query_plan_proto_enumTypes[1]
}

func (x PFetchIndexRecords) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PFetchIndexRecords) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PFetchIndexRecords(num)
	return nil
}

// Deprecated: Use PFetchIndexRecords.Descriptor instead.
func (PFetchIndexRecords) EnumDescriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{1}
}

type PType_PTypeCode int32

const (
	PType_UNKNOWN  PType_PTypeCode = 1
	PType_ANY      PType_PTypeCode = 2
	PType_NULL     PType_PTypeCode = 3
	PType_BOOLEAN  PType_PTypeCode = 4
	PType_BYTES    PType_PTypeCode = 5
	PType_DOUBLE   PType_PTypeCode = 6
	PType_FLOAT    PType_PTypeCode = 7
	PType_INT      PType_PTypeCode = 8
	PType_LONG     PType_PTypeCode = 9
	PType_STRING   PType_PTypeCode = 10
	PType_VERSION  PType_PTypeCode = 11
	PType_ENUM     PType_PTypeCode = 12
	PType_RECORD   PType_PTypeCode = 13
	PType_ARRAY    PType_PTypeCode = 14
	PType_RELATION PType_PTypeCode = 15
	PType_NONE     PType_PTypeCode = 16
)

// Enum value maps for PType_PTypeCode.
var (
	PType_PTypeCode_name = map[int32]string{
		1:  "UNKNOWN",
		2:  "ANY",
		3:  "NULL",
		4:  "BOOLEAN",
		5:  "BYTES",
		6:  "DOUBLE",
		7:  "FLOAT",
		8:  "INT",
		9:  "LONG",
		10: "STRING",
		11: "VERSION",
		12: "ENUM",
		13: "RECORD",
		14: "ARRAY",
		15: "RELATION",
		16: "NONE",
	}
	PType_PTypeCode_value = map[string]int32{
		"UNKNOWN":  1,
		"ANY":      2,
		"NULL":     3,
		"BOOLEAN":  4,
		"BYTES":    5,
		"DOUBLE":   6,
		"FLOAT":    7,
		"INT":      8,
		"LONG":     9,
		"STRING":   10,
		"VERSION":  11,
		"ENUM":     12,
		"RECORD":   13,
		"ARRAY":    14,
		"RELATION": 15,
		"NONE":     16,
	}
)

func (x PType_PTypeCode) Enum() *PType_PTypeCode {
	p := new(PType_PTypeCode)
	*p = x
	return p
}

func (x PType_PTypeCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PType_PTypeCode) Descriptor() protoreflect.EnumDescriptor {
	return file_record_query_plan_proto_enumTypes[2].Descriptor()
}

func (PType_PTypeCode) Type() protoreflect.EnumType {
	return &file_record_query_plan_proto_enumTypes[2]
}

func (x PType_PTypeCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PType_PTypeCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PType_PTypeCode(num)
	return nil
}

// Deprecated: Use PType_PTypeCode.Descriptor instead.
func (PType_PTypeCode) EnumDescriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{0, 0}
}

type PPrimitiveCoercionBiFunction_PPhysicalOperator int32

const (
	PPrimitiveCoercionBiFunction_INT_TO_LONG     PPrimitiveCoercionBiFunction_PPhysicalOperator = 1
	PPrimitiveCoercionBiFunction_INT_TO_FLOAT    PPrimitiveCoercionBiFunction_PPhysicalOperator = 2
	PPrimitiveCoercionBiFunction_INT_TO_DOUBLE   PPrimitiveCoercionBiFunction_PPhysicalOperator = 3
	PPrimitiveCoercionBiFunction_LONG_TO_FLOAT   PPrimitiveCoercionBiFunction_PPhysicalOperator = 4
	PPrimitiveCoercionBiFunction_LONG_TO_DOUBLE  PPrimitiveCoercionBiFunction_PPhysicalOperator = 5
	PPrimitiveCoercionBiFunction_FLOAT_TO_DOUBLE PPrimitiveCoercionBiFunction_PPhysicalOperator = 6
	PPrimitiveCoercionBiFunction_NULL_TO_INT     PPrimitiveCoercionBiFunction_PPhysicalOperator = 7
	PPrimitiveCoercionBiFunction_NULL_TO_LONG    PPrimitiveCoercionBiFunction_PPhysicalOperator = 8
	PPrimitiveCoercionBiFunction_NULL_TO_FLOAT   PPrimitiveCoercionBiFunction_PPhysicalOperator = 9
	PPrimitiveCoercionBiFunction_NULL_TO_DOUBLE  PPrimitiveCoercionBiFunction_PPhysicalOperator = 10
	PPrimitiveCoercionBiFunction_NULL_TO_BOOLEAN PPrimitiveCoercionBiFunction_PPhysicalOperator = 11
	PPrimitiveCoercionBiFunction_NULL_TO_STRING  PPrimitiveCoercionBiFunction_PPhysicalOperator = 12
	PPrimitiveCoercionBiFunction_NULL_TO_ARRAY   PPrimitiveCoercionBiFunction_PPhysicalOperator = 13
	PPrimitiveCoercionBiFunction_NULL_TO_RECORD  PPrimitiveCoercionBiFunction_PPhysicalOperator = 14
	PPrimitiveCoercionBiFunction_NONE_TO_ARRAY   PPrimitiveCoercionBiFunction_PPhysicalOperator = 15
	PPrimitiveCoercionBiFunction_NULL_TO_ENUM    PPrimitiveCoercionBiFunction_PPhysicalOperator = 16
	PPrimitiveCoercionBiFunction_STRING_TO_ENUM  PPrimitiveCoercionBiFunction_PPhysicalOperator = 17
)

// Enum value maps for PPrimitiveCoercionBiFunction_PPhysicalOperator.
var (
	PPrimitiveCoercionBiFunction_PPhysicalOperator_name = map[int32]string{
		1:  "INT_TO_LONG",
		2:  "INT_TO_FLOAT",
		3:  "INT_TO_DOUBLE",
		4:  "LONG_TO_FLOAT",
		5:  "LONG_TO_DOUBLE",
		6:  "FLOAT_TO_DOUBLE",
		7:  "NULL_TO_INT",
		8:  "NULL_TO_LONG",
		9:  "NULL_TO_FLOAT",
		10: "NULL_TO_DOUBLE",
		11: "NULL_TO_BOOLEAN",
		12: "NULL_TO_STRING",
		13: "NULL_TO_ARRAY",
		14: "NULL_TO_RECORD",
		15: "NONE_TO_ARRAY",
		16: "NULL_TO_ENUM",
		17: "STRING_TO_ENUM",
	}
	PPrimitiveCoercionBiFunction_PPhysicalOperator_value = map[string]int32{
		"INT_TO_LONG":     1,
		"INT_TO_FLOAT":    2,
		"INT_TO_DOUBLE":   3,
		"LONG_TO_FLOAT":   4,
		"LONG_TO_DOUBLE":  5,
		"FLOAT_TO_DOUBLE": 6,
		"NULL_TO_INT":     7,
		"NULL_TO_LONG":    8,
		"NULL_TO_FLOAT":   9,
		"NULL_TO_DOUBLE":  10,
		"NULL_TO_BOOLEAN": 11,
		"NULL_TO_STRING":  12,
		"NULL_TO_ARRAY":   13,
		"NULL_TO_RECORD":  14,
		"NONE_TO_ARRAY":   15,
		"NULL_TO_ENUM":    16,
		"STRING_TO_ENUM":  17,
	}
)

func (x PPrimitiveCoercionBiFunction_PPhysicalOperator) Enum() *PPrimitiveCoercionBiFunction_PPhysicalOperator {
	p := new(PPrimitiveCoercionBiFunction_PPhysicalOperator)
	*p = x
	return p
}

func (x PPrimitiveCoercionBiFunction_PPhysicalOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PPrimitiveCoercionBiFunction_PPhysicalOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_record_query_plan_proto_enumTypes[3].Descriptor()
}

func (PPrimitiveCoercionBiFunction_PPhysicalOperator) Type() protoreflect.EnumType {
	return &file_record_query_plan_proto_enumTypes[3]
}

func (x PPrimitiveCoercionBiFunction_PPhysicalOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PPrimitiveCoercionBiFunction_PPhysicalOperator) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PPrimitiveCoercionBiFunction_PPhysicalOperator(num)
	return nil
}

// Deprecated: Use PPrimitiveCoercionBiFunction_PPhysicalOperator.Descriptor instead.
func (PPrimitiveCoercionBiFunction_PPhysicalOperator) EnumDescriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{3, 0}
}

type PAndOrValue_POperator int32

const (
	PAndOrValue_AND PAndOrValue_POperator = 1
	PAndOrValue_OR  PAndOrValue_POperator = 2
)

// Enum value maps for PAndOrValue_POperator.
var (
	PAndOrValue_POperator_name = map[int32]string{
		1: "AND",
		2: "OR",
	}
	PAndOrValue_POperator_value = map[string]int32{
		"AND": 1,
		"OR":  2,
	}
)

func (x PAndOrValue_POperator) Enum() *PAndOrValue_POperator {
	p := new(PAndOrValue_POperator)
	*p = x
	return p
}

func (x PAndOrValue_POperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PAndOrValue_POperator) Descriptor() protoreflect.EnumDescriptor {
	return file_record_query_plan_proto_enumTypes[4].Descriptor()
}

func (PAndOrValue_POperator) Type() protoreflect.EnumType {
	return &file_record_query_plan_proto_enumTypes[4]
}

func (x PAndOrValue_POperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PAndOrValue_POperator) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PAndOrValue_POperator(num)
	return nil
}

// Deprecated: Use PAndOrValue_POperator.Descriptor instead.
func (PAndOrValue_POperator) EnumDescriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{10, 0}
}

type PArithmeticValue_PPhysicalOperator int32

const (
	PArithmeticValue_ADD_II PArithmeticValue_PPhysicalOperator = 1
	PArithmeticValue_ADD_IL PArithmeticValue_PPhysicalOperator = 2
	PArithmeticValue_ADD_IF PArithmeticValue_PPhysicalOperator = 3
	PArithmeticValue_ADD_ID PArithmeticValue_PPhysicalOperator = 4
	PArithmeticValue_ADD_IS PArithmeticValue_PPhysicalOperator = 5
	PArithmeticValue_ADD_LI PArithmeticValue_PPhysicalOperator = 6
	PArithmeticValue_ADD_LL PArithmeticValue_PPhysicalOperator = 7
	PArithmeticValue_ADD_LF PArithmeticValue_PPhysicalOperator = 8
	PArithmeticValue_ADD_LD PArithmeticValue_PPhysicalOperator = 9
	PArithmeticValue_ADD_LS PArithmeticValue_PPhysicalOperator = 10
	PArithmeticValue_ADD_FI PArithmeticValue_PPhysicalOperator = 11
	PArithmeticValue_ADD_FL PArithmeticValue_PPhysicalOperator = 12
	PArithmeticValue_ADD_FF PArithmeticValue_PPhysicalOperator = 13
	PArithmeticValue_ADD_FD PArithmeticValue_PPhysicalOperator = 14
	PArithmeticValue_ADD_FS PArithmeticValue_PPhysicalOperator = 15
	PArithmeticValue_ADD_DI PArithmeticValue_PPhysicalOperator = 16
	PArithmeticValue_ADD_DL PArithmeticValue_PPhysicalOperator = 17
	PArithmeticValue_ADD_DF PArithmeticValue_PPhysicalOperator = 18
	PArithmeticValue_ADD_DD PArithmeticValue_PPhysicalOperator = 19
	PArithmeticValue_ADD_DS PArithmeticValue_PPhysicalOperator = 20
	PArithmeticValue_ADD_SI PArithmeticValue_PPhysicalOperator = 21
	PArithmeticValue_ADD_SL PArithmeticValue_PPhysicalOperator = 22
	PArithmeticValue_ADD_SF PArithmeticValue_PPhysicalOperator = 23
	PArithmeticValue_ADD_SD PArithmeticValue_PPhysicalOperator = 24
	PArithmeticValue_ADD_SS PArithmeticValue_PPhysicalOperator = 25
	PArithmeticValue_SUB_II PArithmeticValue_PPhysicalOperator = 26
	PArithmeticValue_SUB_IL PArithmeticValue_PPhysicalOperator = 27
	PArithmeticValue_SUB_IF PArithmeticValue_PPhysicalOperator = 28
	PArithmeticValue_SUB_ID PArithmeticValue_PPhysicalOperator = 29
	PArithmeticValue_SUB_LI PArithmeticValue_PPhysicalOperator = 30
	PArithmeticValue_SUB_LL PArithmeticValue_PPhysicalOperator = 31
	PArithmeticValue_SUB_LF PArithmeticValue_PPhysicalOperator = 32
	PArithmeticValue_SUB_LD PArithmeticValue_PPhysicalOperator = 33
	PArithmeticValue_SUB_FI PArithmeticValue_PPhysicalOperator = 34
	PArithmeticValue_SUB_FL PArithmeticValue_PPhysicalOperator = 35
	PArithmeticValue_SUB_FF PArithmeticValue_PPhysicalOperator = 36
	PArithmeticValue_SUB_FD PArithmeticValue_PPhysicalOperator = 37
	PArithmeticValue_SUB_DI PArithmeticValue_PPhysicalOperator = 38
	PArithmeticValue_SUB_DL PArithmeticValue_PPhysicalOperator = 39
	PArithmeticValue_SUB_DF PArithmeticValue_PPhysicalOperator = 40
	PArithmeticValue_SUB_DD PArithmeticValue_PPhysicalOperator = 41
	PArithmeticValue_MUL_II PArithmeticValue_PPhysicalOperator = 42 // my favorite
	PArithmeticValue_MUL_IL PArithmeticValue_PPhysicalOperator = 43
	PArithmeticValue_MUL_IF PArithmeticValue_PPhysicalOperator = 44
	PArithmeticValue_MUL_ID PArithmeticValue_PPhysicalOperator = 45
	PArithmeticValue_MUL_LI PArithmeticValue_PPhysicalOperator = 46
	PArithmeticValue_MUL_LL PArithmeticValue_PPhysicalOperator = 47
	PArithmeticValue_MUL_LF PArithmeticValue_PPhysicalOperator = 48
	PArithmeticValue_MUL_LD PArithmeticValue_PPhysicalOperator = 49
	PArithmeticValue_MUL_FI PArithmeticValue_PPhysicalOperator = 50
	PArithmeticValue_MUL_FL PArithmeticValue_PPhysicalOperator = 51
	PArithmeticValue_MUL_FF PArithmeticValue_PPhysicalOperator = 52
	PArithmeticValue_MUL_FD PArithmeticValue_PPhysicalOperator = 53
	PArithmeticValue_MUL_DI PArithmeticValue_PPhysicalOperator = 54
	PArithmeticValue_MUL_DL PArithmeticValue_PPhysicalOperator = 55
	PArithmeticValue_MUL_DF PArithmeticValue_PPhysicalOperator = 56
	PArithmeticValue_MUL_DD PArithmeticValue_PPhysicalOperator = 57
	PArithmeticValue_DIV_II PArithmeticValue_PPhysicalOperator = 58
	PArithmeticValue_DIV_IL PArithmeticValue_PPhysicalOperator = 59
	PArithmeticValue_DIV_IF PArithmeticValue_PPhysicalOperator = 60
	PArithmeticValue_DIV_ID PArithmeticValue_PPhysicalOperator = 61
	PArithmeticValue_DIV_LI PArithmeticValue_PPhysicalOperator = 62
	PArithmeticValue_DIV_LL PArithmeticValue_PPhysicalOperator = 63
	PArithmeticValue_DIV_LF PArithmeticValue_PPhysicalOperator = 64
	PArithmeticValue_DIV_LD PArithmeticValue_PPhysicalOperator = 65
	PArithmeticValue_DIV_FI PArithmeticValue_PPhysicalOperator = 66
	PArithmeticValue_DIV_FL PArithmeticValue_PPhysicalOperator = 67
	PArithmeticValue_DIV_FF PArithmeticValue_PPhysicalOperator = 68
	PArithmeticValue_DIV_FD PArithmeticValue_PPhysicalOperator = 69
	PArithmeticValue_DIV_DI PArithmeticValue_PPhysicalOperator = 70
	PArithmeticValue_DIV_DL PArithmeticValue_PPhysicalOperator = 71
	PArithmeticValue_DIV_DF PArithmeticValue_PPhysicalOperator = 72
	PArithmeticValue_DIV_DD PArithmeticValue_PPhysicalOperator = 73
	PArithmeticValue_MOD_II PArithmeticValue_PPhysicalOperator = 74
	PArithmeticValue_MOD_IL PArithmeticValue_PPhysicalOperator = 75
	PArithmeticValue_MOD_IF PArithmeticValue_PPhysicalOperator = 76
	PArithmeticValue_MOD_ID PArithmeticValue_PPhysicalOperator = 77
	PArithmeticValue_MOD_LI PArithmeticValue_PPhysicalOperator = 78
	PArithmeticValue_MOD_LL PArithmeticValue_PPhysicalOperator = 79
	PArithmeticValue_MOD_LF PArithmeticValue_PPhysicalOperator = 80
	PArithmeticValue_MOD_LD PArithmeticValue_PPhysicalOperator = 81
	PArithmeticValue_MOD_FI PArithmeticValue_PPhysicalOperator = 82
	PArithmeticValue_MOD_FL PArithmeticValue_PPhysicalOperator = 83
	PArithmeticValue_MOD_FF PArithmeticValue_PPhysicalOperator = 84
	PArithmeticValue_MOD_FD PArithmeticValue_PPhysicalOperator = 85
	PArithmeticValue_MOD_DI PArithmeticValue_PPhysicalOperator = 86
	PArithmeticValue_MOD_DL PArithmeticValue_PPhysicalOperator = 87
	PArithmeticValue_MOD_DF PArithmeticValue_PPhysicalOperator = 88
	PArithmeticValue_MOD_DD PArithmeticValue_PPhysicalOperator = 89
)

// Enum value maps for PArithmeticValue_PPhysicalOperator.
var (
	PArithmeticValue_PPhysicalOperator_name = map[int32]string{
		1:  "ADD_II",
		2:  "ADD_IL",
		3:  "ADD_IF",
		4:  "ADD_ID",
		5:  "ADD_IS",
		6:  "ADD_LI",
		7:  "ADD_LL",
		8:  "ADD_LF",
		9:  "ADD_LD",
		10: "ADD_LS",
		11: "ADD_FI",
		12: "ADD_FL",
		13: "ADD_FF",
		14: "ADD_FD",
		15: "ADD_FS",
		16: "ADD_DI",
		17: "ADD_DL",
		18: "ADD_DF",
		19: "ADD_DD",
		20: "ADD_DS",
		21: "ADD_SI",
		22: "ADD_SL",
		23: "ADD_SF",
		24: "ADD_SD",
		25: "ADD_SS",
		26: "SUB_II",
		27: "SUB_IL",
		28: "SUB_IF",
		29: "SUB_ID",
		30: "SUB_LI",
		31: "SUB_LL",
		32: "SUB_LF",
		33: "SUB_LD",
		34: "SUB_FI",
		35: "SUB_FL",
		36: "SUB_FF",
		37: "SUB_FD",
		38: "SUB_DI",
		39: "SUB_DL",
		40: "SUB_DF",
		41: "SUB_DD",
		42: "MUL_II",
		43: "MUL_IL",
		44: "MUL_IF",
		45: "MUL_ID",
		46: "MUL_LI",
		47: "MUL_LL",
		48: "MUL_LF",
		49: "MUL_LD",
		50: "MUL_FI",
		51: "MUL_FL",
		52: "MUL_FF",
		53: "MUL_FD",
		54: "MUL_DI",
		55: "MUL_DL",
		56: "MUL_DF",
		57: "MUL_DD",
		58: "DIV_II",
		59: "DIV_IL",
		60: "DIV_IF",
		61: "DIV_ID",
		62: "DIV_LI",
		63: "DIV_LL",
		64: "DIV_LF",
		65: "DIV_LD",
		66: "DIV_FI",
		67: "DIV_FL",
		68: "DIV_FF",
		69: "DIV_FD",
		70: "DIV_DI",
		71: "DIV_DL",
		72: "DIV_DF",
		73: "DIV_DD",
		74: "MOD_II",
		75: "MOD_IL",
		76: "MOD_IF",
		77: "MOD_ID",
		78: "MOD_LI",
		79: "MOD_LL",
		80: "MOD_LF",
		81: "MOD_LD",
		82: "MOD_FI",
		83: "MOD_FL",
		84: "MOD_FF",
		85: "MOD_FD",
		86: "MOD_DI",
		87: "MOD_DL",
		88: "MOD_DF",
		89: "MOD_DD",
	}
	PArithmeticValue_PPhysicalOperator_value = map[string]int32{
		"ADD_II": 1,
		"ADD_IL": 2,
		"ADD_IF": 3,
		"ADD_ID": 4,
		"ADD_IS": 5,
		"ADD_LI": 6,
		"ADD_LL": 7,
		"ADD_LF": 8,
		"ADD_LD": 9,
		"ADD_LS": 10,
		"ADD_FI": 11,
		"ADD_FL": 12,
		"ADD_FF": 13,
		"ADD_FD": 14,
		"ADD_FS": 15,
		"ADD_DI": 16,
		"ADD_DL": 17,
		"ADD_DF": 18,
		"ADD_DD": 19,
		"ADD_DS": 20,
		"ADD_SI": 21,
		"ADD_SL": 22,
		"ADD_SF": 23,
		"ADD_SD": 24,
		"ADD_SS": 25,
		"SUB_II": 26,
		"SUB_IL": 27,
		"SUB_IF": 28,
		"SUB_ID": 29,
		"SUB_LI": 30,
		"SUB_LL": 31,
		"SUB_LF": 32,
		"SUB_LD": 33,
		"SUB_FI": 34,
		"SUB_FL": 35,
		"SUB_FF": 36,
		"SUB_FD": 37,
		"SUB_DI": 38,
		"SUB_DL": 39,
		"SUB_DF": 40,
		"SUB_DD": 41,
		"MUL_II": 42,
		"MUL_IL": 43,
		"MUL_IF": 44,
		"MUL_ID": 45,
		"MUL_LI": 46,
		"MUL_LL": 47,
		"MUL_LF": 48,
		"MUL_LD": 49,
		"MUL_FI": 50,
		"MUL_FL": 51,
		"MUL_FF": 52,
		"MUL_FD": 53,
		"MUL_DI": 54,
		"MUL_DL": 55,
		"MUL_DF": 56,
		"MUL_DD": 57,
		"DIV_II": 58,
		"DIV_IL": 59,
		"DIV_IF": 60,
		"DIV_ID": 61,
		"DIV_LI": 62,
		"DIV_LL": 63,
		"DIV_LF": 64,
		"DIV_LD": 65,
		"DIV_FI": 66,
		"DIV_FL": 67,
		"DIV_FF": 68,
		"DIV_FD": 69,
		"DIV_DI": 70,
		"DIV_DL": 71,
		"DIV_DF": 72,
		"DIV_DD": 73,
		"MOD_II": 74,
		"MOD_IL": 75,
		"MOD_IF": 76,
		"MOD_ID": 77,
		"MOD_LI": 78,
		"MOD_LL": 79,
		"MOD_LF": 80,
		"MOD_LD": 81,
		"MOD_FI": 82,
		"MOD_FL": 83,
		"MOD_FF": 84,
		"MOD_FD": 85,
		"MOD_DI": 86,
		"MOD_DL": 87,
		"MOD_DF": 88,
		"MOD_DD": 89,
	}
)

func (x PArithmeticValue_PPhysicalOperator) Enum() *PArithmeticValue_PPhysicalOperator {
	p := new(PArithmeticValue_PPhysicalOperator)
	*p = x
	return p
}

func (x PArithmeticValue_PPhysicalOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PArithmeticValue_PPhysicalOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_record_query_plan_proto_enumTypes[5].Descriptor()
}

func (PArithmeticValue_PPhysicalOperator) Type() protoreflect.EnumType {
	return &file_record_query_plan_proto_enumTypes[5]
}

func (x PArithmeticValue_PPhysicalOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PArithmeticValue_PPhysicalOperator) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PArithmeticValue_PPhysicalOperator(num)
	return nil
}

// Deprecated: Use PArithmeticValue_PPhysicalOperator.Descriptor instead.
func (PArithmeticValue_PPhysicalOperator) EnumDescriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{11, 0}
}

type PCountValue_PPhysicalOperator int32

const (
	PCountValue_COUNT      PCountValue_PPhysicalOperator = 1
	PCountValue_COUNT_STAR PCountValue_PPhysicalOperator = 2
)

// Enum value maps for PCountValue_PPhysicalOperator.
var (
	PCountValue_PPhysicalOperator_name = map[int32]string{
		1: "COUNT",
		2: "COUNT_STAR",
	}
	PCountValue_PPhysicalOperator_value = map[string]int32{
		"COUNT":      1,
		"COUNT_STAR": 2,
	}
)

func (x PCountValue_PPhysicalOperator) Enum() *PCountValue_PPhysicalOperator {
	p := new(PCountValue_PPhysicalOperator)
	*p = x
	return p
}

func (x PCountValue_PPhysicalOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PCountValue_PPhysicalOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_record_query_plan_proto_enumTypes[6].Descriptor()
}

func (PCountValue_PPhysicalOperator) Type() protoreflect.EnumType {
	return &file_record_query_plan_proto_enumTypes[6]
}

func (x PCountValue_PPhysicalOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PCountValue_PPhysicalOperator) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PCountValue_PPhysicalOperator(num)
	return nil
}

// Deprecated: Use PCountValue_PPhysicalOperator.Descriptor instead.
func (PCountValue_PPhysicalOperator) EnumDescriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{15, 0}
}

type PIndexOnlyAggregateValue_PPhysicalOperator int32

const (
	PIndexOnlyAggregateValue_MAX_EVER_LONG PIndexOnlyAggregateValue_PPhysicalOperator = 1
	PIndexOnlyAggregateValue_MIN_EVER_LONG PIndexOnlyAggregateValue_PPhysicalOperator = 2
)

// Enum value maps for PIndexOnlyAggregateValue_PPhysicalOperator.
var (
	PIndexOnlyAggregateValue_PPhysicalOperator_name = map[int32]string{
		1: "MAX_EVER_LONG",
		2: "MIN_EVER_LONG",
	}
	PIndexOnlyAggregateValue_PPhysicalOperator_value = map[string]int32{
		"MAX_EVER_LONG": 1,
		"MIN_EVER_LONG": 2,
	}
)

func (x PIndexOnlyAggregateValue_PPhysicalOperator) Enum() *PIndexOnlyAggregateValue_PPhysicalOperator {
	p := new(PIndexOnlyAggregateValue_PPhysicalOperator)
	*p = x
	return p
}

func (x PIndexOnlyAggregateValue_PPhysicalOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PIndexOnlyAggregateValue_PPhysicalOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_record_query_plan_proto_enumTypes[7].Descriptor()
}

func (PIndexOnlyAggregateValue_PPhysicalOperator) Type() protoreflect.EnumType {
	return &file_record_query_plan_proto_enumTypes[7]
}

func (x PIndexOnlyAggregateValue_PPhysicalOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PIndexOnlyAggregateValue_PPhysicalOperator) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PIndexOnlyAggregateValue_PPhysicalOperator(num)
	return nil
}

// Deprecated: Use PIndexOnlyAggregateValue_PPhysicalOperator.Descriptor instead.
func (PIndexOnlyAggregateValue_PPhysicalOperator) EnumDescriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{23, 0}
}

type PNumericAggregationValue_PPhysicalOperator int32

const (
	PNumericAggregationValue_SUM_I PNumericAggregationValue_PPhysicalOperator = 1
	PNumericAggregationValue_SUM_L PNumericAggregationValue_PPhysicalOperator = 2
	PNumericAggregationValue_SUM_F PNumericAggregationValue_PPhysicalOperator = 3
	PNumericAggregationValue_SUM_D PNumericAggregationValue_PPhysicalOperator = 4
	PNumericAggregationValue_AVG_I PNumericAggregationValue_PPhysicalOperator = 5
	PNumericAggregationValue_AVG_L PNumericAggregationValue_PPhysicalOperator = 6
	PNumericAggregationValue_AVG_F PNumericAggregationValue_PPhysicalOperator = 7
	PNumericAggregationValue_AVG_D PNumericAggregationValue_PPhysicalOperator = 8
	PNumericAggregationValue_MIN_I PNumericAggregationValue_PPhysicalOperator = 9
	PNumericAggregationValue_MIN_L PNumericAggregationValue_PPhysicalOperator = 10
	PNumericAggregationValue_MIN_F PNumericAggregationValue_PPhysicalOperator = 11
	PNumericAggregationValue_MIN_D PNumericAggregationValue_PPhysicalOperator = 12
	PNumericAggregationValue_MAX_I PNumericAggregationValue_PPhysicalOperator = 13
	PNumericAggregationValue_MAX_L PNumericAggregationValue_PPhysicalOperator = 14
	PNumericAggregationValue_MAX_F PNumericAggregationValue_PPhysicalOperator = 15
	PNumericAggregationValue_MAX_D PNumericAggregationValue_PPhysicalOperator = 16
)

// Enum value maps for PNumericAggregationValue_PPhysicalOperator.
var (
	PNumericAggregationValue_PPhysicalOperator_name = map[int32]string{
		1:  "SUM_I",
		2:  "SUM_L",
		3:  "SUM_F",
		4:  "SUM_D",
		5:  "AVG_I",
		6:  "AVG_L",
		7:  "AVG_F",
		8:  "AVG_D",
		9:  "MIN_I",
		10: "MIN_L",
		11: "MIN_F",
		12: "MIN_D",
		13: "MAX_I",
		14: "MAX_L",
		15: "MAX_F",
		16: "MAX_D",
	}
	PNumericAggregationValue_PPhysicalOperator_value = map[string]int32{
		"SUM_I": 1,
		"SUM_L": 2,
		"SUM_F": 3,
		"SUM_D": 4,
		"AVG_I": 5,
		"AVG_L": 6,
		"AVG_F": 7,
		"AVG_D": 8,
		"MIN_I": 9,
		"MIN_L": 10,
		"MIN_F": 11,
		"MIN_D": 12,
		"MAX_I": 13,
		"MAX_L": 14,
		"MAX_F": 15,
		"MAX_D": 16,
	}
)

func (x PNumericAggregationValue_PPhysicalOperator) Enum() *PNumericAggregationValue_PPhysicalOperator {
	p := new(PNumericAggregationValue_PPhysicalOperator)
	*p = x
	return p
}

func (x PNumericAggregationValue_PPhysicalOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PNumericAggregationValue_PPhysicalOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_record_query_plan_proto_enumTypes[8].Descriptor()
}

func (PNumericAggregationValue_PPhysicalOperator) Type() protoreflect.EnumType {
	return &file_record_query_plan_proto_enumTypes[8]
}

func (x PNumericAggregationValue_PPhysicalOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PNumericAggregationValue_PPhysicalOperator) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PNumericAggregationValue_PPhysicalOperator(num)
	return nil
}

// Deprecated: Use PNumericAggregationValue_PPhysicalOperator.Descriptor instead.
func (PNumericAggregationValue_PPhysicalOperator) EnumDescriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{31, 0}
}

type PBinaryRelOpValue_PBinaryPhysicalOperator int32

const (
	PBinaryRelOpValue_EQ_BU    PBinaryRelOpValue_PBinaryPhysicalOperator = 1
	PBinaryRelOpValue_EQ_BB    PBinaryRelOpValue_PBinaryPhysicalOperator = 2
	PBinaryRelOpValue_EQ_IU    PBinaryRelOpValue_PBinaryPhysicalOperator = 3
	PBinaryRelOpValue_EQ_II    PBinaryRelOpValue_PBinaryPhysicalOperator = 4
	PBinaryRelOpValue_EQ_IL    PBinaryRelOpValue_PBinaryPhysicalOperator = 5
	PBinaryRelOpValue_EQ_IF    PBinaryRelOpValue_PBinaryPhysicalOperator = 6
	PBinaryRelOpValue_EQ_ID    PBinaryRelOpValue_PBinaryPhysicalOperator = 7
	PBinaryRelOpValue_EQ_LU    PBinaryRelOpValue_PBinaryPhysicalOperator = 8
	PBinaryRelOpValue_EQ_LI    PBinaryRelOpValue_PBinaryPhysicalOperator = 9
	PBinaryRelOpValue_EQ_LL    PBinaryRelOpValue_PBinaryPhysicalOperator = 10
	PBinaryRelOpValue_EQ_LF    PBinaryRelOpValue_PBinaryPhysicalOperator = 11
	PBinaryRelOpValue_EQ_LD    PBinaryRelOpValue_PBinaryPhysicalOperator = 12
	PBinaryRelOpValue_EQ_FU    PBinaryRelOpValue_PBinaryPhysicalOperator = 13
	PBinaryRelOpValue_EQ_FI    PBinaryRelOpValue_PBinaryPhysicalOperator = 14
	PBinaryRelOpValue_EQ_FL    PBinaryRelOpValue_PBinaryPhysicalOperator = 15
	PBinaryRelOpValue_EQ_FF    PBinaryRelOpValue_PBinaryPhysicalOperator = 16
	PBinaryRelOpValue_EQ_FD    PBinaryRelOpValue_PBinaryPhysicalOperator = 17
	PBinaryRelOpValue_EQ_DU    PBinaryRelOpValue_PBinaryPhysicalOperator = 18
	PBinaryRelOpValue_EQ_DI    PBinaryRelOpValue_PBinaryPhysicalOperator = 19
	PBinaryRelOpValue_EQ_DL    PBinaryRelOpValue_PBinaryPhysicalOperator = 20
	PBinaryRelOpValue_EQ_DF    PBinaryRelOpValue_PBinaryPhysicalOperator = 21
	PBinaryRelOpValue_EQ_DD    PBinaryRelOpValue_PBinaryPhysicalOperator = 22
	PBinaryRelOpValue_EQ_SU    PBinaryRelOpValue_PBinaryPhysicalOperator = 23
	PBinaryRelOpValue_EQ_SS    PBinaryRelOpValue_PBinaryPhysicalOperator = 24
	PBinaryRelOpValue_EQ_UU    PBinaryRelOpValue_PBinaryPhysicalOperator = 25
	PBinaryRelOpValue_EQ_UB    PBinaryRelOpValue_PBinaryPhysicalOperator = 26
	PBinaryRelOpValue_EQ_UI    PBinaryRelOpValue_PBinaryPhysicalOperator = 27
	PBinaryRelOpValue_EQ_UL    PBinaryRelOpValue_PBinaryPhysicalOperator = 28
	PBinaryRelOpValue_EQ_UF    PBinaryRelOpValue_PBinaryPhysicalOperator = 29
	PBinaryRelOpValue_EQ_UD    PBinaryRelOpValue_PBinaryPhysicalOperator = 30
	PBinaryRelOpValue_EQ_US    PBinaryRelOpValue_PBinaryPhysicalOperator = 31
	PBinaryRelOpValue_EQ_UV    PBinaryRelOpValue_PBinaryPhysicalOperator = 32
	PBinaryRelOpValue_EQ_VU    PBinaryRelOpValue_PBinaryPhysicalOperator = 33
	PBinaryRelOpValue_EQ_VV    PBinaryRelOpValue_PBinaryPhysicalOperator = 34
	PBinaryRelOpValue_NEQ_BU   PBinaryRelOpValue_PBinaryPhysicalOperator = 35
	PBinaryRelOpValue_NEQ_BB   PBinaryRelOpValue_PBinaryPhysicalOperator = 36
	PBinaryRelOpValue_NEQ_IU   PBinaryRelOpValue_PBinaryPhysicalOperator = 37
	PBinaryRelOpValue_NEQ_II   PBinaryRelOpValue_PBinaryPhysicalOperator = 38
	PBinaryRelOpValue_NEQ_IL   PBinaryRelOpValue_PBinaryPhysicalOperator = 39
	PBinaryRelOpValue_NEQ_IF   PBinaryRelOpValue_PBinaryPhysicalOperator = 40
	PBinaryRelOpValue_NEQ_ID   PBinaryRelOpValue_PBinaryPhysicalOperator = 41
	PBinaryRelOpValue_NEQ_LU   PBinaryRelOpValue_PBinaryPhysicalOperator = 42
	PBinaryRelOpValue_NEQ_LI   PBinaryRelOpValue_PBinaryPhysicalOperator = 43
	PBinaryRelOpValue_NEQ_LL   PBinaryRelOpValue_PBinaryPhysicalOperator = 44
	PBinaryRelOpValue_NEQ_LF   PBinaryRelOpValue_PBinaryPhysicalOperator = 45
	PBinaryRelOpValue_NEQ_LD   PBinaryRelOpValue_PBinaryPhysicalOperator = 46
	PBinaryRelOpValue_NEQ_FU   PBinaryRelOpValue_PBinaryPhysicalOperator = 47
	PBinaryRelOpValue_NEQ_FI   PBinaryRelOpValue_PBinaryPhysicalOperator = 48
	PBinaryRelOpValue_NEQ_FL   PBinaryRelOpValue_PBinaryPhysicalOperator = 49
	PBinaryRelOpValue_NEQ_FF   PBinaryRelOpValue_PBinaryPhysicalOperator = 50
	PBinaryRelOpValue_NEQ_FD   PBinaryRelOpValue_PBinaryPhysicalOperator = 51
	PBinaryRelOpValue_NEQ_DU   PBinaryRelOpValue_PBinaryPhysicalOperator = 52
	PBinaryRelOpValue_NEQ_DI   PBinaryRelOpValue_PBinaryPhysicalOperator = 53
	PBinaryRelOpValue_NEQ_DL   PBinaryRelOpValue_PBinaryPhysicalOperator = 54
	PBinaryRelOpValue_NEQ_DF   PBinaryRelOpValue_PBinaryPhysicalOperator = 55
	PBinaryRelOpValue_NEQ_DD   PBinaryRelOpValue_PBinaryPhysicalOperator = 56
	PBinaryRelOpValue_NEQ_SU   PBinaryRelOpValue_PBinaryPhysicalOperator = 57
	PBinaryRelOpValue_NEQ_SS   PBinaryRelOpValue_PBinaryPhysicalOperator = 58
	PBinaryRelOpValue_NEQ_UU   PBinaryRelOpValue_PBinaryPhysicalOperator = 59
	PBinaryRelOpValue_NEQ_UB   PBinaryRelOpValue_PBinaryPhysicalOperator = 60
	PBinaryRelOpValue_NEQ_UI   PBinaryRelOpValue_PBinaryPhysicalOperator = 61
	PBinaryRelOpValue_NEQ_UL   PBinaryRelOpValue_PBinaryPhysicalOperator = 62
	PBinaryRelOpValue_NEQ_UF   PBinaryRelOpValue_PBinaryPhysicalOperator = 63
	PBinaryRelOpValue_NEQ_UD   PBinaryRelOpValue_PBinaryPhysicalOperator = 64
	PBinaryRelOpValue_NEQ_US   PBinaryRelOpValue_PBinaryPhysicalOperator = 65
	PBinaryRelOpValue_NEQ_UV   PBinaryRelOpValue_PBinaryPhysicalOperator = 66
	PBinaryRelOpValue_NEQ_VU   PBinaryRelOpValue_PBinaryPhysicalOperator = 67
	PBinaryRelOpValue_NEQ_VV   PBinaryRelOpValue_PBinaryPhysicalOperator = 68
	PBinaryRelOpValue_LT_IU    PBinaryRelOpValue_PBinaryPhysicalOperator = 69
	PBinaryRelOpValue_LT_II    PBinaryRelOpValue_PBinaryPhysicalOperator = 70
	PBinaryRelOpValue_LT_IL    PBinaryRelOpValue_PBinaryPhysicalOperator = 71
	PBinaryRelOpValue_LT_IF    PBinaryRelOpValue_PBinaryPhysicalOperator = 72
	PBinaryRelOpValue_LT_ID    PBinaryRelOpValue_PBinaryPhysicalOperator = 73
	PBinaryRelOpValue_LT_LU    PBinaryRelOpValue_PBinaryPhysicalOperator = 74
	PBinaryRelOpValue_LT_LI    PBinaryRelOpValue_PBinaryPhysicalOperator = 75
	PBinaryRelOpValue_LT_LL    PBinaryRelOpValue_PBinaryPhysicalOperator = 76
	PBinaryRelOpValue_LT_LF    PBinaryRelOpValue_PBinaryPhysicalOperator = 77
	PBinaryRelOpValue_LT_LD    PBinaryRelOpValue_PBinaryPhysicalOperator = 78
	PBinaryRelOpValue_LT_FU    PBinaryRelOpValue_PBinaryPhysicalOperator = 79
	PBinaryRelOpValue_LT_FI    PBinaryRelOpValue_PBinaryPhysicalOperator = 80
	PBinaryRelOpValue_LT_FL    PBinaryRelOpValue_PBinaryPhysicalOperator = 81
	PBinaryRelOpValue_LT_FF    PBinaryRelOpValue_PBinaryPhysicalOperator = 82
	PBinaryRelOpValue_LT_FD    PBinaryRelOpValue_PBinaryPhysicalOperator = 83
	PBinaryRelOpValue_LT_DU    PBinaryRelOpValue_PBinaryPhysicalOperator = 84
	PBinaryRelOpValue_LT_DI    PBinaryRelOpValue_PBinaryPhysicalOperator = 85
	PBinaryRelOpValue_LT_DL    PBinaryRelOpValue_PBinaryPhysicalOperator = 86
	PBinaryRelOpValue_LT_DF    PBinaryRelOpValue_PBinaryPhysicalOperator = 87
	PBinaryRelOpValue_LT_DD    PBinaryRelOpValue_PBinaryPhysicalOperator = 88
	PBinaryRelOpValue_LT_SU    PBinaryRelOpValue_PBinaryPhysicalOperator = 89
	PBinaryRelOpValue_LT_SS    PBinaryRelOpValue_PBinaryPhysicalOperator = 90
	PBinaryRelOpValue_LT_UU    PBinaryRelOpValue_PBinaryPhysicalOperator = 91
	PBinaryRelOpValue_LT_UB    PBinaryRelOpValue_PBinaryPhysicalOperator = 92
	PBinaryRelOpValue_LT_UI    PBinaryRelOpValue_PBinaryPhysicalOperator = 93
	PBinaryRelOpValue_LT_UL    PBinaryRelOpValue_PBinaryPhysicalOperator = 94
	PBinaryRelOpValue_LT_UF    PBinaryRelOpValue_PBinaryPhysicalOperator = 95
	PBinaryRelOpValue_LT_UD    PBinaryRelOpValue_PBinaryPhysicalOperator = 96
	PBinaryRelOpValue_LT_US    PBinaryRelOpValue_PBinaryPhysicalOperator = 97
	PBinaryRelOpValue_LT_UV    PBinaryRelOpValue_PBinaryPhysicalOperator = 98
	PBinaryRelOpValue_LT_VU    PBinaryRelOpValue_PBinaryPhysicalOperator = 99
	PBinaryRelOpValue_LT_VV    PBinaryRelOpValue_PBinaryPhysicalOperator = 100
	PBinaryRelOpValue_LTE_IU   PBinaryRelOpValue_PBinaryPhysicalOperator = 101
	PBinaryRelOpValue_LTE_II   PBinaryRelOpValue_PBinaryPhysicalOperator = 102
	PBinaryRelOpValue_LTE_IL   PBinaryRelOpValue_PBinaryPhysicalOperator = 103
	PBinaryRelOpValue_LTE_IF   PBinaryRelOpValue_PBinaryPhysicalOperator = 104
	PBinaryRelOpValue_LTE_ID   PBinaryRelOpValue_PBinaryPhysicalOperator = 105
	PBinaryRelOpValue_LTE_LU   PBinaryRelOpValue_PBinaryPhysicalOperator = 106
	PBinaryRelOpValue_LTE_LI   PBinaryRelOpValue_PBinaryPhysicalOperator = 107
	PBinaryRelOpValue_LTE_LL   PBinaryRelOpValue_PBinaryPhysicalOperator = 108
	PBinaryRelOpValue_LTE_LF   PBinaryRelOpValue_PBinaryPhysicalOperator = 109
	PBinaryRelOpValue_LTE_LD   PBinaryRelOpValue_PBinaryPhysicalOperator = 110
	PBinaryRelOpValue_LTE_FU   PBinaryRelOpValue_PBinaryPhysicalOperator = 111
	PBinaryRelOpValue_LTE_FI   PBinaryRelOpValue_PBinaryPhysicalOperator = 112
	PBinaryRelOpValue_LTE_FL   PBinaryRelOpValue_PBinaryPhysicalOperator = 113
	PBinaryRelOpValue_LTE_FF   PBinaryRelOpValue_PBinaryPhysicalOperator = 114
	PBinaryRelOpValue_LTE_FD   PBinaryRelOpValue_PBinaryPhysicalOperator = 115
	PBinaryRelOpValue_LTE_DU   PBinaryRelOpValue_PBinaryPhysicalOperator = 116
	PBinaryRelOpValue_LTE_DI   PBinaryRelOpValue_PBinaryPhysicalOperator = 117
	PBinaryRelOpValue_LTE_DL   PBinaryRelOpValue_PBinaryPhysicalOperator = 118
	PBinaryRelOpValue_LTE_DF   PBinaryRelOpValue_PBinaryPhysicalOperator = 119
	PBinaryRelOpValue_LTE_DD   PBinaryRelOpValue_PBinaryPhysicalOperator = 120
	PBinaryRelOpValue_LTE_SU   PBinaryRelOpValue_PBinaryPhysicalOperator = 121
	PBinaryRelOpValue_LTE_SS   PBinaryRelOpValue_PBinaryPhysicalOperator = 122
	PBinaryRelOpValue_LTE_UU   PBinaryRelOpValue_PBinaryPhysicalOperator = 123
	PBinaryRelOpValue_LTE_UB   PBinaryRelOpValue_PBinaryPhysicalOperator = 124
	PBinaryRelOpValue_LTE_UI   PBinaryRelOpValue_PBinaryPhysicalOperator = 125
	PBinaryRelOpValue_LTE_UL   PBinaryRelOpValue_PBinaryPhysicalOperator = 126
	PBinaryRelOpValue_LTE_UF   PBinaryRelOpValue_PBinaryPhysicalOperator = 127
	PBinaryRelOpValue_LTE_UD   PBinaryRelOpValue_PBinaryPhysicalOperator = 128
	PBinaryRelOpValue_LTE_US   PBinaryRelOpValue_PBinaryPhysicalOperator = 129
	PBinaryRelOpValue_LTE_UV   PBinaryRelOpValue_PBinaryPhysicalOperator = 130
	PBinaryRelOpValue_LTE_VU   PBinaryRelOpValue_PBinaryPhysicalOperator = 131
	PBinaryRelOpValue_LTE_VV   PBinaryRelOpValue_PBinaryPhysicalOperator = 132
	PBinaryRelOpValue_GT_IU    PBinaryRelOpValue_PBinaryPhysicalOperator = 133
	PBinaryRelOpValue_GT_II    PBinaryRelOpValue_PBinaryPhysicalOperator = 134
	PBinaryRelOpValue_GT_IL    PBinaryRelOpValue_PBinaryPhysicalOperator = 135
	PBinaryRelOpValue_GT_IF    PBinaryRelOpValue_PBinaryPhysicalOperator = 136
	PBinaryRelOpValue_GT_ID    PBinaryRelOpValue_PBinaryPhysicalOperator = 137
	PBinaryRelOpValue_GT_LU    PBinaryRelOpValue_PBinaryPhysicalOperator = 138
	PBinaryRelOpValue_GT_LI    PBinaryRelOpValue_PBinaryPhysicalOperator = 139
	PBinaryRelOpValue_GT_LL    PBinaryRelOpValue_PBinaryPhysicalOperator = 140
	PBinaryRelOpValue_GT_LF    PBinaryRelOpValue_PBinaryPhysicalOperator = 141
	PBinaryRelOpValue_GT_LD    PBinaryRelOpValue_PBinaryPhysicalOperator = 142
	PBinaryRelOpValue_GT_FU    PBinaryRelOpValue_PBinaryPhysicalOperator = 143
	PBinaryRelOpValue_GT_FI    PBinaryRelOpValue_PBinaryPhysicalOperator = 144
	PBinaryRelOpValue_GT_FL    PBinaryRelOpValue_PBinaryPhysicalOperator = 145
	PBinaryRelOpValue_GT_FF    PBinaryRelOpValue_PBinaryPhysicalOperator = 146
	PBinaryRelOpValue_GT_FD    PBinaryRelOpValue_PBinaryPhysicalOperator = 147
	PBinaryRelOpValue_GT_DU    PBinaryRelOpValue_PBinaryPhysicalOperator = 148
	PBinaryRelOpValue_GT_DI    PBinaryRelOpValue_PBinaryPhysicalOperator = 149
	PBinaryRelOpValue_GT_DL    PBinaryRelOpValue_PBinaryPhysicalOperator = 150
	PBinaryRelOpValue_GT_DF    PBinaryRelOpValue_PBinaryPhysicalOperator = 151
	PBinaryRelOpValue_GT_DD    PBinaryRelOpValue_PBinaryPhysicalOperator = 152
	PBinaryRelOpValue_GT_SU    PBinaryRelOpValue_PBinaryPhysicalOperator = 153
	PBinaryRelOpValue_GT_SS    PBinaryRelOpValue_PBinaryPhysicalOperator = 154
	PBinaryRelOpValue_GT_UU    PBinaryRelOpValue_PBinaryPhysicalOperator = 155
	PBinaryRelOpValue_GT_UB    PBinaryRelOpValue_PBinaryPhysicalOperator = 156
	PBinaryRelOpValue_GT_UI    PBinaryRelOpValue_PBinaryPhysicalOperator = 157
	PBinaryRelOpValue_GT_UL    PBinaryRelOpValue_PBinaryPhysicalOperator = 158
	PBinaryRelOpValue_GT_UF    PBinaryRelOpValue_PBinaryPhysicalOperator = 159
	PBinaryRelOpValue_GT_UD    PBinaryRelOpValue_PBinaryPhysicalOperator = 160
	PBinaryRelOpValue_GT_US    PBinaryRelOpValue_PBinaryPhysicalOperator = 161
	PBinaryRelOpValue_GT_UV    PBinaryRelOpValue_PBinaryPhysicalOperator = 162
	PBinaryRelOpValue_GT_VU    PBinaryRelOpValue_PBinaryPhysicalOperator = 163
	PBinaryRelOpValue_GT_VV    PBinaryRelOpValue_PBinaryPhysicalOperator = 164
	PBinaryRelOpValue_GTE_IU   PBinaryRelOpValue_PBinaryPhysicalOperator = 165
	PBinaryRelOpValue_GTE_II   PBinaryRelOpValue_PBinaryPhysicalOperator = 166
	PBinaryRelOpValue_GTE_IL   PBinaryRelOpValue_PBinaryPhysicalOperator = 167
	PBinaryRelOpValue_GTE_IF   PBinaryRelOpValue_PBinaryPhysicalOperator = 168
	PBinaryRelOpValue_GTE_ID   PBinaryRelOpValue_PBinaryPhysicalOperator = 169
	PBinaryRelOpValue_GTE_LU   PBinaryRelOpValue_PBinaryPhysicalOperator = 170
	PBinaryRelOpValue_GTE_LI   PBinaryRelOpValue_PBinaryPhysicalOperator = 171
	PBinaryRelOpValue_GTE_LL   PBinaryRelOpValue_PBinaryPhysicalOperator = 172
	PBinaryRelOpValue_GTE_LF   PBinaryRelOpValue_PBinaryPhysicalOperator = 173
	PBinaryRelOpValue_GTE_LD   PBinaryRelOpValue_PBinaryPhysicalOperator = 174
	PBinaryRelOpValue_GTE_FU   PBinaryRelOpValue_PBinaryPhysicalOperator = 175
	PBinaryRelOpValue_GTE_FI   PBinaryRelOpValue_PBinaryPhysicalOperator = 176
	PBinaryRelOpValue_GTE_FL   PBinaryRelOpValue_PBinaryPhysicalOperator = 177
	PBinaryRelOpValue_GTE_FF   PBinaryRelOpValue_PBinaryPhysicalOperator = 178
	PBinaryRelOpValue_GTE_FD   PBinaryRelOpValue_PBinaryPhysicalOperator = 179
	PBinaryRelOpValue_GTE_DU   PBinaryRelOpValue_PBinaryPhysicalOperator = 180
	PBinaryRelOpValue_GTE_DI   PBinaryRelOpValue_PBinaryPhysicalOperator = 181
	PBinaryRelOpValue_GTE_DL   PBinaryRelOpValue_PBinaryPhysicalOperator = 182
	PBinaryRelOpValue_GTE_DF   PBinaryRelOpValue_PBinaryPhysicalOperator = 183
	PBinaryRelOpValue_GTE_DD   PBinaryRelOpValue_PBinaryPhysicalOperator = 184
	PBinaryRelOpValue_GTE_SU   PBinaryRelOpValue_PBinaryPhysicalOperator = 185
	PBinaryRelOpValue_GTE_SS   PBinaryRelOpValue_PBinaryPhysicalOperator = 186
	PBinaryRelOpValue_GTE_UU   PBinaryRelOpValue_PBinaryPhysicalOperator = 187
	PBinaryRelOpValue_GTE_UB   PBinaryRelOpValue_PBinaryPhysicalOperator = 188
	PBinaryRelOpValue_GTE_UI   PBinaryRelOpValue_PBinaryPhysicalOperator = 189
	PBinaryRelOpValue_GTE_UL   PBinaryRelOpValue_PBinaryPhysicalOperator = 190
	PBinaryRelOpValue_GTE_UF   PBinaryRelOpValue_PBinaryPhysicalOperator = 191
	PBinaryRelOpValue_GTE_UD   PBinaryRelOpValue_PBinaryPhysicalOperator = 192
	PBinaryRelOpValue_GTE_US   PBinaryRelOpValue_PBinaryPhysicalOperator = 193
	PBinaryRelOpValue_GTE_UV   PBinaryRelOpValue_PBinaryPhysicalOperator = 194
	PBinaryRelOpValue_GTE_VU   PBinaryRelOpValue_PBinaryPhysicalOperator = 195
	PBinaryRelOpValue_GTE_VV   PBinaryRelOpValue_PBinaryPhysicalOperator = 196
	PBinaryRelOpValue_EQ_BYU   PBinaryRelOpValue_PBinaryPhysicalOperator = 197
	PBinaryRelOpValue_EQ_BYBY  PBinaryRelOpValue_PBinaryPhysicalOperator = 198
	PBinaryRelOpValue_EQ_UBY   PBinaryRelOpValue_PBinaryPhysicalOperator = 199
	PBinaryRelOpValue_NEQ_BYU  PBinaryRelOpValue_PBinaryPhysicalOperator = 200
	PBinaryRelOpValue_NEQ_BYBY PBinaryRelOpValue_PBinaryPhysicalOperator = 201
	PBinaryRelOpValue_NEQ_UBY  PBinaryRelOpValue_PBinaryPhysicalOperator = 202
)

// Enum value maps for PBinaryRelOpValue_PBinaryPhysicalOperator.
var (
	PBinaryRelOpValue_PBinaryPhysicalOperator_name = map[int32]string{
		1:   "EQ_BU",
		2:   "EQ_BB",
		3:   "EQ_IU",
		4:   "EQ_II",
		5:   "EQ_IL",
		6:   "EQ_IF",
		7:   "EQ_ID",
		8:   "EQ_LU",
		9:   "EQ_LI",
		10:  "EQ_LL",
		11:  "EQ_LF",
		12:  "EQ_LD",
		13:  "EQ_FU",
		14:  "EQ_FI",
		15:  "EQ_FL",
		16:  "EQ_FF",
		17:  "EQ_FD",
		18:  "EQ_DU",
		19:  "EQ_DI",
		20:  "EQ_DL",
		21:  "EQ_DF",
		22:  "EQ_DD",
		23:  "EQ_SU",
		24:  "EQ_SS",
		25:  "EQ_UU",
		26:  "EQ_UB",
		27:  "EQ_UI",
		28:  "EQ_UL",
		29:  "EQ_UF",
		30:  "EQ_UD",
		31:  "EQ_US",
		32:  "EQ_UV",
		33:  "EQ_VU",
		34:  "EQ_VV",
		35:  "NEQ_BU",
		36:  "NEQ_BB",
		37:  "NEQ_IU",
		38:  "NEQ_II",
		39:  "NEQ_IL",
		40:  "NEQ_IF",
		41:  "NEQ_ID",
		42:  "NEQ_LU",
		43:  "NEQ_LI",
		44:  "NEQ_LL",
		45:  "NEQ_LF",
		46:  "NEQ_LD",
		47:  "NEQ_FU",
		48:  "NEQ_FI",
		49:  "NEQ_FL",
		50:  "NEQ_FF",
		51:  "NEQ_FD",
		52:  "NEQ_DU",
		53:  "NEQ_DI",
		54:  "NEQ_DL",
		55:  "NEQ_DF",
		56:  "NEQ_DD",
		57:  "NEQ_SU",
		58:  "NEQ_SS",
		59:  "NEQ_UU",
		60:  "NEQ_UB",
		61:  "NEQ_UI",
		62:  "NEQ_UL",
		63:  "NEQ_UF",
		64:  "NEQ_UD",
		65:  "NEQ_US",
		66:  "NEQ_UV",
		67:  "NEQ_VU",
		68:  "NEQ_VV",
		69:  "LT_IU",
		70:  "LT_II",
		71:  "LT_IL",
		72:  "LT_IF",
		73:  "LT_ID",
		74:  "LT_LU",
		75:  "LT_LI",
		76:  "LT_LL",
		77:  "LT_LF",
		78:  "LT_LD",
		79:  "LT_FU",
		80:  "LT_FI",
		81:  "LT_FL",
		82:  "LT_FF",
		83:  "LT_FD",
		84:  "LT_DU",
		85:  "LT_DI",
		86:  "LT_DL",
		87:  "LT_DF",
		88:  "LT_DD",
		89:  "LT_SU",
		90:  "LT_SS",
		91:  "LT_UU",
		92:  "LT_UB",
		93:  "LT_UI",
		94:  "LT_UL",
		95:  "LT_UF",
		96:  "LT_UD",
		97:  "LT_US",
		98:  "LT_UV",
		99:  "LT_VU",
		100: "LT_VV",
		101: "LTE_IU",
		102: "LTE_II",
		103: "LTE_IL",
		104: "LTE_IF",
		105: "LTE_ID",
		106: "LTE_LU",
		107: "LTE_LI",
		108: "LTE_LL",
		109: "LTE_LF",
		110: "LTE_LD",
		111: "LTE_FU",
		112: "LTE_FI",
		113: "LTE_FL",
		114: "LTE_FF",
		115: "LTE_FD",
		116: "LTE_DU",
		117: "LTE_DI",
		118: "LTE_DL",
		119: "LTE_DF",
		120: "LTE_DD",
		121: "LTE_SU",
		122: "LTE_SS",
		123: "LTE_UU",
		124: "LTE_UB",
		125: "LTE_UI",
		126: "LTE_UL",
		127: "LTE_UF",
		128: "LTE_UD",
		129: "LTE_US",
		130: "LTE_UV",
		131: "LTE_VU",
		132: "LTE_VV",
		133: "GT_IU",
		134: "GT_II",
		135: "GT_IL",
		136: "GT_IF",
		137: "GT_ID",
		138: "GT_LU",
		139: "GT_LI",
		140: "GT_LL",
		141: "GT_LF",
		142: "GT_LD",
		143: "GT_FU",
		144: "GT_FI",
		145: "GT_FL",
		146: "GT_FF",
		147: "GT_FD",
		148: "GT_DU",
		149: "GT_DI",
		150: "GT_DL",
		151: "GT_DF",
		152: "GT_DD",
		153: "GT_SU",
		154: "GT_SS",
		155: "GT_UU",
		156: "GT_UB",
		157: "GT_UI",
		158: "GT_UL",
		159: "GT_UF",
		160: "GT_UD",
		161: "GT_US",
		162: "GT_UV",
		163: "GT_VU",
		164: "GT_VV",
		165: "GTE_IU",
		166: "GTE_II",
		167: "GTE_IL",
		168: "GTE_IF",
		169: "GTE_ID",
		170: "GTE_LU",
		171: "GTE_LI",
		172: "GTE_LL",
		173: "GTE_LF",
		174: "GTE_LD",
		175: "GTE_FU",
		176: "GTE_FI",
		177: "GTE_FL",
		178: "GTE_FF",
		179: "GTE_FD",
		180: "GTE_DU",
		181: "GTE_DI",
		182: "GTE_DL",
		183: "GTE_DF",
		184: "GTE_DD",
		185: "GTE_SU",
		186: "GTE_SS",
		187: "GTE_UU",
		188: "GTE_UB",
		189: "GTE_UI",
		190: "GTE_UL",
		191: "GTE_UF",
		192: "GTE_UD",
		193: "GTE_US",
		194: "GTE_UV",
		195: "GTE_VU",
		196: "GTE_VV",
		197: "EQ_BYU",
		198: "EQ_BYBY",
		199: "EQ_UBY",
		200: "NEQ_BYU",
		201: "NEQ_BYBY",
		202: "NEQ_UBY",
	}
	PBinaryRelOpValue_PBinaryPhysicalOperator_value = map[string]int32{
		"EQ_BU":    1,
		"EQ_BB":    2,
		"EQ_IU":    3,
		"EQ_II":    4,
		"EQ_IL":    5,
		"EQ_IF":    6,
		"EQ_ID":    7,
		"EQ_LU":    8,
		"EQ_LI":    9,
		"EQ_LL":    10,
		"EQ_LF":    11,
		"EQ_LD":    12,
		"EQ_FU":    13,
		"EQ_FI":    14,
		"EQ_FL":    15,
		"EQ_FF":    16,
		"EQ_FD":    17,
		"EQ_DU":    18,
		"EQ_DI":    19,
		"EQ_DL":    20,
		"EQ_DF":    21,
		"EQ_DD":    22,
		"EQ_SU":    23,
		"EQ_SS":    24,
		"EQ_UU":    25,
		"EQ_UB":    26,
		"EQ_UI":    27,
		"EQ_UL":    28,
		"EQ_UF":    29,
		"EQ_UD":    30,
		"EQ_US":    31,
		"EQ_UV":    32,
		"EQ_VU":    33,
		"EQ_VV":    34,
		"NEQ_BU":   35,
		"NEQ_BB":   36,
		"NEQ_IU":   37,
		"NEQ_II":   38,
		"NEQ_IL":   39,
		"NEQ_IF":   40,
		"NEQ_ID":   41,
		"NEQ_LU":   42,
		"NEQ_LI":   43,
		"NEQ_LL":   44,
		"NEQ_LF":   45,
		"NEQ_LD":   46,
		"NEQ_FU":   47,
		"NEQ_FI":   48,
		"NEQ_FL":   49,
		"NEQ_FF":   50,
		"NEQ_FD":   51,
		"NEQ_DU":   52,
		"NEQ_DI":   53,
		"NEQ_DL":   54,
		"NEQ_DF":   55,
		"NEQ_DD":   56,
		"NEQ_SU":   57,
		"NEQ_SS":   58,
		"NEQ_UU":   59,
		"NEQ_UB":   60,
		"NEQ_UI":   61,
		"NEQ_UL":   62,
		"NEQ_UF":   63,
		"NEQ_UD":   64,
		"NEQ_US":   65,
		"NEQ_UV":   66,
		"NEQ_VU":   67,
		"NEQ_VV":   68,
		"LT_IU":    69,
		"LT_II":    70,
		"LT_IL":    71,
		"LT_IF":    72,
		"LT_ID":    73,
		"LT_LU":    74,
		"LT_LI":    75,
		"LT_LL":    76,
		"LT_LF":    77,
		"LT_LD":    78,
		"LT_FU":    79,
		"LT_FI":    80,
		"LT_FL":    81,
		"LT_FF":    82,
		"LT_FD":    83,
		"LT_DU":    84,
		"LT_DI":    85,
		"LT_DL":    86,
		"LT_DF":    87,
		"LT_DD":    88,
		"LT_SU":    89,
		"LT_SS":    90,
		"LT_UU":    91,
		"LT_UB":    92,
		"LT_UI":    93,
		"LT_UL":    94,
		"LT_UF":    95,
		"LT_UD":    96,
		"LT_US":    97,
		"LT_UV":    98,
		"LT_VU":    99,
		"LT_VV":    100,
		"LTE_IU":   101,
		"LTE_II":   102,
		"LTE_IL":   103,
		"LTE_IF":   104,
		"LTE_ID":   105,
		"LTE_LU":   106,
		"LTE_LI":   107,
		"LTE_LL":   108,
		"LTE_LF":   109,
		"LTE_LD":   110,
		"LTE_FU":   111,
		"LTE_FI":   112,
		"LTE_FL":   113,
		"LTE_FF":   114,
		"LTE_FD":   115,
		"LTE_DU":   116,
		"LTE_DI":   117,
		"LTE_DL":   118,
		"LTE_DF":   119,
		"LTE_DD":   120,
		"LTE_SU":   121,
		"LTE_SS":   122,
		"LTE_UU":   123,
		"LTE_UB":   124,
		"LTE_UI":   125,
		"LTE_UL":   126,
		"LTE_UF":   127,
		"LTE_UD":   128,
		"LTE_US":   129,
		"LTE_UV":   130,
		"LTE_VU":   131,
		"LTE_VV":   132,
		"GT_IU":    133,
		"GT_II":    134,
		"GT_IL":    135,
		"GT_IF":    136,
		"GT_ID":    137,
		"GT_LU":    138,
		"GT_LI":    139,
		"GT_LL":    140,
		"GT_LF":    141,
		"GT_LD":    142,
		"GT_FU":    143,
		"GT_FI":    144,
		"GT_FL":    145,
		"GT_FF":    146,
		"GT_FD":    147,
		"GT_DU":    148,
		"GT_DI":    149,
		"GT_DL":    150,
		"GT_DF":    151,
		"GT_DD":    152,
		"GT_SU":    153,
		"GT_SS":    154,
		"GT_UU":    155,
		"GT_UB":    156,
		"GT_UI":    157,
		"GT_UL":    158,
		"GT_UF":    159,
		"GT_UD":    160,
		"GT_US":    161,
		"GT_UV":    162,
		"GT_VU":    163,
		"GT_VV":    164,
		"GTE_IU":   165,
		"GTE_II":   166,
		"GTE_IL":   167,
		"GTE_IF":   168,
		"GTE_ID":   169,
		"GTE_LU":   170,
		"GTE_LI":   171,
		"GTE_LL":   172,
		"GTE_LF":   173,
		"GTE_LD":   174,
		"GTE_FU":   175,
		"GTE_FI":   176,
		"GTE_FL":   177,
		"GTE_FF":   178,
		"GTE_FD":   179,
		"GTE_DU":   180,
		"GTE_DI":   181,
		"GTE_DL":   182,
		"GTE_DF":   183,
		"GTE_DD":   184,
		"GTE_SU":   185,
		"GTE_SS":   186,
		"GTE_UU":   187,
		"GTE_UB":   188,
		"GTE_UI":   189,
		"GTE_UL":   190,
		"GTE_UF":   191,
		"GTE_UD":   192,
		"GTE_US":   193,
		"GTE_UV":   194,
		"GTE_VU":   195,
		"GTE_VV":   196,
		"EQ_BYU":   197,
		"EQ_BYBY":  198,
		"EQ_UBY":   199,
		"NEQ_BYU":  200,
		"NEQ_BYBY": 201,
		"NEQ_UBY":  202,
	}
)

func (x PBinaryRelOpValue_PBinaryPhysicalOperator) Enum() *PBinaryRelOpValue_PBinaryPhysicalOperator {
	p := new(PBinaryRelOpValue_PBinaryPhysicalOperator)
	*p = x
	return p
}

func (x PBinaryRelOpValue_PBinaryPhysicalOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PBinaryRelOpValue_PBinaryPhysicalOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_record_query_plan_proto_enumTypes[9].Descriptor()
}

func (PBinaryRelOpValue_PBinaryPhysicalOperator) Type() protoreflect.EnumType {
	return &file_record_query_plan_proto_enumTypes[9]
}

func (x PBinaryRelOpValue_PBinaryPhysicalOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PBinaryRelOpValue_PBinaryPhysicalOperator) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PBinaryRelOpValue_PBinaryPhysicalOperator(num)
	return nil
}

// Deprecated: Use PBinaryRelOpValue_PBinaryPhysicalOperator.Descriptor instead.
func (PBinaryRelOpValue_PBinaryPhysicalOperator) EnumDescriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{43, 0}
}

type PUnaryRelOpValue_PUnaryPhysicalOperator int32

const (
	PUnaryRelOpValue_IS_NULL_UI     PUnaryRelOpValue_PUnaryPhysicalOperator = 1
	PUnaryRelOpValue_IS_NULL_II     PUnaryRelOpValue_PUnaryPhysicalOperator = 2
	PUnaryRelOpValue_IS_NULL_LI     PUnaryRelOpValue_PUnaryPhysicalOperator = 3
	PUnaryRelOpValue_IS_NULL_FI     PUnaryRelOpValue_PUnaryPhysicalOperator = 4
	PUnaryRelOpValue_IS_NULL_DI     PUnaryRelOpValue_PUnaryPhysicalOperator = 5
	PUnaryRelOpValue_IS_NULL_SS     PUnaryRelOpValue_PUnaryPhysicalOperator = 6
	PUnaryRelOpValue_IS_NULL_BI     PUnaryRelOpValue_PUnaryPhysicalOperator = 7
	PUnaryRelOpValue_IS_NOT_NULL_UI PUnaryRelOpValue_PUnaryPhysicalOperator = 8
	PUnaryRelOpValue_IS_NOT_NULL_II PUnaryRelOpValue_PUnaryPhysicalOperator = 9
	PUnaryRelOpValue_IS_NOT_NULL_LI PUnaryRelOpValue_PUnaryPhysicalOperator = 10
	PUnaryRelOpValue_IS_NOT_NULL_FI PUnaryRelOpValue_PUnaryPhysicalOperator = 11
	PUnaryRelOpValue_IS_NOT_NULL_DI PUnaryRelOpValue_PUnaryPhysicalOperator = 12
	PUnaryRelOpValue_IS_NOT_NULL_SS PUnaryRelOpValue_PUnaryPhysicalOperator = 13
	PUnaryRelOpValue_IS_NOT_NULL_BI PUnaryRelOpValue_PUnaryPhysicalOperator = 14
	PUnaryRelOpValue_IS_NULL_BY     PUnaryRelOpValue_PUnaryPhysicalOperator = 15
	PUnaryRelOpValue_IS_NOT_NULL_BY PUnaryRelOpValue_PUnaryPhysicalOperator = 16
)

// Enum value maps for PUnaryRelOpValue_PUnaryPhysicalOperator.
var (
	PUnaryRelOpValue_PUnaryPhysicalOperator_name = map[int32]string{
		1:  "IS_NULL_UI",
		2:  "IS_NULL_II",
		3:  "IS_NULL_LI",
		4:  "IS_NULL_FI",
		5:  "IS_NULL_DI",
		6:  "IS_NULL_SS",
		7:  "IS_NULL_BI",
		8:  "IS_NOT_NULL_UI",
		9:  "IS_NOT_NULL_II",
		10: "IS_NOT_NULL_LI",
		11: "IS_NOT_NULL_FI",
		12: "IS_NOT_NULL_DI",
		13: "IS_NOT_NULL_SS",
		14: "IS_NOT_NULL_BI",
		15: "IS_NULL_BY",
		16: "IS_NOT_NULL_BY",
	}
	PUnaryRelOpValue_PUnaryPhysicalOperator_value = map[string]int32{
		"IS_NULL_UI":     1,
		"IS_NULL_II":     2,
		"IS_NULL_LI":     3,
		"IS_NULL_FI":     4,
		"IS_NULL_DI":     5,
		"IS_NULL_SS":     6,
		"IS_NULL_BI":     7,
		"IS_NOT_NULL_UI": 8,
		"IS_NOT_NULL_II": 9,
		"IS_NOT_NULL_LI": 10,
		"IS_NOT_NULL_FI": 11,
		"IS_NOT_NULL_DI": 12,
		"IS_NOT_NULL_SS": 13,
		"IS_NOT_NULL_BI": 14,
		"IS_NULL_BY":     15,
		"IS_NOT_NULL_BY": 16,
	}
)

func (x PUnaryRelOpValue_PUnaryPhysicalOperator) Enum() *PUnaryRelOpValue_PUnaryPhysicalOperator {
	p := new(PUnaryRelOpValue_PUnaryPhysicalOperator)
	*p = x
	return p
}

func (x PUnaryRelOpValue_PUnaryPhysicalOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PUnaryRelOpValue_PUnaryPhysicalOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_record_query_plan_proto_enumTypes[10].Descriptor()
}

func (PUnaryRelOpValue_PUnaryPhysicalOperator) Type() protoreflect.EnumType {
	return &file_record_query_plan_proto_enumTypes[10]
}

func (x PUnaryRelOpValue_PUnaryPhysicalOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PUnaryRelOpValue_PUnaryPhysicalOperator) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PUnaryRelOpValue_PUnaryPhysicalOperator(num)
	return nil
}

// Deprecated: Use PUnaryRelOpValue_PUnaryPhysicalOperator.Descriptor instead.
func (PUnaryRelOpValue_PUnaryPhysicalOperator) EnumDescriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{45, 0}
}

type PVariadicFunctionValue_PPhysicalOperator int32

const (
	PVariadicFunctionValue_GREATEST_INT     PVariadicFunctionValue_PPhysicalOperator = 1
	PVariadicFunctionValue_GREATEST_LONG    PVariadicFunctionValue_PPhysicalOperator = 2
	PVariadicFunctionValue_GREATEST_BOOLEAN PVariadicFunctionValue_PPhysicalOperator = 3
	PVariadicFunctionValue_GREATEST_STRING  PVariadicFunctionValue_PPhysicalOperator = 4
	PVariadicFunctionValue_GREATEST_FLOAT   PVariadicFunctionValue_PPhysicalOperator = 5
	PVariadicFunctionValue_GREATEST_DOUBLE  PVariadicFunctionValue_PPhysicalOperator = 6
	PVariadicFunctionValue_LEAST_INT        PVariadicFunctionValue_PPhysicalOperator = 7
	PVariadicFunctionValue_LEAST_LONG       PVariadicFunctionValue_PPhysicalOperator = 8
	PVariadicFunctionValue_LEAST_BOOLEAN    PVariadicFunctionValue_PPhysicalOperator = 9
	PVariadicFunctionValue_LEAST_STRING     PVariadicFunctionValue_PPhysicalOperator = 10
	PVariadicFunctionValue_LEAST_FLOAT      PVariadicFunctionValue_PPhysicalOperator = 11
	PVariadicFunctionValue_LEAST_DOUBLE     PVariadicFunctionValue_PPhysicalOperator = 12
	PVariadicFunctionValue_COALESCE_INT     PVariadicFunctionValue_PPhysicalOperator = 13
	PVariadicFunctionValue_COALESCE_LONG    PVariadicFunctionValue_PPhysicalOperator = 14
	PVariadicFunctionValue_COALESCE_BOOLEAN PVariadicFunctionValue_PPhysicalOperator = 15
	PVariadicFunctionValue_COALESCE_STRING  PVariadicFunctionValue_PPhysicalOperator = 16
	PVariadicFunctionValue_COALESCE_FLOAT   PVariadicFunctionValue_PPhysicalOperator = 17
	PVariadicFunctionValue_COALESCE_DOUBLE  PVariadicFunctionValue_PPhysicalOperator = 18
	PVariadicFunctionValue_COALESCE_RECORD  PVariadicFunctionValue_PPhysicalOperator = 19
	PVariadicFunctionValue_COALESCE_ARRAY   PVariadicFunctionValue_PPhysicalOperator = 20
)

// Enum value maps for PVariadicFunctionValue_PPhysicalOperator.
var (
	PVariadicFunctionValue_PPhysicalOperator_name = map[int32]string{
		1:  "GREATEST_INT",
		2:  "GREATEST_LONG",
		3:  "GREATEST_BOOLEAN",
		4:  "GREATEST_STRING",
		5:  "GREATEST_FLOAT",
		6:  "GREATEST_DOUBLE",
		7:  "LEAST_INT",
		8:  "LEAST_LONG",
		9:  "LEAST_BOOLEAN",
		10: "LEAST_STRING",
		11: "LEAST_FLOAT",
		12: "LEAST_DOUBLE",
		13: "COALESCE_INT",
		14: "COALESCE_LONG",
		15: "COALESCE_BOOLEAN",
		16: "COALESCE_STRING",
		17: "COALESCE_FLOAT",
		18: "COALESCE_DOUBLE",
		19: "COALESCE_RECORD",
		20: "COALESCE_ARRAY",
	}
	PVariadicFunctionValue_PPhysicalOperator_value = map[string]int32{
		"GREATEST_INT":     1,
		"GREATEST_LONG":    2,
		"GREATEST_BOOLEAN": 3,
		"GREATEST_STRING":  4,
		"GREATEST_FLOAT":   5,
		"GREATEST_DOUBLE":  6,
		"LEAST_INT":        7,
		"LEAST_LONG":       8,
		"LEAST_BOOLEAN":    9,
		"LEAST_STRING":     10,
		"LEAST_FLOAT":      11,
		"LEAST_DOUBLE":     12,
		"COALESCE_INT":     13,
		"COALESCE_LONG":    14,
		"COALESCE_BOOLEAN": 15,
		"COALESCE_STRING":  16,
		"COALESCE_FLOAT":   17,
		"COALESCE_DOUBLE":  18,
		"COALESCE_RECORD":  19,
		"COALESCE_ARRAY":   20,
	}
)

func (x PVariadicFunctionValue_PPhysicalOperator) Enum() *PVariadicFunctionValue_PPhysicalOperator {
	p := new(PVariadicFunctionValue_PPhysicalOperator)
	*p = x
	return p
}

func (x PVariadicFunctionValue_PPhysicalOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PVariadicFunctionValue_PPhysicalOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_record_query_plan_proto_enumTypes[11].Descriptor()
}

func (PVariadicFunctionValue_PPhysicalOperator) Type() protoreflect.EnumType {
	return &file_record_query_plan_proto_enumTypes[11]
}

func (x PVariadicFunctionValue_PPhysicalOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PVariadicFunctionValue_PPhysicalOperator) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PVariadicFunctionValue_PPhysicalOperator(num)
	return nil
}

// Deprecated: Use PVariadicFunctionValue_PPhysicalOperator.Descriptor instead.
func (PVariadicFunctionValue_PPhysicalOperator) EnumDescriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{47, 0}
}

type PComparison_PComparisonType int32

const (
	PComparison_EQUALS                     PComparison_PComparisonType = 1
	PComparison_NOT_EQUALS                 PComparison_PComparisonType = 2
	PComparison_LESS_THAN                  PComparison_PComparisonType = 3
	PComparison_LESS_THAN_OR_EQUALS        PComparison_PComparisonType = 4
	PComparison_GREATER_THAN               PComparison_PComparisonType = 5
	PComparison_GREATER_THAN_OR_EQUALS     PComparison_PComparisonType = 6
	PComparison_STARTS_WITH                PComparison_PComparisonType = 7
	PComparison_NOT_NULL                   PComparison_PComparisonType = 8
	PComparison_IS_NULL                    PComparison_PComparisonType = 9
	PComparison_IN                         PComparison_PComparisonType = 10
	PComparison_TEXT_CONTAINS_ALL          PComparison_PComparisonType = 11
	PComparison_TEXT_CONTAINS_ALL_WITHIN   PComparison_PComparisonType = 12
	PComparison_TEXT_CONTAINS_ANY          PComparison_PComparisonType = 13
	PComparison_TEXT_CONTAINS_PHRASE       PComparison_PComparisonType = 14
	PComparison_TEXT_CONTAINS_PREFIX       PComparison_PComparisonType = 15
	PComparison_TEXT_CONTAINS_ALL_PREFIXES PComparison_PComparisonType = 16
	PComparison_TEXT_CONTAINS_ANY_PREFIX   PComparison_PComparisonType = 17
	PComparison_SORT                       PComparison_PComparisonType = 18
	PComparison_LIKE                       PComparison_PComparisonType = 19
)

// Enum value maps for PComparison_PComparisonType.
var (
	PComparison_PComparisonType_name = map[int32]string{
		1:  "EQUALS",
		2:  "NOT_EQUALS",
		3:  "LESS_THAN",
		4:  "LESS_THAN_OR_EQUALS",
		5:  "GREATER_THAN",
		6:  "GREATER_THAN_OR_EQUALS",
		7:  "STARTS_WITH",
		8:  "NOT_NULL",
		9:  "IS_NULL",
		10: "IN",
		11: "TEXT_CONTAINS_ALL",
		12: "TEXT_CONTAINS_ALL_WITHIN",
		13: "TEXT_CONTAINS_ANY",
		14: "TEXT_CONTAINS_PHRASE",
		15: "TEXT_CONTAINS_PREFIX",
		16: "TEXT_CONTAINS_ALL_PREFIXES",
		17: "TEXT_CONTAINS_ANY_PREFIX",
		18: "SORT",
		19: "LIKE",
	}
	PComparison_PComparisonType_value = map[string]int32{
		"EQUALS":                     1,
		"NOT_EQUALS":                 2,
		"LESS_THAN":                  3,
		"LESS_THAN_OR_EQUALS":        4,
		"GREATER_THAN":               5,
		"GREATER_THAN_OR_EQUALS":     6,
		"STARTS_WITH":                7,
		"NOT_NULL":                   8,
		"IS_NULL":                    9,
		"IN":                         10,
		"TEXT_CONTAINS_ALL":          11,
		"TEXT_CONTAINS_ALL_WITHIN":   12,
		"TEXT_CONTAINS_ANY":          13,
		"TEXT_CONTAINS_PHRASE":       14,
		"TEXT_CONTAINS_PREFIX":       15,
		"TEXT_CONTAINS_ALL_PREFIXES": 16,
		"TEXT_CONTAINS_ANY_PREFIX":   17,
		"SORT":                       18,
		"LIKE":                       19,
	}
)

func (x PComparison_PComparisonType) Enum() *PComparison_PComparisonType {
	p := new(PComparison_PComparisonType)
	*p = x
	return p
}

func (x PComparison_PComparisonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PComparison_PComparisonType) Descriptor() protoreflect.EnumDescriptor {
	return file_record_query_plan_proto_enumTypes[12].Descriptor()
}

func (PComparison_PComparisonType) Type() protoreflect.EnumType {
	return &file_record_query_plan_proto_enumTypes[12]
}

func (x PComparison_PComparisonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PComparison_PComparisonType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PComparison_PComparisonType(num)
	return nil
}

// Deprecated: Use PComparison_PComparisonType.Descriptor instead.
func (PComparison_PComparisonType) EnumDescriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{50, 0}
}

type PParameterComparison_PBindingKind int32

const (
	PParameterComparison_IN          PParameterComparison_PBindingKind = 1
	PParameterComparison_RANK        PParameterComparison_PBindingKind = 2
	PParameterComparison_CORRELATION PParameterComparison_PBindingKind = 3
	PParameterComparison_CONSTANT    PParameterComparison_PBindingKind = 4
)

// Enum value maps for PParameterComparison_PBindingKind.
var (
	PParameterComparison_PBindingKind_name = map[int32]string{
		1: "IN",
		2: "RANK",
		3: "CORRELATION",
		4: "CONSTANT",
	}
	PParameterComparison_PBindingKind_value = map[string]int32{
		"IN":          1,
		"RANK":        2,
		"CORRELATION": 3,
		"CONSTANT":    4,
	}
)

func (x PParameterComparison_PBindingKind) Enum() *PParameterComparison_PBindingKind {
	p := new(PParameterComparison_PBindingKind)
	*p = x
	return p
}

func (x PParameterComparison_PBindingKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PParameterComparison_PBindingKind) Descriptor() protoreflect.EnumDescriptor {
	return file_record_query_plan_proto_enumTypes[13].Descriptor()
}

func (PParameterComparison_PBindingKind) Type() protoreflect.EnumType {
	return &file_record_query_plan_proto_enumTypes[13]
}

func (x PParameterComparison_PBindingKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PParameterComparison_PBindingKind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PParameterComparison_PBindingKind(num)
	return nil
}

// Deprecated: Use PParameterComparison_PBindingKind.Descriptor instead.
func (PParameterComparison_PBindingKind) EnumDescriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{56, 0}
}

type PIndexKeyValueToPartialRecord_PTupleSource int32

const (
	PIndexKeyValueToPartialRecord_KEY   PIndexKeyValueToPartialRecord_PTupleSource = 1
	PIndexKeyValueToPartialRecord_VALUE PIndexKeyValueToPartialRecord_PTupleSource = 2
	PIndexKeyValueToPartialRecord_OTHER PIndexKeyValueToPartialRecord_PTupleSource = 3
)

// Enum value maps for PIndexKeyValueToPartialRecord_PTupleSource.
var (
	PIndexKeyValueToPartialRecord_PTupleSource_name = map[int32]string{
		1: "KEY",
		2: "VALUE",
		3: "OTHER",
	}
	PIndexKeyValueToPartialRecord_PTupleSource_value = map[string]int32{
		"KEY":   1,
		"VALUE": 2,
		"OTHER": 3,
	}
)

func (x PIndexKeyValueToPartialRecord_PTupleSource) Enum() *PIndexKeyValueToPartialRecord_PTupleSource {
	p := new(PIndexKeyValueToPartialRecord_PTupleSource)
	*p = x
	return p
}

func (x PIndexKeyValueToPartialRecord_PTupleSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PIndexKeyValueToPartialRecord_PTupleSource) Descriptor() protoreflect.EnumDescriptor {
	return file_record_query_plan_proto_enumTypes[14].Descriptor()
}

func (PIndexKeyValueToPartialRecord_PTupleSource) Type() protoreflect.EnumType {
	return &file_record_query_plan_proto_enumTypes[14]
}

func (x PIndexKeyValueToPartialRecord_PTupleSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PIndexKeyValueToPartialRecord_PTupleSource) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PIndexKeyValueToPartialRecord_PTupleSource(num)
	return nil
}

// Deprecated: Use PIndexKeyValueToPartialRecord_PTupleSource.Descriptor instead.
func (PIndexKeyValueToPartialRecord_PTupleSource) EnumDescriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{84, 0}
}

type PScoreForRank_PBindingFunction int32

const (
	PScoreForRank_INT         PScoreForRank_PBindingFunction = 1
	PScoreForRank_LONG        PScoreForRank_PBindingFunction = 2
	PScoreForRank_FLOAT       PScoreForRank_PBindingFunction = 3
	PScoreForRank_DOUBLE      PScoreForRank_PBindingFunction = 4
	PScoreForRank_BOOLEAN     PScoreForRank_PBindingFunction = 5
	PScoreForRank_STRING      PScoreForRank_PBindingFunction = 6
	PScoreForRank_BYTE_STRING PScoreForRank_PBindingFunction = 7
	PScoreForRank_TUPLE       PScoreForRank_PBindingFunction = 8
)

// Enum value maps for PScoreForRank_PBindingFunction.
var (
	PScoreForRank_PBindingFunction_name = map[int32]string{
		1: "INT",
		2: "LONG",
		3: "FLOAT",
		4: "DOUBLE",
		5: "BOOLEAN",
		6: "STRING",
		7: "BYTE_STRING",
		8: "TUPLE",
	}
	PScoreForRank_PBindingFunction_value = map[string]int32{
		"INT":         1,
		"LONG":        2,
		"FLOAT":       3,
		"DOUBLE":      4,
		"BOOLEAN":     5,
		"STRING":      6,
		"BYTE_STRING": 7,
		"TUPLE":       8,
	}
)

func (x PScoreForRank_PBindingFunction) Enum() *PScoreForRank_PBindingFunction {
	p := new(PScoreForRank_PBindingFunction)
	*p = x
	return p
}

func (x PScoreForRank_PBindingFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PScoreForRank_PBindingFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_record_query_plan_proto_enumTypes[15].Descriptor()
}

func (PScoreForRank_PBindingFunction) Type() protoreflect.EnumType {
	return &file_record_query_plan_proto_enumTypes[15]
}

func (x PScoreForRank_PBindingFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PScoreForRank_PBindingFunction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PScoreForRank_PBindingFunction(num)
	return nil
}

// Deprecated: Use PScoreForRank_PBindingFunction.Descriptor instead.
func (PScoreForRank_PBindingFunction) EnumDescriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{127, 0}
}

// Type system
//
// Note that the subtypes are nested messages and we don't define an extension point because PType should be considered
// a sealed treat that cannot be extended.
type PType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SpecificType:
	//
	//	*PType_PrimitiveType
	//	*PType_NullType
	//	*PType_NoneType
	//	*PType_AnyType
	//	*PType_EnumType
	//	*PType_RecordType
	//	*PType_RelationType
	//	*PType_ArrayType
	//	*PType_AnyRecordType
	SpecificType isPType_SpecificType `protobuf_oneof:"specific_type"`
}

func (x *PType) Reset() {
	*x = PType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PType) ProtoMessage() {}

func (x *PType) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PType.ProtoReflect.Descriptor instead.
func (*PType) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{0}
}

func (m *PType) GetSpecificType() isPType_SpecificType {
	if m != nil {
		return m.SpecificType
	}
	return nil
}

func (x *PType) GetPrimitiveType() *PType_PPrimitiveType {
	if x, ok := x.GetSpecificType().(*PType_PrimitiveType); ok {
		return x.PrimitiveType
	}
	return nil
}

func (x *PType) GetNullType() *PType_PNullType {
	if x, ok := x.GetSpecificType().(*PType_NullType); ok {
		return x.NullType
	}
	return nil
}

func (x *PType) GetNoneType() *PType_PNoneType {
	if x, ok := x.GetSpecificType().(*PType_NoneType); ok {
		return x.NoneType
	}
	return nil
}

func (x *PType) GetAnyType() *PType_PAnyType {
	if x, ok := x.GetSpecificType().(*PType_AnyType); ok {
		return x.AnyType
	}
	return nil
}

func (x *PType) GetEnumType() *PType_PEnumType {
	if x, ok := x.GetSpecificType().(*PType_EnumType); ok {
		return x.EnumType
	}
	return nil
}

func (x *PType) GetRecordType() *PType_PRecordType {
	if x, ok := x.GetSpecificType().(*PType_RecordType); ok {
		return x.RecordType
	}
	return nil
}

func (x *PType) GetRelationType() *PType_PRelationType {
	if x, ok := x.GetSpecificType().(*PType_RelationType); ok {
		return x.RelationType
	}
	return nil
}

func (x *PType) GetArrayType() *PType_PArrayType {
	if x, ok := x.GetSpecificType().(*PType_ArrayType); ok {
		return x.ArrayType
	}
	return nil
}

func (x *PType) GetAnyRecordType() *PType_PAnyRecordType {
	if x, ok := x.GetSpecificType().(*PType_AnyRecordType); ok {
		return x.AnyRecordType
	}
	return nil
}

type isPType_SpecificType interface {
	isPType_SpecificType()
}

type PType_PrimitiveType struct {
	PrimitiveType *PType_PPrimitiveType `protobuf:"bytes,1,opt,name=primitive_type,json=primitiveType,oneof"`
}

type PType_NullType struct {
	NullType *PType_PNullType `protobuf:"bytes,2,opt,name=null_type,json=nullType,oneof"`
}

type PType_NoneType struct {
	NoneType *PType_PNoneType `protobuf:"bytes,3,opt,name=none_type,json=noneType,oneof"`
}

type PType_AnyType struct {
	AnyType *PType_PAnyType `protobuf:"bytes,4,opt,name=any_type,json=anyType,oneof"`
}

type PType_EnumType struct {
	EnumType *PType_PEnumType `protobuf:"bytes,5,opt,name=enum_type,json=enumType,oneof"`
}

type PType_RecordType struct {
	RecordType *PType_PRecordType `protobuf:"bytes,6,opt,name=record_type,json=recordType,oneof"`
}

type PType_RelationType struct {
	RelationType *PType_PRelationType `protobuf:"bytes,7,opt,name=relation_type,json=relationType,oneof"`
}

type PType_ArrayType struct {
	ArrayType *PType_PArrayType `protobuf:"bytes,8,opt,name=array_type,json=arrayType,oneof"`
}

type PType_AnyRecordType struct {
	AnyRecordType *PType_PAnyRecordType `protobuf:"bytes,9,opt,name=any_record_type,json=anyRecordType,oneof"`
}

func (*PType_PrimitiveType) isPType_SpecificType() {}

func (*PType_NullType) isPType_SpecificType() {}

func (*PType_NoneType) isPType_SpecificType() {}

func (*PType_AnyType) isPType_SpecificType() {}

func (*PType_EnumType) isPType_SpecificType() {}

func (*PType_RecordType) isPType_SpecificType() {}

func (*PType_RelationType) isPType_SpecificType() {}

func (*PType_ArrayType) isPType_SpecificType() {}

func (*PType_AnyRecordType) isPType_SpecificType() {}

// Coercion Tries
type PCoercionTrieNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChildrenMapIsNull *bool                             `protobuf:"varint,1,opt,name=children_map_is_null,json=childrenMapIsNull" json:"children_map_is_null,omitempty"`
	ChildPair         []*PCoercionTrieNode_IntChildPair `protobuf:"bytes,2,rep,name=child_pair,json=childPair" json:"child_pair,omitempty"`
	Value             *PCoercionBiFunction              `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (x *PCoercionTrieNode) Reset() {
	*x = PCoercionTrieNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCoercionTrieNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCoercionTrieNode) ProtoMessage() {}

func (x *PCoercionTrieNode) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCoercionTrieNode.ProtoReflect.Descriptor instead.
func (*PCoercionTrieNode) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{1}
}

func (x *PCoercionTrieNode) GetChildrenMapIsNull() bool {
	if x != nil && x.ChildrenMapIsNull != nil {
		return *x.ChildrenMapIsNull
	}
	return false
}

func (x *PCoercionTrieNode) GetChildPair() []*PCoercionTrieNode_IntChildPair {
	if x != nil {
		return x.ChildPair
	}
	return nil
}

func (x *PCoercionTrieNode) GetValue() *PCoercionBiFunction {
	if x != nil {
		return x.Value
	}
	return nil
}

type PCoercionBiFunction struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Types that are assignable to SpecificFunction:
	//
	//	*PCoercionBiFunction_AdditionalCoercionBiFunctions
	//	*PCoercionBiFunction_PrimitiveCoercionBiFunction
	//	*PCoercionBiFunction_ArrayCoercionBiFunction
	SpecificFunction isPCoercionBiFunction_SpecificFunction `protobuf_oneof:"specific_function"`
}

func (x *PCoercionBiFunction) Reset() {
	*x = PCoercionBiFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCoercionBiFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCoercionBiFunction) ProtoMessage() {}

func (x *PCoercionBiFunction) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCoercionBiFunction.ProtoReflect.Descriptor instead.
func (*PCoercionBiFunction) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{2}
}

func (m *PCoercionBiFunction) GetSpecificFunction() isPCoercionBiFunction_SpecificFunction {
	if m != nil {
		return m.SpecificFunction
	}
	return nil
}

func (x *PCoercionBiFunction) GetAdditionalCoercionBiFunctions() *anypb.Any {
	if x, ok := x.GetSpecificFunction().(*PCoercionBiFunction_AdditionalCoercionBiFunctions); ok {
		return x.AdditionalCoercionBiFunctions
	}
	return nil
}

func (x *PCoercionBiFunction) GetPrimitiveCoercionBiFunction() *PPrimitiveCoercionBiFunction {
	if x, ok := x.GetSpecificFunction().(*PCoercionBiFunction_PrimitiveCoercionBiFunction); ok {
		return x.PrimitiveCoercionBiFunction
	}
	return nil
}

func (x *PCoercionBiFunction) GetArrayCoercionBiFunction() *PArrayCoercionBiFunction {
	if x, ok := x.GetSpecificFunction().(*PCoercionBiFunction_ArrayCoercionBiFunction); ok {
		return x.ArrayCoercionBiFunction
	}
	return nil
}

type isPCoercionBiFunction_SpecificFunction interface {
	isPCoercionBiFunction_SpecificFunction()
}

type PCoercionBiFunction_AdditionalCoercionBiFunctions struct {
	AdditionalCoercionBiFunctions *anypb.Any `protobuf:"bytes,1,opt,name=additional_coercion_bi_functions,json=additionalCoercionBiFunctions,oneof"`
}

type PCoercionBiFunction_PrimitiveCoercionBiFunction struct {
	PrimitiveCoercionBiFunction *PPrimitiveCoercionBiFunction `protobuf:"bytes,2,opt,name=primitive_coercion_bi_function,json=primitiveCoercionBiFunction,oneof"`
}

type PCoercionBiFunction_ArrayCoercionBiFunction struct {
	ArrayCoercionBiFunction *PArrayCoercionBiFunction `protobuf:"bytes,3,opt,name=array_coercion_bi_function,json=arrayCoercionBiFunction,oneof"`
}

func (*PCoercionBiFunction_AdditionalCoercionBiFunctions) isPCoercionBiFunction_SpecificFunction() {}

func (*PCoercionBiFunction_PrimitiveCoercionBiFunction) isPCoercionBiFunction_SpecificFunction() {}

func (*PCoercionBiFunction_ArrayCoercionBiFunction) isPCoercionBiFunction_SpecificFunction() {}

type PPrimitiveCoercionBiFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator *PPrimitiveCoercionBiFunction_PPhysicalOperator `protobuf:"varint,1,opt,name=operator,enum=com.apple.foundationdb.record.PPrimitiveCoercionBiFunction_PPhysicalOperator" json:"operator,omitempty"`
}

func (x *PPrimitiveCoercionBiFunction) Reset() {
	*x = PPrimitiveCoercionBiFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PPrimitiveCoercionBiFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PPrimitiveCoercionBiFunction) ProtoMessage() {}

func (x *PPrimitiveCoercionBiFunction) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PPrimitiveCoercionBiFunction.ProtoReflect.Descriptor instead.
func (*PPrimitiveCoercionBiFunction) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{3}
}

func (x *PPrimitiveCoercionBiFunction) GetOperator() PPrimitiveCoercionBiFunction_PPhysicalOperator {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return PPrimitiveCoercionBiFunction_INT_TO_LONG
}

type PArrayCoercionBiFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromArrayType *PType             `protobuf:"bytes,1,opt,name=from_array_type,json=fromArrayType" json:"from_array_type,omitempty"`
	ToArrayType   *PType             `protobuf:"bytes,2,opt,name=to_array_type,json=toArrayType" json:"to_array_type,omitempty"`
	ElementsTrie  *PCoercionTrieNode `protobuf:"bytes,3,opt,name=elements_trie,json=elementsTrie" json:"elements_trie,omitempty"`
}

func (x *PArrayCoercionBiFunction) Reset() {
	*x = PArrayCoercionBiFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PArrayCoercionBiFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PArrayCoercionBiFunction) ProtoMessage() {}

func (x *PArrayCoercionBiFunction) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PArrayCoercionBiFunction.ProtoReflect.Descriptor instead.
func (*PArrayCoercionBiFunction) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{4}
}

func (x *PArrayCoercionBiFunction) GetFromArrayType() *PType {
	if x != nil {
		return x.FromArrayType
	}
	return nil
}

func (x *PArrayCoercionBiFunction) GetToArrayType() *PType {
	if x != nil {
		return x.ToArrayType
	}
	return nil
}

func (x *PArrayCoercionBiFunction) GetElementsTrie() *PCoercionTrieNode {
	if x != nil {
		return x.ElementsTrie
	}
	return nil
}

type PTransformationTrieNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChildrenMapIsNull *bool                                   `protobuf:"varint,1,opt,name=children_map_is_null,json=childrenMapIsNull" json:"children_map_is_null,omitempty"`
	ChildPair         []*PTransformationTrieNode_IntChildPair `protobuf:"bytes,2,rep,name=child_pair,json=childPair" json:"child_pair,omitempty"`
	Value             *PValue                                 `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (x *PTransformationTrieNode) Reset() {
	*x = PTransformationTrieNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PTransformationTrieNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PTransformationTrieNode) ProtoMessage() {}

func (x *PTransformationTrieNode) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PTransformationTrieNode.ProtoReflect.Descriptor instead.
func (*PTransformationTrieNode) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{5}
}

func (x *PTransformationTrieNode) GetChildrenMapIsNull() bool {
	if x != nil && x.ChildrenMapIsNull != nil {
		return *x.ChildrenMapIsNull
	}
	return false
}

func (x *PTransformationTrieNode) GetChildPair() []*PTransformationTrieNode_IntChildPair {
	if x != nil {
		return x.ChildPair
	}
	return nil
}

func (x *PTransformationTrieNode) GetValue() *PValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type PFieldAccessTrieNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChildrenMapIsNull *bool                                              `protobuf:"varint,1,opt,name=children_map_is_null,json=childrenMapIsNull" json:"children_map_is_null,omitempty"`
	ChildPair         []*PFieldAccessTrieNode_PResolvedAccessorChildPair `protobuf:"bytes,2,rep,name=child_pair,json=childPair" json:"child_pair,omitempty"`
	Type              *PType                                             `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
}

func (x *PFieldAccessTrieNode) Reset() {
	*x = PFieldAccessTrieNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PFieldAccessTrieNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PFieldAccessTrieNode) ProtoMessage() {}

func (x *PFieldAccessTrieNode) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PFieldAccessTrieNode.ProtoReflect.Descriptor instead.
func (*PFieldAccessTrieNode) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{6}
}

func (x *PFieldAccessTrieNode) GetChildrenMapIsNull() bool {
	if x != nil && x.ChildrenMapIsNull != nil {
		return *x.ChildrenMapIsNull
	}
	return false
}

func (x *PFieldAccessTrieNode) GetChildPair() []*PFieldAccessTrieNode_PResolvedAccessorChildPair {
	if x != nil {
		return x.ChildPair
	}
	return nil
}

func (x *PFieldAccessTrieNode) GetType() *PType {
	if x != nil {
		return x.Type
	}
	return nil
}

// Values
type PValue struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Types that are assignable to SpecificValue:
	//
	//	*PValue_AdditionalValues
	//	*PValue_LightArrayConstructorValue
	//	*PValue_AndOrValue
	//	*PValue_ArithmeticValue
	//	*PValue_ConditionSelectorValue
	//	*PValue_ConstantObjectValue
	//	*PValue_ConstantValue
	//	*PValue_CountValue
	//	*PValue_DerivedValue
	//	*PValue_EmptyValue
	//	*PValue_ExistsValue
	//	*PValue_FieldValue
	//	*PValue_IndexedValue
	//	*PValue_MaxEverLongValue
	//	*PValue_MinEverLongValue
	//	*PValue_InOpValue
	//	*PValue_LikeOperatorValue
	//	*PValue_LiteralValue
	//	*PValue_NotValue
	//	*PValue_NullValue
	//	*PValue_NumericAggregationValueSum
	//	*PValue_NumericAggregationValueAvg
	//	*PValue_NumericAggregationValueMin
	//	*PValue_NumericAggregationValueMax
	//	*PValue_ObjectValue
	//	*PValue_OfTypeValue
	//	*PValue_PatternForLikeValue
	//	*PValue_PickValue
	//	*PValue_PromoteValue
	//	*PValue_QuantifiedObjectValue
	//	*PValue_QueriedValue
	//	*PValue_RankValue
	//	*PValue_RecordConstructorValue
	//	*PValue_RecordTypeValue
	//	*PValue_BinaryRelOpValue
	//	*PValue_UnaryRelOpValue
	//	*PValue_VariadicFunctionValue
	//	*PValue_VersionValue
	//	*PValue_FirstOrDefaultValue
	//	*PValue_ThrowsValue
	SpecificValue isPValue_SpecificValue `protobuf_oneof:"specific_value"`
}

func (x *PValue) Reset() {
	*x = PValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PValue) ProtoMessage() {}

func (x *PValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PValue.ProtoReflect.Descriptor instead.
func (*PValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{7}
}

func (m *PValue) GetSpecificValue() isPValue_SpecificValue {
	if m != nil {
		return m.SpecificValue
	}
	return nil
}

func (x *PValue) GetAdditionalValues() *anypb.Any {
	if x, ok := x.GetSpecificValue().(*PValue_AdditionalValues); ok {
		return x.AdditionalValues
	}
	return nil
}

func (x *PValue) GetLightArrayConstructorValue() *PLightArrayConstructorValue {
	if x, ok := x.GetSpecificValue().(*PValue_LightArrayConstructorValue); ok {
		return x.LightArrayConstructorValue
	}
	return nil
}

func (x *PValue) GetAndOrValue() *PAndOrValue {
	if x, ok := x.GetSpecificValue().(*PValue_AndOrValue); ok {
		return x.AndOrValue
	}
	return nil
}

func (x *PValue) GetArithmeticValue() *PArithmeticValue {
	if x, ok := x.GetSpecificValue().(*PValue_ArithmeticValue); ok {
		return x.ArithmeticValue
	}
	return nil
}

func (x *PValue) GetConditionSelectorValue() *PConditionSelectorValue {
	if x, ok := x.GetSpecificValue().(*PValue_ConditionSelectorValue); ok {
		return x.ConditionSelectorValue
	}
	return nil
}

func (x *PValue) GetConstantObjectValue() *PConstantObjectValue {
	if x, ok := x.GetSpecificValue().(*PValue_ConstantObjectValue); ok {
		return x.ConstantObjectValue
	}
	return nil
}

func (x *PValue) GetConstantValue() *PConstantValue {
	if x, ok := x.GetSpecificValue().(*PValue_ConstantValue); ok {
		return x.ConstantValue
	}
	return nil
}

func (x *PValue) GetCountValue() *PCountValue {
	if x, ok := x.GetSpecificValue().(*PValue_CountValue); ok {
		return x.CountValue
	}
	return nil
}

func (x *PValue) GetDerivedValue() *PDerivedValue {
	if x, ok := x.GetSpecificValue().(*PValue_DerivedValue); ok {
		return x.DerivedValue
	}
	return nil
}

func (x *PValue) GetEmptyValue() *PEmptyValue {
	if x, ok := x.GetSpecificValue().(*PValue_EmptyValue); ok {
		return x.EmptyValue
	}
	return nil
}

func (x *PValue) GetExistsValue() *PExistsValue {
	if x, ok := x.GetSpecificValue().(*PValue_ExistsValue); ok {
		return x.ExistsValue
	}
	return nil
}

func (x *PValue) GetFieldValue() *PFieldValue {
	if x, ok := x.GetSpecificValue().(*PValue_FieldValue); ok {
		return x.FieldValue
	}
	return nil
}

func (x *PValue) GetIndexedValue() *PIndexedValue {
	if x, ok := x.GetSpecificValue().(*PValue_IndexedValue); ok {
		return x.IndexedValue
	}
	return nil
}

func (x *PValue) GetMaxEverLongValue() *PMaxEverLongValue {
	if x, ok := x.GetSpecificValue().(*PValue_MaxEverLongValue); ok {
		return x.MaxEverLongValue
	}
	return nil
}

func (x *PValue) GetMinEverLongValue() *PMinEverLongValue {
	if x, ok := x.GetSpecificValue().(*PValue_MinEverLongValue); ok {
		return x.MinEverLongValue
	}
	return nil
}

func (x *PValue) GetInOpValue() *PInOpValue {
	if x, ok := x.GetSpecificValue().(*PValue_InOpValue); ok {
		return x.InOpValue
	}
	return nil
}

func (x *PValue) GetLikeOperatorValue() *PLikeOperatorValue {
	if x, ok := x.GetSpecificValue().(*PValue_LikeOperatorValue); ok {
		return x.LikeOperatorValue
	}
	return nil
}

func (x *PValue) GetLiteralValue() *PLiteralValue {
	if x, ok := x.GetSpecificValue().(*PValue_LiteralValue); ok {
		return x.LiteralValue
	}
	return nil
}

func (x *PValue) GetNotValue() *PNotValue {
	if x, ok := x.GetSpecificValue().(*PValue_NotValue); ok {
		return x.NotValue
	}
	return nil
}

func (x *PValue) GetNullValue() *PNullValue {
	if x, ok := x.GetSpecificValue().(*PValue_NullValue); ok {
		return x.NullValue
	}
	return nil
}

func (x *PValue) GetNumericAggregationValueSum() *PNumericAggregationValue_PSum {
	if x, ok := x.GetSpecificValue().(*PValue_NumericAggregationValueSum); ok {
		return x.NumericAggregationValueSum
	}
	return nil
}

func (x *PValue) GetNumericAggregationValueAvg() *PNumericAggregationValue_PAvg {
	if x, ok := x.GetSpecificValue().(*PValue_NumericAggregationValueAvg); ok {
		return x.NumericAggregationValueAvg
	}
	return nil
}

func (x *PValue) GetNumericAggregationValueMin() *PNumericAggregationValue_PMin {
	if x, ok := x.GetSpecificValue().(*PValue_NumericAggregationValueMin); ok {
		return x.NumericAggregationValueMin
	}
	return nil
}

func (x *PValue) GetNumericAggregationValueMax() *PNumericAggregationValue_PMax {
	if x, ok := x.GetSpecificValue().(*PValue_NumericAggregationValueMax); ok {
		return x.NumericAggregationValueMax
	}
	return nil
}

func (x *PValue) GetObjectValue() *PObjectValue {
	if x, ok := x.GetSpecificValue().(*PValue_ObjectValue); ok {
		return x.ObjectValue
	}
	return nil
}

func (x *PValue) GetOfTypeValue() *POfTypeValue {
	if x, ok := x.GetSpecificValue().(*PValue_OfTypeValue); ok {
		return x.OfTypeValue
	}
	return nil
}

func (x *PValue) GetPatternForLikeValue() *PPatternForLikeValue {
	if x, ok := x.GetSpecificValue().(*PValue_PatternForLikeValue); ok {
		return x.PatternForLikeValue
	}
	return nil
}

func (x *PValue) GetPickValue() *PPickValue {
	if x, ok := x.GetSpecificValue().(*PValue_PickValue); ok {
		return x.PickValue
	}
	return nil
}

func (x *PValue) GetPromoteValue() *PPromoteValue {
	if x, ok := x.GetSpecificValue().(*PValue_PromoteValue); ok {
		return x.PromoteValue
	}
	return nil
}

func (x *PValue) GetQuantifiedObjectValue() *PQuantifiedObjectValue {
	if x, ok := x.GetSpecificValue().(*PValue_QuantifiedObjectValue); ok {
		return x.QuantifiedObjectValue
	}
	return nil
}

func (x *PValue) GetQueriedValue() *PQueriedValue {
	if x, ok := x.GetSpecificValue().(*PValue_QueriedValue); ok {
		return x.QueriedValue
	}
	return nil
}

func (x *PValue) GetRankValue() *PRankValue {
	if x, ok := x.GetSpecificValue().(*PValue_RankValue); ok {
		return x.RankValue
	}
	return nil
}

func (x *PValue) GetRecordConstructorValue() *PRecordConstructorValue {
	if x, ok := x.GetSpecificValue().(*PValue_RecordConstructorValue); ok {
		return x.RecordConstructorValue
	}
	return nil
}

func (x *PValue) GetRecordTypeValue() *PRecordTypeValue {
	if x, ok := x.GetSpecificValue().(*PValue_RecordTypeValue); ok {
		return x.RecordTypeValue
	}
	return nil
}

func (x *PValue) GetBinaryRelOpValue() *PBinaryRelOpValue {
	if x, ok := x.GetSpecificValue().(*PValue_BinaryRelOpValue); ok {
		return x.BinaryRelOpValue
	}
	return nil
}

func (x *PValue) GetUnaryRelOpValue() *PUnaryRelOpValue {
	if x, ok := x.GetSpecificValue().(*PValue_UnaryRelOpValue); ok {
		return x.UnaryRelOpValue
	}
	return nil
}

func (x *PValue) GetVariadicFunctionValue() *PVariadicFunctionValue {
	if x, ok := x.GetSpecificValue().(*PValue_VariadicFunctionValue); ok {
		return x.VariadicFunctionValue
	}
	return nil
}

func (x *PValue) GetVersionValue() *PVersionValue {
	if x, ok := x.GetSpecificValue().(*PValue_VersionValue); ok {
		return x.VersionValue
	}
	return nil
}

func (x *PValue) GetFirstOrDefaultValue() *PFirstOrDefaultValue {
	if x, ok := x.GetSpecificValue().(*PValue_FirstOrDefaultValue); ok {
		return x.FirstOrDefaultValue
	}
	return nil
}

func (x *PValue) GetThrowsValue() *PThrowsValue {
	if x, ok := x.GetSpecificValue().(*PValue_ThrowsValue); ok {
		return x.ThrowsValue
	}
	return nil
}

type isPValue_SpecificValue interface {
	isPValue_SpecificValue()
}

type PValue_AdditionalValues struct {
	AdditionalValues *anypb.Any `protobuf:"bytes,1,opt,name=additional_values,json=additionalValues,oneof"`
}

type PValue_LightArrayConstructorValue struct {
	LightArrayConstructorValue *PLightArrayConstructorValue `protobuf:"bytes,2,opt,name=light_array_constructor_value,json=lightArrayConstructorValue,oneof"`
}

type PValue_AndOrValue struct {
	AndOrValue *PAndOrValue `protobuf:"bytes,3,opt,name=and_or_value,json=andOrValue,oneof"`
}

type PValue_ArithmeticValue struct {
	ArithmeticValue *PArithmeticValue `protobuf:"bytes,4,opt,name=arithmetic_value,json=arithmeticValue,oneof"`
}

type PValue_ConditionSelectorValue struct {
	ConditionSelectorValue *PConditionSelectorValue `protobuf:"bytes,5,opt,name=condition_selector_value,json=conditionSelectorValue,oneof"`
}

type PValue_ConstantObjectValue struct {
	ConstantObjectValue *PConstantObjectValue `protobuf:"bytes,6,opt,name=constant_object_value,json=constantObjectValue,oneof"`
}

type PValue_ConstantValue struct {
	ConstantValue *PConstantValue `protobuf:"bytes,7,opt,name=constant_value,json=constantValue,oneof"`
}

type PValue_CountValue struct {
	CountValue *PCountValue `protobuf:"bytes,8,opt,name=count_value,json=countValue,oneof"`
}

type PValue_DerivedValue struct {
	DerivedValue *PDerivedValue `protobuf:"bytes,9,opt,name=derived_value,json=derivedValue,oneof"`
}

type PValue_EmptyValue struct {
	EmptyValue *PEmptyValue `protobuf:"bytes,10,opt,name=empty_value,json=emptyValue,oneof"`
}

type PValue_ExistsValue struct {
	ExistsValue *PExistsValue `protobuf:"bytes,11,opt,name=exists_value,json=existsValue,oneof"`
}

type PValue_FieldValue struct {
	FieldValue *PFieldValue `protobuf:"bytes,12,opt,name=field_value,json=fieldValue,oneof"`
}

type PValue_IndexedValue struct {
	IndexedValue *PIndexedValue `protobuf:"bytes,13,opt,name=indexed_value,json=indexedValue,oneof"`
}

type PValue_MaxEverLongValue struct {
	MaxEverLongValue *PMaxEverLongValue `protobuf:"bytes,14,opt,name=max_ever_long_value,json=maxEverLongValue,oneof"`
}

type PValue_MinEverLongValue struct {
	MinEverLongValue *PMinEverLongValue `protobuf:"bytes,15,opt,name=min_ever_long_value,json=minEverLongValue,oneof"`
}

type PValue_InOpValue struct {
	InOpValue *PInOpValue `protobuf:"bytes,16,opt,name=in_op_value,json=inOpValue,oneof"`
}

type PValue_LikeOperatorValue struct {
	LikeOperatorValue *PLikeOperatorValue `protobuf:"bytes,17,opt,name=like_operator_value,json=likeOperatorValue,oneof"`
}

type PValue_LiteralValue struct {
	LiteralValue *PLiteralValue `protobuf:"bytes,18,opt,name=literal_value,json=literalValue,oneof"`
}

type PValue_NotValue struct {
	NotValue *PNotValue `protobuf:"bytes,19,opt,name=not_value,json=notValue,oneof"`
}

type PValue_NullValue struct {
	NullValue *PNullValue `protobuf:"bytes,20,opt,name=null_value,json=nullValue,oneof"`
}

type PValue_NumericAggregationValueSum struct {
	NumericAggregationValueSum *PNumericAggregationValue_PSum `protobuf:"bytes,21,opt,name=numeric_aggregation_value_sum,json=numericAggregationValueSum,oneof"`
}

type PValue_NumericAggregationValueAvg struct {
	NumericAggregationValueAvg *PNumericAggregationValue_PAvg `protobuf:"bytes,22,opt,name=numeric_aggregation_value_avg,json=numericAggregationValueAvg,oneof"`
}

type PValue_NumericAggregationValueMin struct {
	NumericAggregationValueMin *PNumericAggregationValue_PMin `protobuf:"bytes,23,opt,name=numeric_aggregation_value_min,json=numericAggregationValueMin,oneof"`
}

type PValue_NumericAggregationValueMax struct {
	NumericAggregationValueMax *PNumericAggregationValue_PMax `protobuf:"bytes,24,opt,name=numeric_aggregation_value_max,json=numericAggregationValueMax,oneof"`
}

type PValue_ObjectValue struct {
	ObjectValue *PObjectValue `protobuf:"bytes,25,opt,name=object_value,json=objectValue,oneof"`
}

type PValue_OfTypeValue struct {
	OfTypeValue *POfTypeValue `protobuf:"bytes,26,opt,name=of_type_value,json=ofTypeValue,oneof"`
}

type PValue_PatternForLikeValue struct {
	PatternForLikeValue *PPatternForLikeValue `protobuf:"bytes,27,opt,name=pattern_for_like_value,json=patternForLikeValue,oneof"`
}

type PValue_PickValue struct {
	PickValue *PPickValue `protobuf:"bytes,28,opt,name=pick_value,json=pickValue,oneof"`
}

type PValue_PromoteValue struct {
	PromoteValue *PPromoteValue `protobuf:"bytes,29,opt,name=promote_value,json=promoteValue,oneof"`
}

type PValue_QuantifiedObjectValue struct {
	QuantifiedObjectValue *PQuantifiedObjectValue `protobuf:"bytes,30,opt,name=quantified_object_value,json=quantifiedObjectValue,oneof"`
}

type PValue_QueriedValue struct {
	QueriedValue *PQueriedValue `protobuf:"bytes,31,opt,name=queried_value,json=queriedValue,oneof"`
}

type PValue_RankValue struct {
	RankValue *PRankValue `protobuf:"bytes,32,opt,name=rank_value,json=rankValue,oneof"`
}

type PValue_RecordConstructorValue struct {
	RecordConstructorValue *PRecordConstructorValue `protobuf:"bytes,33,opt,name=record_constructor_value,json=recordConstructorValue,oneof"`
}

type PValue_RecordTypeValue struct {
	RecordTypeValue *PRecordTypeValue `protobuf:"bytes,34,opt,name=record_type_value,json=recordTypeValue,oneof"`
}

type PValue_BinaryRelOpValue struct {
	BinaryRelOpValue *PBinaryRelOpValue `protobuf:"bytes,35,opt,name=binary_rel_op_value,json=binaryRelOpValue,oneof"`
}

type PValue_UnaryRelOpValue struct {
	UnaryRelOpValue *PUnaryRelOpValue `protobuf:"bytes,36,opt,name=unary_rel_op_value,json=unaryRelOpValue,oneof"`
}

type PValue_VariadicFunctionValue struct {
	VariadicFunctionValue *PVariadicFunctionValue `protobuf:"bytes,37,opt,name=variadic_function_value,json=variadicFunctionValue,oneof"`
}

type PValue_VersionValue struct {
	VersionValue *PVersionValue `protobuf:"bytes,38,opt,name=version_value,json=versionValue,oneof"`
}

type PValue_FirstOrDefaultValue struct {
	FirstOrDefaultValue *PFirstOrDefaultValue `protobuf:"bytes,39,opt,name=first_or_default_value,json=firstOrDefaultValue,oneof"`
}

type PValue_ThrowsValue struct {
	ThrowsValue *PThrowsValue `protobuf:"bytes,40,opt,name=throws_value,json=throwsValue,oneof"`
}

func (*PValue_AdditionalValues) isPValue_SpecificValue() {}

func (*PValue_LightArrayConstructorValue) isPValue_SpecificValue() {}

func (*PValue_AndOrValue) isPValue_SpecificValue() {}

func (*PValue_ArithmeticValue) isPValue_SpecificValue() {}

func (*PValue_ConditionSelectorValue) isPValue_SpecificValue() {}

func (*PValue_ConstantObjectValue) isPValue_SpecificValue() {}

func (*PValue_ConstantValue) isPValue_SpecificValue() {}

func (*PValue_CountValue) isPValue_SpecificValue() {}

func (*PValue_DerivedValue) isPValue_SpecificValue() {}

func (*PValue_EmptyValue) isPValue_SpecificValue() {}

func (*PValue_ExistsValue) isPValue_SpecificValue() {}

func (*PValue_FieldValue) isPValue_SpecificValue() {}

func (*PValue_IndexedValue) isPValue_SpecificValue() {}

func (*PValue_MaxEverLongValue) isPValue_SpecificValue() {}

func (*PValue_MinEverLongValue) isPValue_SpecificValue() {}

func (*PValue_InOpValue) isPValue_SpecificValue() {}

func (*PValue_LikeOperatorValue) isPValue_SpecificValue() {}

func (*PValue_LiteralValue) isPValue_SpecificValue() {}

func (*PValue_NotValue) isPValue_SpecificValue() {}

func (*PValue_NullValue) isPValue_SpecificValue() {}

func (*PValue_NumericAggregationValueSum) isPValue_SpecificValue() {}

func (*PValue_NumericAggregationValueAvg) isPValue_SpecificValue() {}

func (*PValue_NumericAggregationValueMin) isPValue_SpecificValue() {}

func (*PValue_NumericAggregationValueMax) isPValue_SpecificValue() {}

func (*PValue_ObjectValue) isPValue_SpecificValue() {}

func (*PValue_OfTypeValue) isPValue_SpecificValue() {}

func (*PValue_PatternForLikeValue) isPValue_SpecificValue() {}

func (*PValue_PickValue) isPValue_SpecificValue() {}

func (*PValue_PromoteValue) isPValue_SpecificValue() {}

func (*PValue_QuantifiedObjectValue) isPValue_SpecificValue() {}

func (*PValue_QueriedValue) isPValue_SpecificValue() {}

func (*PValue_RankValue) isPValue_SpecificValue() {}

func (*PValue_RecordConstructorValue) isPValue_SpecificValue() {}

func (*PValue_RecordTypeValue) isPValue_SpecificValue() {}

func (*PValue_BinaryRelOpValue) isPValue_SpecificValue() {}

func (*PValue_UnaryRelOpValue) isPValue_SpecificValue() {}

func (*PValue_VariadicFunctionValue) isPValue_SpecificValue() {}

func (*PValue_VersionValue) isPValue_SpecificValue() {}

func (*PValue_FirstOrDefaultValue) isPValue_SpecificValue() {}

func (*PValue_ThrowsValue) isPValue_SpecificValue() {}

type PAbstractArrayConstructorValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children    []*PValue `protobuf:"bytes,1,rep,name=children" json:"children,omitempty"`
	ElementType *PType    `protobuf:"bytes,2,opt,name=element_type,json=elementType" json:"element_type,omitempty"`
}

func (x *PAbstractArrayConstructorValue) Reset() {
	*x = PAbstractArrayConstructorValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PAbstractArrayConstructorValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PAbstractArrayConstructorValue) ProtoMessage() {}

func (x *PAbstractArrayConstructorValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PAbstractArrayConstructorValue.ProtoReflect.Descriptor instead.
func (*PAbstractArrayConstructorValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{8}
}

func (x *PAbstractArrayConstructorValue) GetChildren() []*PValue {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *PAbstractArrayConstructorValue) GetElementType() *PType {
	if x != nil {
		return x.ElementType
	}
	return nil
}

type PLightArrayConstructorValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PAbstractArrayConstructorValue `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *PLightArrayConstructorValue) Reset() {
	*x = PLightArrayConstructorValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PLightArrayConstructorValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PLightArrayConstructorValue) ProtoMessage() {}

func (x *PLightArrayConstructorValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PLightArrayConstructorValue.ProtoReflect.Descriptor instead.
func (*PLightArrayConstructorValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{9}
}

func (x *PLightArrayConstructorValue) GetSuper() *PAbstractArrayConstructorValue {
	if x != nil {
		return x.Super
	}
	return nil
}

type PAndOrValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionName *string                `protobuf:"bytes,1,opt,name=function_name,json=functionName" json:"function_name,omitempty"`
	LeftChild    *PValue                `protobuf:"bytes,2,opt,name=left_child,json=leftChild" json:"left_child,omitempty"`
	RightChild   *PValue                `protobuf:"bytes,3,opt,name=right_child,json=rightChild" json:"right_child,omitempty"`
	Operator     *PAndOrValue_POperator `protobuf:"varint,4,opt,name=operator,enum=com.apple.foundationdb.record.PAndOrValue_POperator" json:"operator,omitempty"`
}

func (x *PAndOrValue) Reset() {
	*x = PAndOrValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PAndOrValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PAndOrValue) ProtoMessage() {}

func (x *PAndOrValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PAndOrValue.ProtoReflect.Descriptor instead.
func (*PAndOrValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{10}
}

func (x *PAndOrValue) GetFunctionName() string {
	if x != nil && x.FunctionName != nil {
		return *x.FunctionName
	}
	return ""
}

func (x *PAndOrValue) GetLeftChild() *PValue {
	if x != nil {
		return x.LeftChild
	}
	return nil
}

func (x *PAndOrValue) GetRightChild() *PValue {
	if x != nil {
		return x.RightChild
	}
	return nil
}

func (x *PAndOrValue) GetOperator() PAndOrValue_POperator {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return PAndOrValue_AND
}

type PArithmeticValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator   *PArithmeticValue_PPhysicalOperator `protobuf:"varint,1,opt,name=operator,enum=com.apple.foundationdb.record.PArithmeticValue_PPhysicalOperator" json:"operator,omitempty"`
	LeftChild  *PValue                             `protobuf:"bytes,2,opt,name=left_child,json=leftChild" json:"left_child,omitempty"`
	RightChild *PValue                             `protobuf:"bytes,3,opt,name=right_child,json=rightChild" json:"right_child,omitempty"`
}

func (x *PArithmeticValue) Reset() {
	*x = PArithmeticValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PArithmeticValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PArithmeticValue) ProtoMessage() {}

func (x *PArithmeticValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PArithmeticValue.ProtoReflect.Descriptor instead.
func (*PArithmeticValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{11}
}

func (x *PArithmeticValue) GetOperator() PArithmeticValue_PPhysicalOperator {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return PArithmeticValue_ADD_II
}

func (x *PArithmeticValue) GetLeftChild() *PValue {
	if x != nil {
		return x.LeftChild
	}
	return nil
}

func (x *PArithmeticValue) GetRightChild() *PValue {
	if x != nil {
		return x.RightChild
	}
	return nil
}

type PConditionSelectorValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Implications []*PValue `protobuf:"bytes,1,rep,name=implications" json:"implications,omitempty"`
}

func (x *PConditionSelectorValue) Reset() {
	*x = PConditionSelectorValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PConditionSelectorValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PConditionSelectorValue) ProtoMessage() {}

func (x *PConditionSelectorValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PConditionSelectorValue.ProtoReflect.Descriptor instead.
func (*PConditionSelectorValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{12}
}

func (x *PConditionSelectorValue) GetImplications() []*PValue {
	if x != nil {
		return x.Implications
	}
	return nil
}

type PConstantObjectValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias      *string `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	ConstantId *string `protobuf:"bytes,2,opt,name=constant_id,json=constantId" json:"constant_id,omitempty"`
	ResultType *PType  `protobuf:"bytes,3,opt,name=result_type,json=resultType" json:"result_type,omitempty"`
}

func (x *PConstantObjectValue) Reset() {
	*x = PConstantObjectValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PConstantObjectValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PConstantObjectValue) ProtoMessage() {}

func (x *PConstantObjectValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PConstantObjectValue.ProtoReflect.Descriptor instead.
func (*PConstantObjectValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{13}
}

func (x *PConstantObjectValue) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *PConstantObjectValue) GetConstantId() string {
	if x != nil && x.ConstantId != nil {
		return *x.ConstantId
	}
	return ""
}

func (x *PConstantObjectValue) GetResultType() *PType {
	if x != nil {
		return x.ResultType
	}
	return nil
}

type PConstantValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *PValue `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (x *PConstantValue) Reset() {
	*x = PConstantValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PConstantValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PConstantValue) ProtoMessage() {}

func (x *PConstantValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PConstantValue.ProtoReflect.Descriptor instead.
func (*PConstantValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{14}
}

func (x *PConstantValue) GetValue() *PValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type PCountValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator *PCountValue_PPhysicalOperator `protobuf:"varint,1,opt,name=operator,enum=com.apple.foundationdb.record.PCountValue_PPhysicalOperator" json:"operator,omitempty"`
	Child    *PValue                        `protobuf:"bytes,2,opt,name=child" json:"child,omitempty"`
}

func (x *PCountValue) Reset() {
	*x = PCountValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCountValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCountValue) ProtoMessage() {}

func (x *PCountValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCountValue.ProtoReflect.Descriptor instead.
func (*PCountValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{15}
}

func (x *PCountValue) GetOperator() PCountValue_PPhysicalOperator {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return PCountValue_COUNT
}

func (x *PCountValue) GetChild() *PValue {
	if x != nil {
		return x.Child
	}
	return nil
}

type PDerivedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children   []*PValue `protobuf:"bytes,1,rep,name=children" json:"children,omitempty"`
	ResultType *PType    `protobuf:"bytes,2,opt,name=result_type,json=resultType" json:"result_type,omitempty"`
}

func (x *PDerivedValue) Reset() {
	*x = PDerivedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PDerivedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDerivedValue) ProtoMessage() {}

func (x *PDerivedValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDerivedValue.ProtoReflect.Descriptor instead.
func (*PDerivedValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{16}
}

func (x *PDerivedValue) GetChildren() []*PValue {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *PDerivedValue) GetResultType() *PType {
	if x != nil {
		return x.ResultType
	}
	return nil
}

type PEmptyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PEmptyValue) Reset() {
	*x = PEmptyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PEmptyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PEmptyValue) ProtoMessage() {}

func (x *PEmptyValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PEmptyValue.ProtoReflect.Descriptor instead.
func (*PEmptyValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{17}
}

type PExistsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Child *PQuantifiedObjectValue `protobuf:"bytes,1,opt,name=child" json:"child,omitempty"`
}

func (x *PExistsValue) Reset() {
	*x = PExistsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PExistsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PExistsValue) ProtoMessage() {}

func (x *PExistsValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PExistsValue.ProtoReflect.Descriptor instead.
func (*PExistsValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{18}
}

func (x *PExistsValue) GetChild() *PQuantifiedObjectValue {
	if x != nil {
		return x.Child
	}
	return nil
}

type PFieldValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChildValue *PValue     `protobuf:"bytes,1,opt,name=child_value,json=childValue" json:"child_value,omitempty"`
	FieldPath  *PFieldPath `protobuf:"bytes,2,opt,name=field_path,json=fieldPath" json:"field_path,omitempty"`
}

func (x *PFieldValue) Reset() {
	*x = PFieldValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PFieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PFieldValue) ProtoMessage() {}

func (x *PFieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PFieldValue.ProtoReflect.Descriptor instead.
func (*PFieldValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{19}
}

func (x *PFieldValue) GetChildValue() *PValue {
	if x != nil {
		return x.ChildValue
	}
	return nil
}

func (x *PFieldValue) GetFieldPath() *PFieldPath {
	if x != nil {
		return x.FieldPath
	}
	return nil
}

type PFieldPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldAccessors []*PFieldPath_PResolvedAccessor `protobuf:"bytes,1,rep,name=field_accessors,json=fieldAccessors" json:"field_accessors,omitempty"`
}

func (x *PFieldPath) Reset() {
	*x = PFieldPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PFieldPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PFieldPath) ProtoMessage() {}

func (x *PFieldPath) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PFieldPath.ProtoReflect.Descriptor instead.
func (*PFieldPath) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{20}
}

func (x *PFieldPath) GetFieldAccessors() []*PFieldPath_PResolvedAccessor {
	if x != nil {
		return x.FieldAccessors
	}
	return nil
}

type PFirstOrDefaultValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChildValue         *PValue `protobuf:"bytes,1,opt,name=child_value,json=childValue" json:"child_value,omitempty"`
	OnEmptyResultValue *PValue `protobuf:"bytes,2,opt,name=on_empty_result_value,json=onEmptyResultValue" json:"on_empty_result_value,omitempty"`
}

func (x *PFirstOrDefaultValue) Reset() {
	*x = PFirstOrDefaultValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PFirstOrDefaultValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PFirstOrDefaultValue) ProtoMessage() {}

func (x *PFirstOrDefaultValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PFirstOrDefaultValue.ProtoReflect.Descriptor instead.
func (*PFirstOrDefaultValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{21}
}

func (x *PFirstOrDefaultValue) GetChildValue() *PValue {
	if x != nil {
		return x.ChildValue
	}
	return nil
}

func (x *PFirstOrDefaultValue) GetOnEmptyResultValue() *PValue {
	if x != nil {
		return x.OnEmptyResultValue
	}
	return nil
}

type PIndexedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultType *PType `protobuf:"bytes,1,opt,name=result_type,json=resultType" json:"result_type,omitempty"`
}

func (x *PIndexedValue) Reset() {
	*x = PIndexedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PIndexedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PIndexedValue) ProtoMessage() {}

func (x *PIndexedValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PIndexedValue.ProtoReflect.Descriptor instead.
func (*PIndexedValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{22}
}

func (x *PIndexedValue) GetResultType() *PType {
	if x != nil {
		return x.ResultType
	}
	return nil
}

type PIndexOnlyAggregateValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator *PIndexOnlyAggregateValue_PPhysicalOperator `protobuf:"varint,1,opt,name=operator,enum=com.apple.foundationdb.record.PIndexOnlyAggregateValue_PPhysicalOperator" json:"operator,omitempty"`
	Child    *PValue                                     `protobuf:"bytes,2,opt,name=child" json:"child,omitempty"`
}

func (x *PIndexOnlyAggregateValue) Reset() {
	*x = PIndexOnlyAggregateValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PIndexOnlyAggregateValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PIndexOnlyAggregateValue) ProtoMessage() {}

func (x *PIndexOnlyAggregateValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PIndexOnlyAggregateValue.ProtoReflect.Descriptor instead.
func (*PIndexOnlyAggregateValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{23}
}

func (x *PIndexOnlyAggregateValue) GetOperator() PIndexOnlyAggregateValue_PPhysicalOperator {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return PIndexOnlyAggregateValue_MAX_EVER_LONG
}

func (x *PIndexOnlyAggregateValue) GetChild() *PValue {
	if x != nil {
		return x.Child
	}
	return nil
}

type PInOpValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProbeValue   *PValue `protobuf:"bytes,1,opt,name=probe_value,json=probeValue" json:"probe_value,omitempty"`
	InArrayValue *PValue `protobuf:"bytes,2,opt,name=in_array_value,json=inArrayValue" json:"in_array_value,omitempty"`
}

func (x *PInOpValue) Reset() {
	*x = PInOpValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PInOpValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PInOpValue) ProtoMessage() {}

func (x *PInOpValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PInOpValue.ProtoReflect.Descriptor instead.
func (*PInOpValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{24}
}

func (x *PInOpValue) GetProbeValue() *PValue {
	if x != nil {
		return x.ProbeValue
	}
	return nil
}

func (x *PInOpValue) GetInArrayValue() *PValue {
	if x != nil {
		return x.InArrayValue
	}
	return nil
}

type PMaxEverLongValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PIndexOnlyAggregateValue `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *PMaxEverLongValue) Reset() {
	*x = PMaxEverLongValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PMaxEverLongValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PMaxEverLongValue) ProtoMessage() {}

func (x *PMaxEverLongValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PMaxEverLongValue.ProtoReflect.Descriptor instead.
func (*PMaxEverLongValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{25}
}

func (x *PMaxEverLongValue) GetSuper() *PIndexOnlyAggregateValue {
	if x != nil {
		return x.Super
	}
	return nil
}

type PMinEverLongValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PIndexOnlyAggregateValue `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *PMinEverLongValue) Reset() {
	*x = PMinEverLongValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PMinEverLongValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PMinEverLongValue) ProtoMessage() {}

func (x *PMinEverLongValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PMinEverLongValue.ProtoReflect.Descriptor instead.
func (*PMinEverLongValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{26}
}

func (x *PMinEverLongValue) GetSuper() *PIndexOnlyAggregateValue {
	if x != nil {
		return x.Super
	}
	return nil
}

type PLikeOperatorValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcChild     *PValue `protobuf:"bytes,1,opt,name=src_child,json=srcChild" json:"src_child,omitempty"`
	PatternChild *PValue `protobuf:"bytes,2,opt,name=pattern_child,json=patternChild" json:"pattern_child,omitempty"`
}

func (x *PLikeOperatorValue) Reset() {
	*x = PLikeOperatorValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PLikeOperatorValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PLikeOperatorValue) ProtoMessage() {}

func (x *PLikeOperatorValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PLikeOperatorValue.ProtoReflect.Descriptor instead.
func (*PLikeOperatorValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{27}
}

func (x *PLikeOperatorValue) GetSrcChild() *PValue {
	if x != nil {
		return x.SrcChild
	}
	return nil
}

func (x *PLikeOperatorValue) GetPatternChild() *PValue {
	if x != nil {
		return x.PatternChild
	}
	return nil
}

type PLiteralValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultType *PType             `protobuf:"bytes,1,opt,name=result_type,json=resultType" json:"result_type,omitempty"`
	Value      *PComparableObject `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *PLiteralValue) Reset() {
	*x = PLiteralValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PLiteralValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PLiteralValue) ProtoMessage() {}

func (x *PLiteralValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PLiteralValue.ProtoReflect.Descriptor instead.
func (*PLiteralValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{28}
}

func (x *PLiteralValue) GetResultType() *PType {
	if x != nil {
		return x.ResultType
	}
	return nil
}

func (x *PLiteralValue) GetValue() *PComparableObject {
	if x != nil {
		return x.Value
	}
	return nil
}

type PNotValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Child *PValue `protobuf:"bytes,1,opt,name=child" json:"child,omitempty"`
}

func (x *PNotValue) Reset() {
	*x = PNotValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PNotValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNotValue) ProtoMessage() {}

func (x *PNotValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNotValue.ProtoReflect.Descriptor instead.
func (*PNotValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{29}
}

func (x *PNotValue) GetChild() *PValue {
	if x != nil {
		return x.Child
	}
	return nil
}

type PNullValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultType *PType `protobuf:"bytes,1,opt,name=result_type,json=resultType" json:"result_type,omitempty"`
}

func (x *PNullValue) Reset() {
	*x = PNullValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PNullValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNullValue) ProtoMessage() {}

func (x *PNullValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNullValue.ProtoReflect.Descriptor instead.
func (*PNullValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{30}
}

func (x *PNullValue) GetResultType() *PType {
	if x != nil {
		return x.ResultType
	}
	return nil
}

type PNumericAggregationValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator *PNumericAggregationValue_PPhysicalOperator `protobuf:"varint,1,opt,name=operator,enum=com.apple.foundationdb.record.PNumericAggregationValue_PPhysicalOperator" json:"operator,omitempty"`
	Child    *PValue                                     `protobuf:"bytes,2,opt,name=child" json:"child,omitempty"`
}

func (x *PNumericAggregationValue) Reset() {
	*x = PNumericAggregationValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PNumericAggregationValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNumericAggregationValue) ProtoMessage() {}

func (x *PNumericAggregationValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNumericAggregationValue.ProtoReflect.Descriptor instead.
func (*PNumericAggregationValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{31}
}

func (x *PNumericAggregationValue) GetOperator() PNumericAggregationValue_PPhysicalOperator {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return PNumericAggregationValue_SUM_I
}

func (x *PNumericAggregationValue) GetChild() *PValue {
	if x != nil {
		return x.Child
	}
	return nil
}

type PObjectValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias      *string `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	ResultType *PType  `protobuf:"bytes,2,opt,name=result_type,json=resultType" json:"result_type,omitempty"`
}

func (x *PObjectValue) Reset() {
	*x = PObjectValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PObjectValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PObjectValue) ProtoMessage() {}

func (x *PObjectValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PObjectValue.ProtoReflect.Descriptor instead.
func (*PObjectValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{32}
}

func (x *PObjectValue) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *PObjectValue) GetResultType() *PType {
	if x != nil {
		return x.ResultType
	}
	return nil
}

type POfTypeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Child        *PValue `protobuf:"bytes,1,opt,name=child" json:"child,omitempty"`
	ExpectedType *PType  `protobuf:"bytes,2,opt,name=expected_type,json=expectedType" json:"expected_type,omitempty"`
}

func (x *POfTypeValue) Reset() {
	*x = POfTypeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *POfTypeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*POfTypeValue) ProtoMessage() {}

func (x *POfTypeValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use POfTypeValue.ProtoReflect.Descriptor instead.
func (*POfTypeValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{33}
}

func (x *POfTypeValue) GetChild() *PValue {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *POfTypeValue) GetExpectedType() *PType {
	if x != nil {
		return x.ExpectedType
	}
	return nil
}

type PPatternForLikeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatternChild *PValue `protobuf:"bytes,1,opt,name=pattern_child,json=patternChild" json:"pattern_child,omitempty"`
	EscapeChild  *PValue `protobuf:"bytes,2,opt,name=escape_child,json=escapeChild" json:"escape_child,omitempty"`
}

func (x *PPatternForLikeValue) Reset() {
	*x = PPatternForLikeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PPatternForLikeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PPatternForLikeValue) ProtoMessage() {}

func (x *PPatternForLikeValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PPatternForLikeValue.ProtoReflect.Descriptor instead.
func (*PPatternForLikeValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{34}
}

func (x *PPatternForLikeValue) GetPatternChild() *PValue {
	if x != nil {
		return x.PatternChild
	}
	return nil
}

func (x *PPatternForLikeValue) GetEscapeChild() *PValue {
	if x != nil {
		return x.EscapeChild
	}
	return nil
}

type PPickValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectorValue     *PValue   `protobuf:"bytes,1,opt,name=selector_value,json=selectorValue" json:"selector_value,omitempty"`
	AlternativeValues []*PValue `protobuf:"bytes,2,rep,name=alternative_values,json=alternativeValues" json:"alternative_values,omitempty"`
	ResultType        *PType    `protobuf:"bytes,3,opt,name=result_type,json=resultType" json:"result_type,omitempty"`
}

func (x *PPickValue) Reset() {
	*x = PPickValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PPickValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PPickValue) ProtoMessage() {}

func (x *PPickValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PPickValue.ProtoReflect.Descriptor instead.
func (*PPickValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{35}
}

func (x *PPickValue) GetSelectorValue() *PValue {
	if x != nil {
		return x.SelectorValue
	}
	return nil
}

func (x *PPickValue) GetAlternativeValues() []*PValue {
	if x != nil {
		return x.AlternativeValues
	}
	return nil
}

func (x *PPickValue) GetResultType() *PType {
	if x != nil {
		return x.ResultType
	}
	return nil
}

type PPromoteValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InValue       *PValue            `protobuf:"bytes,1,opt,name=in_value,json=inValue" json:"in_value,omitempty"`
	PromoteToType *PType             `protobuf:"bytes,2,opt,name=promote_to_type,json=promoteToType" json:"promote_to_type,omitempty"`
	PromotionTrie *PCoercionTrieNode `protobuf:"bytes,3,opt,name=promotion_trie,json=promotionTrie" json:"promotion_trie,omitempty"`
}

func (x *PPromoteValue) Reset() {
	*x = PPromoteValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PPromoteValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PPromoteValue) ProtoMessage() {}

func (x *PPromoteValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PPromoteValue.ProtoReflect.Descriptor instead.
func (*PPromoteValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{36}
}

func (x *PPromoteValue) GetInValue() *PValue {
	if x != nil {
		return x.InValue
	}
	return nil
}

func (x *PPromoteValue) GetPromoteToType() *PType {
	if x != nil {
		return x.PromoteToType
	}
	return nil
}

func (x *PPromoteValue) GetPromotionTrie() *PCoercionTrieNode {
	if x != nil {
		return x.PromotionTrie
	}
	return nil
}

type PQuantifiedObjectValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias      *string `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	ResultType *PType  `protobuf:"bytes,2,opt,name=result_type,json=resultType" json:"result_type,omitempty"`
}

func (x *PQuantifiedObjectValue) Reset() {
	*x = PQuantifiedObjectValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PQuantifiedObjectValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PQuantifiedObjectValue) ProtoMessage() {}

func (x *PQuantifiedObjectValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PQuantifiedObjectValue.ProtoReflect.Descriptor instead.
func (*PQuantifiedObjectValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{37}
}

func (x *PQuantifiedObjectValue) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *PQuantifiedObjectValue) GetResultType() *PType {
	if x != nil {
		return x.ResultType
	}
	return nil
}

type PQueriedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultType         *PType   `protobuf:"bytes,1,opt,name=result_type,json=resultType" json:"result_type,omitempty"`
	HasRecordTypeNames *bool    `protobuf:"varint,3,opt,name=has_record_type_names,json=hasRecordTypeNames" json:"has_record_type_names,omitempty"`
	RecordTypeNames    []string `protobuf:"bytes,2,rep,name=record_type_names,json=recordTypeNames" json:"record_type_names,omitempty"`
}

func (x *PQueriedValue) Reset() {
	*x = PQueriedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PQueriedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PQueriedValue) ProtoMessage() {}

func (x *PQueriedValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PQueriedValue.ProtoReflect.Descriptor instead.
func (*PQueriedValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{38}
}

func (x *PQueriedValue) GetResultType() *PType {
	if x != nil {
		return x.ResultType
	}
	return nil
}

func (x *PQueriedValue) GetHasRecordTypeNames() bool {
	if x != nil && x.HasRecordTypeNames != nil {
		return *x.HasRecordTypeNames
	}
	return false
}

func (x *PQueriedValue) GetRecordTypeNames() []string {
	if x != nil {
		return x.RecordTypeNames
	}
	return nil
}

type PRankValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PWindowedValue `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *PRankValue) Reset() {
	*x = PRankValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRankValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRankValue) ProtoMessage() {}

func (x *PRankValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRankValue.ProtoReflect.Descriptor instead.
func (*PRankValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{39}
}

func (x *PRankValue) GetSuper() *PWindowedValue {
	if x != nil {
		return x.Super
	}
	return nil
}

type PRecordConstructorValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultType *PType                             `protobuf:"bytes,1,opt,name=result_type,json=resultType" json:"result_type,omitempty"`
	Columns    []*PRecordConstructorValue_PColumn `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty"`
}

func (x *PRecordConstructorValue) Reset() {
	*x = PRecordConstructorValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordConstructorValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordConstructorValue) ProtoMessage() {}

func (x *PRecordConstructorValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordConstructorValue.ProtoReflect.Descriptor instead.
func (*PRecordConstructorValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{40}
}

func (x *PRecordConstructorValue) GetResultType() *PType {
	if x != nil {
		return x.ResultType
	}
	return nil
}

func (x *PRecordConstructorValue) GetColumns() []*PRecordConstructorValue_PColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

type PRecordTypeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias *string `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
}

func (x *PRecordTypeValue) Reset() {
	*x = PRecordTypeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordTypeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordTypeValue) ProtoMessage() {}

func (x *PRecordTypeValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordTypeValue.ProtoReflect.Descriptor instead.
func (*PRecordTypeValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{41}
}

func (x *PRecordTypeValue) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

type PRelOpValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionName   *string                      `protobuf:"bytes,1,opt,name=function_name,json=functionName" json:"function_name,omitempty"`
	ComparisonType *PComparison_PComparisonType `protobuf:"varint,2,opt,name=comparison_type,json=comparisonType,enum=com.apple.foundationdb.record.PComparison_PComparisonType" json:"comparison_type,omitempty"`
	Children       []*PValue                    `protobuf:"bytes,3,rep,name=children" json:"children,omitempty"`
}

func (x *PRelOpValue) Reset() {
	*x = PRelOpValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRelOpValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRelOpValue) ProtoMessage() {}

func (x *PRelOpValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRelOpValue.ProtoReflect.Descriptor instead.
func (*PRelOpValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{42}
}

func (x *PRelOpValue) GetFunctionName() string {
	if x != nil && x.FunctionName != nil {
		return *x.FunctionName
	}
	return ""
}

func (x *PRelOpValue) GetComparisonType() PComparison_PComparisonType {
	if x != nil && x.ComparisonType != nil {
		return *x.ComparisonType
	}
	return PComparison_EQUALS
}

func (x *PRelOpValue) GetChildren() []*PValue {
	if x != nil {
		return x.Children
	}
	return nil
}

type PBinaryRelOpValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super    *PRelOpValue                               `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Operator *PBinaryRelOpValue_PBinaryPhysicalOperator `protobuf:"varint,2,opt,name=operator,enum=com.apple.foundationdb.record.PBinaryRelOpValue_PBinaryPhysicalOperator" json:"operator,omitempty"`
}

func (x *PBinaryRelOpValue) Reset() {
	*x = PBinaryRelOpValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBinaryRelOpValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBinaryRelOpValue) ProtoMessage() {}

func (x *PBinaryRelOpValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBinaryRelOpValue.ProtoReflect.Descriptor instead.
func (*PBinaryRelOpValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{43}
}

func (x *PBinaryRelOpValue) GetSuper() *PRelOpValue {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PBinaryRelOpValue) GetOperator() PBinaryRelOpValue_PBinaryPhysicalOperator {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return PBinaryRelOpValue_EQ_BU
}

type PThrowsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultType *PType `protobuf:"bytes,1,opt,name=result_type,json=resultType" json:"result_type,omitempty"`
}

func (x *PThrowsValue) Reset() {
	*x = PThrowsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PThrowsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PThrowsValue) ProtoMessage() {}

func (x *PThrowsValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PThrowsValue.ProtoReflect.Descriptor instead.
func (*PThrowsValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{44}
}

func (x *PThrowsValue) GetResultType() *PType {
	if x != nil {
		return x.ResultType
	}
	return nil
}

type PUnaryRelOpValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super    *PRelOpValue                             `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Operator *PUnaryRelOpValue_PUnaryPhysicalOperator `protobuf:"varint,2,opt,name=operator,enum=com.apple.foundationdb.record.PUnaryRelOpValue_PUnaryPhysicalOperator" json:"operator,omitempty"`
}

func (x *PUnaryRelOpValue) Reset() {
	*x = PUnaryRelOpValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PUnaryRelOpValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PUnaryRelOpValue) ProtoMessage() {}

func (x *PUnaryRelOpValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PUnaryRelOpValue.ProtoReflect.Descriptor instead.
func (*PUnaryRelOpValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{45}
}

func (x *PUnaryRelOpValue) GetSuper() *PRelOpValue {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PUnaryRelOpValue) GetOperator() PUnaryRelOpValue_PUnaryPhysicalOperator {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return PUnaryRelOpValue_IS_NULL_UI
}

type PUdfValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children   []*PValue `protobuf:"bytes,1,rep,name=children" json:"children,omitempty"`
	ResultType *PType    `protobuf:"bytes,2,opt,name=result_type,json=resultType" json:"result_type,omitempty"`
}

func (x *PUdfValue) Reset() {
	*x = PUdfValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PUdfValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PUdfValue) ProtoMessage() {}

func (x *PUdfValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PUdfValue.ProtoReflect.Descriptor instead.
func (*PUdfValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{46}
}

func (x *PUdfValue) GetChildren() []*PValue {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *PUdfValue) GetResultType() *PType {
	if x != nil {
		return x.ResultType
	}
	return nil
}

type PVariadicFunctionValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator *PVariadicFunctionValue_PPhysicalOperator `protobuf:"varint,1,opt,name=operator,enum=com.apple.foundationdb.record.PVariadicFunctionValue_PPhysicalOperator" json:"operator,omitempty"`
	Children []*PValue                                 `protobuf:"bytes,2,rep,name=children" json:"children,omitempty"`
}

func (x *PVariadicFunctionValue) Reset() {
	*x = PVariadicFunctionValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PVariadicFunctionValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PVariadicFunctionValue) ProtoMessage() {}

func (x *PVariadicFunctionValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PVariadicFunctionValue.ProtoReflect.Descriptor instead.
func (*PVariadicFunctionValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{47}
}

func (x *PVariadicFunctionValue) GetOperator() PVariadicFunctionValue_PPhysicalOperator {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return PVariadicFunctionValue_GREATEST_INT
}

func (x *PVariadicFunctionValue) GetChildren() []*PValue {
	if x != nil {
		return x.Children
	}
	return nil
}

type PVersionValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAlias *string `protobuf:"bytes,1,opt,name=base_alias,json=baseAlias" json:"base_alias,omitempty"`
}

func (x *PVersionValue) Reset() {
	*x = PVersionValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PVersionValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PVersionValue) ProtoMessage() {}

func (x *PVersionValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PVersionValue.ProtoReflect.Descriptor instead.
func (*PVersionValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{48}
}

func (x *PVersionValue) GetBaseAlias() string {
	if x != nil && x.BaseAlias != nil {
		return *x.BaseAlias
	}
	return ""
}

type PWindowedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitioningValues []*PValue `protobuf:"bytes,1,rep,name=partitioning_values,json=partitioningValues" json:"partitioning_values,omitempty"`
	ArgumentValues     []*PValue `protobuf:"bytes,2,rep,name=argument_values,json=argumentValues" json:"argument_values,omitempty"`
}

func (x *PWindowedValue) Reset() {
	*x = PWindowedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PWindowedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PWindowedValue) ProtoMessage() {}

func (x *PWindowedValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PWindowedValue.ProtoReflect.Descriptor instead.
func (*PWindowedValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{49}
}

func (x *PWindowedValue) GetPartitioningValues() []*PValue {
	if x != nil {
		return x.PartitioningValues
	}
	return nil
}

func (x *PWindowedValue) GetArgumentValues() []*PValue {
	if x != nil {
		return x.ArgumentValues
	}
	return nil
}

// Comparisons
type PComparison struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Types that are assignable to SpecificComparison:
	//
	//	*PComparison_AdditionalComparisons
	//	*PComparison_SimpleComparison
	//	*PComparison_ParameterComparison
	//	*PComparison_ValueComparison
	//	*PComparison_ListComparison
	//	*PComparison_NullComparison
	//	*PComparison_OpaqueEqualityComparison
	//	*PComparison_MultiColumnComparison
	//	*PComparison_InvertedFunctionComparison
	//	*PComparison_RecordTypeComparison
	SpecificComparison isPComparison_SpecificComparison `protobuf_oneof:"specific_comparison"`
}

func (x *PComparison) Reset() {
	*x = PComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PComparison) ProtoMessage() {}

func (x *PComparison) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PComparison.ProtoReflect.Descriptor instead.
func (*PComparison) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{50}
}

func (m *PComparison) GetSpecificComparison() isPComparison_SpecificComparison {
	if m != nil {
		return m.SpecificComparison
	}
	return nil
}

func (x *PComparison) GetAdditionalComparisons() *anypb.Any {
	if x, ok := x.GetSpecificComparison().(*PComparison_AdditionalComparisons); ok {
		return x.AdditionalComparisons
	}
	return nil
}

func (x *PComparison) GetSimpleComparison() *PSimpleComparison {
	if x, ok := x.GetSpecificComparison().(*PComparison_SimpleComparison); ok {
		return x.SimpleComparison
	}
	return nil
}

func (x *PComparison) GetParameterComparison() *PParameterComparison {
	if x, ok := x.GetSpecificComparison().(*PComparison_ParameterComparison); ok {
		return x.ParameterComparison
	}
	return nil
}

func (x *PComparison) GetValueComparison() *PValueComparison {
	if x, ok := x.GetSpecificComparison().(*PComparison_ValueComparison); ok {
		return x.ValueComparison
	}
	return nil
}

func (x *PComparison) GetListComparison() *PListComparison {
	if x, ok := x.GetSpecificComparison().(*PComparison_ListComparison); ok {
		return x.ListComparison
	}
	return nil
}

func (x *PComparison) GetNullComparison() *PNullComparison {
	if x, ok := x.GetSpecificComparison().(*PComparison_NullComparison); ok {
		return x.NullComparison
	}
	return nil
}

func (x *PComparison) GetOpaqueEqualityComparison() *POpaqueEqualityComparison {
	if x, ok := x.GetSpecificComparison().(*PComparison_OpaqueEqualityComparison); ok {
		return x.OpaqueEqualityComparison
	}
	return nil
}

func (x *PComparison) GetMultiColumnComparison() *PMultiColumnComparison {
	if x, ok := x.GetSpecificComparison().(*PComparison_MultiColumnComparison); ok {
		return x.MultiColumnComparison
	}
	return nil
}

func (x *PComparison) GetInvertedFunctionComparison() *PInvertedFunctionComparison {
	if x, ok := x.GetSpecificComparison().(*PComparison_InvertedFunctionComparison); ok {
		return x.InvertedFunctionComparison
	}
	return nil
}

func (x *PComparison) GetRecordTypeComparison() *PRecordTypeComparison {
	if x, ok := x.GetSpecificComparison().(*PComparison_RecordTypeComparison); ok {
		return x.RecordTypeComparison
	}
	return nil
}

type isPComparison_SpecificComparison interface {
	isPComparison_SpecificComparison()
}

type PComparison_AdditionalComparisons struct {
	AdditionalComparisons *anypb.Any `protobuf:"bytes,1,opt,name=additional_comparisons,json=additionalComparisons,oneof"`
}

type PComparison_SimpleComparison struct {
	SimpleComparison *PSimpleComparison `protobuf:"bytes,2,opt,name=simple_comparison,json=simpleComparison,oneof"`
}

type PComparison_ParameterComparison struct {
	ParameterComparison *PParameterComparison `protobuf:"bytes,3,opt,name=parameter_comparison,json=parameterComparison,oneof"`
}

type PComparison_ValueComparison struct {
	ValueComparison *PValueComparison `protobuf:"bytes,4,opt,name=value_comparison,json=valueComparison,oneof"`
}

type PComparison_ListComparison struct {
	ListComparison *PListComparison `protobuf:"bytes,5,opt,name=list_comparison,json=listComparison,oneof"`
}

type PComparison_NullComparison struct {
	NullComparison *PNullComparison `protobuf:"bytes,6,opt,name=null_comparison,json=nullComparison,oneof"`
}

type PComparison_OpaqueEqualityComparison struct {
	OpaqueEqualityComparison *POpaqueEqualityComparison `protobuf:"bytes,7,opt,name=opaque_equality_comparison,json=opaqueEqualityComparison,oneof"`
}

type PComparison_MultiColumnComparison struct {
	MultiColumnComparison *PMultiColumnComparison `protobuf:"bytes,8,opt,name=multi_column_comparison,json=multiColumnComparison,oneof"`
}

type PComparison_InvertedFunctionComparison struct {
	InvertedFunctionComparison *PInvertedFunctionComparison `protobuf:"bytes,9,opt,name=inverted_function_comparison,json=invertedFunctionComparison,oneof"`
}

type PComparison_RecordTypeComparison struct {
	RecordTypeComparison *PRecordTypeComparison `protobuf:"bytes,10,opt,name=record_type_comparison,json=recordTypeComparison,oneof"`
}

func (*PComparison_AdditionalComparisons) isPComparison_SpecificComparison() {}

func (*PComparison_SimpleComparison) isPComparison_SpecificComparison() {}

func (*PComparison_ParameterComparison) isPComparison_SpecificComparison() {}

func (*PComparison_ValueComparison) isPComparison_SpecificComparison() {}

func (*PComparison_ListComparison) isPComparison_SpecificComparison() {}

func (*PComparison_NullComparison) isPComparison_SpecificComparison() {}

func (*PComparison_OpaqueEqualityComparison) isPComparison_SpecificComparison() {}

func (*PComparison_MultiColumnComparison) isPComparison_SpecificComparison() {}

func (*PComparison_InvertedFunctionComparison) isPComparison_SpecificComparison() {}

func (*PComparison_RecordTypeComparison) isPComparison_SpecificComparison() {}

type PSimpleComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *PComparison_PComparisonType `protobuf:"varint,1,opt,name=type,enum=com.apple.foundationdb.record.PComparison_PComparisonType" json:"type,omitempty"`
	Object *PComparableObject           `protobuf:"bytes,2,opt,name=object" json:"object,omitempty"`
}

func (x *PSimpleComparison) Reset() {
	*x = PSimpleComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PSimpleComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSimpleComparison) ProtoMessage() {}

func (x *PSimpleComparison) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSimpleComparison.ProtoReflect.Descriptor instead.
func (*PSimpleComparison) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{51}
}

func (x *PSimpleComparison) GetType() PComparison_PComparisonType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PComparison_EQUALS
}

func (x *PSimpleComparison) GetObject() *PComparableObject {
	if x != nil {
		return x.Object
	}
	return nil
}

type PComparableObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SpecificObject:
	//
	//	*PComparableObject_PrimitiveObject
	//	*PComparableObject_EnumObject
	//	*PComparableObject_Uuid
	//	*PComparableObject_FdbRecordVersion
	//	*PComparableObject_BytesAsByteString
	SpecificObject isPComparableObject_SpecificObject `protobuf_oneof:"specific_object"`
}

func (x *PComparableObject) Reset() {
	*x = PComparableObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PComparableObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PComparableObject) ProtoMessage() {}

func (x *PComparableObject) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PComparableObject.ProtoReflect.Descriptor instead.
func (*PComparableObject) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{52}
}

func (m *PComparableObject) GetSpecificObject() isPComparableObject_SpecificObject {
	if m != nil {
		return m.SpecificObject
	}
	return nil
}

func (x *PComparableObject) GetPrimitiveObject() *Value {
	if x, ok := x.GetSpecificObject().(*PComparableObject_PrimitiveObject); ok {
		return x.PrimitiveObject
	}
	return nil
}

func (x *PComparableObject) GetEnumObject() *PEnumLightValue {
	if x, ok := x.GetSpecificObject().(*PComparableObject_EnumObject); ok {
		return x.EnumObject
	}
	return nil
}

func (x *PComparableObject) GetUuid() *PUUID {
	if x, ok := x.GetSpecificObject().(*PComparableObject_Uuid); ok {
		return x.Uuid
	}
	return nil
}

func (x *PComparableObject) GetFdbRecordVersion() *PFDBRecordVersion {
	if x, ok := x.GetSpecificObject().(*PComparableObject_FdbRecordVersion); ok {
		return x.FdbRecordVersion
	}
	return nil
}

func (x *PComparableObject) GetBytesAsByteString() []byte {
	if x, ok := x.GetSpecificObject().(*PComparableObject_BytesAsByteString); ok {
		return x.BytesAsByteString
	}
	return nil
}

type isPComparableObject_SpecificObject interface {
	isPComparableObject_SpecificObject()
}

type PComparableObject_PrimitiveObject struct {
	PrimitiveObject *Value `protobuf:"bytes,1,opt,name=primitive_object,json=primitiveObject,oneof"`
}

type PComparableObject_EnumObject struct {
	EnumObject *PEnumLightValue `protobuf:"bytes,2,opt,name=enum_object,json=enumObject,oneof"`
}

type PComparableObject_Uuid struct {
	Uuid *PUUID `protobuf:"bytes,3,opt,name=uuid,oneof"`
}

type PComparableObject_FdbRecordVersion struct {
	FdbRecordVersion *PFDBRecordVersion `protobuf:"bytes,4,opt,name=fdb_record_version,json=fdbRecordVersion,oneof"`
}

type PComparableObject_BytesAsByteString struct {
	BytesAsByteString []byte `protobuf:"bytes,5,opt,name=bytes_as_byte_string,json=bytesAsByteString,oneof"`
}

func (*PComparableObject_PrimitiveObject) isPComparableObject_SpecificObject() {}

func (*PComparableObject_EnumObject) isPComparableObject_SpecificObject() {}

func (*PComparableObject_Uuid) isPComparableObject_SpecificObject() {}

func (*PComparableObject_FdbRecordVersion) isPComparableObject_SpecificObject() {}

func (*PComparableObject_BytesAsByteString) isPComparableObject_SpecificObject() {}

type PEnumLightValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Number *int32  `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
}

func (x *PEnumLightValue) Reset() {
	*x = PEnumLightValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PEnumLightValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PEnumLightValue) ProtoMessage() {}

func (x *PEnumLightValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PEnumLightValue.ProtoReflect.Descriptor instead.
func (*PEnumLightValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{53}
}

func (x *PEnumLightValue) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PEnumLightValue) GetNumber() int32 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

type PUUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MostSigBits  *uint64 `protobuf:"varint,1,opt,name=mostSigBits" json:"mostSigBits,omitempty"`
	LeastSigBits *uint64 `protobuf:"varint,2,opt,name=leastSigBits" json:"leastSigBits,omitempty"`
}

func (x *PUUID) Reset() {
	*x = PUUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PUUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PUUID) ProtoMessage() {}

func (x *PUUID) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PUUID.ProtoReflect.Descriptor instead.
func (*PUUID) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{54}
}

func (x *PUUID) GetMostSigBits() uint64 {
	if x != nil && x.MostSigBits != nil {
		return *x.MostSigBits
	}
	return 0
}

func (x *PUUID) GetLeastSigBits() uint64 {
	if x != nil && x.LeastSigBits != nil {
		return *x.LeastSigBits
	}
	return 0
}

type PFDBRecordVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawBytes []byte `protobuf:"bytes,1,opt,name=raw_bytes,json=rawBytes" json:"raw_bytes,omitempty"`
}

func (x *PFDBRecordVersion) Reset() {
	*x = PFDBRecordVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PFDBRecordVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PFDBRecordVersion) ProtoMessage() {}

func (x *PFDBRecordVersion) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PFDBRecordVersion.ProtoReflect.Descriptor instead.
func (*PFDBRecordVersion) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{55}
}

func (x *PFDBRecordVersion) GetRawBytes() []byte {
	if x != nil {
		return x.RawBytes
	}
	return nil
}

type PParameterComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *PComparison_PComparisonType       `protobuf:"varint,1,opt,name=type,enum=com.apple.foundationdb.record.PComparison_PComparisonType" json:"type,omitempty"`
	Parameter *string                            `protobuf:"bytes,2,opt,name=parameter" json:"parameter,omitempty"`
	Internal  *PParameterComparison_PBindingKind `protobuf:"varint,3,opt,name=internal,enum=com.apple.foundationdb.record.PParameterComparison_PBindingKind" json:"internal,omitempty"`
}

func (x *PParameterComparison) Reset() {
	*x = PParameterComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PParameterComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PParameterComparison) ProtoMessage() {}

func (x *PParameterComparison) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PParameterComparison.ProtoReflect.Descriptor instead.
func (*PParameterComparison) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{56}
}

func (x *PParameterComparison) GetType() PComparison_PComparisonType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PComparison_EQUALS
}

func (x *PParameterComparison) GetParameter() string {
	if x != nil && x.Parameter != nil {
		return *x.Parameter
	}
	return ""
}

func (x *PParameterComparison) GetInternal() PParameterComparison_PBindingKind {
	if x != nil && x.Internal != nil {
		return *x.Internal
	}
	return PParameterComparison_IN
}

type PValueComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           *PComparison_PComparisonType `protobuf:"varint,1,opt,name=type,enum=com.apple.foundationdb.record.PComparison_PComparisonType" json:"type,omitempty"`
	ComparandValue *PValue                      `protobuf:"bytes,2,opt,name=comparandValue" json:"comparandValue,omitempty"`
}

func (x *PValueComparison) Reset() {
	*x = PValueComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PValueComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PValueComparison) ProtoMessage() {}

func (x *PValueComparison) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PValueComparison.ProtoReflect.Descriptor instead.
func (*PValueComparison) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{57}
}

func (x *PValueComparison) GetType() PComparison_PComparisonType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PComparison_EQUALS
}

func (x *PValueComparison) GetComparandValue() *PValue {
	if x != nil {
		return x.ComparandValue
	}
	return nil
}

type PListComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *PComparison_PComparisonType `protobuf:"varint,1,opt,name=type,enum=com.apple.foundationdb.record.PComparison_PComparisonType" json:"type,omitempty"`
	Comparand []*PComparableObject         `protobuf:"bytes,2,rep,name=comparand" json:"comparand,omitempty"`
}

func (x *PListComparison) Reset() {
	*x = PListComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PListComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PListComparison) ProtoMessage() {}

func (x *PListComparison) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PListComparison.ProtoReflect.Descriptor instead.
func (*PListComparison) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{58}
}

func (x *PListComparison) GetType() PComparison_PComparisonType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PComparison_EQUALS
}

func (x *PListComparison) GetComparand() []*PComparableObject {
	if x != nil {
		return x.Comparand
	}
	return nil
}

type PNullComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *PComparison_PComparisonType `protobuf:"varint,1,opt,name=type,enum=com.apple.foundationdb.record.PComparison_PComparisonType" json:"type,omitempty"`
}

func (x *PNullComparison) Reset() {
	*x = PNullComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PNullComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNullComparison) ProtoMessage() {}

func (x *PNullComparison) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNullComparison.ProtoReflect.Descriptor instead.
func (*PNullComparison) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{59}
}

func (x *PNullComparison) GetType() PComparison_PComparisonType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PComparison_EQUALS
}

type POpaqueEqualityComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *POpaqueEqualityComparison) Reset() {
	*x = POpaqueEqualityComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *POpaqueEqualityComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*POpaqueEqualityComparison) ProtoMessage() {}

func (x *POpaqueEqualityComparison) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use POpaqueEqualityComparison.ProtoReflect.Descriptor instead.
func (*POpaqueEqualityComparison) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{60}
}

type PMultiColumnComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner *PComparison `protobuf:"bytes,1,opt,name=inner" json:"inner,omitempty"`
}

func (x *PMultiColumnComparison) Reset() {
	*x = PMultiColumnComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PMultiColumnComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PMultiColumnComparison) ProtoMessage() {}

func (x *PMultiColumnComparison) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PMultiColumnComparison.ProtoReflect.Descriptor instead.
func (*PMultiColumnComparison) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{61}
}

func (x *PMultiColumnComparison) GetInner() *PComparison {
	if x != nil {
		return x.Inner
	}
	return nil
}

type PInvertedFunctionComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function           *Function                    `protobuf:"bytes,1,opt,name=function" json:"function,omitempty"`
	OriginalComparison *PComparison                 `protobuf:"bytes,2,opt,name=original_comparison,json=originalComparison" json:"original_comparison,omitempty"`
	Type               *PComparison_PComparisonType `protobuf:"varint,3,opt,name=type,enum=com.apple.foundationdb.record.PComparison_PComparisonType" json:"type,omitempty"`
}

func (x *PInvertedFunctionComparison) Reset() {
	*x = PInvertedFunctionComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PInvertedFunctionComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PInvertedFunctionComparison) ProtoMessage() {}

func (x *PInvertedFunctionComparison) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PInvertedFunctionComparison.ProtoReflect.Descriptor instead.
func (*PInvertedFunctionComparison) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{62}
}

func (x *PInvertedFunctionComparison) GetFunction() *Function {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *PInvertedFunctionComparison) GetOriginalComparison() *PComparison {
	if x != nil {
		return x.OriginalComparison
	}
	return nil
}

func (x *PInvertedFunctionComparison) GetType() PComparison_PComparisonType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PComparison_EQUALS
}

type PRecordTypeComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordTypeName *string `protobuf:"bytes,1,opt,name=record_type_name,json=recordTypeName" json:"record_type_name,omitempty"`
}

func (x *PRecordTypeComparison) Reset() {
	*x = PRecordTypeComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordTypeComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordTypeComparison) ProtoMessage() {}

func (x *PRecordTypeComparison) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordTypeComparison.ProtoReflect.Descriptor instead.
func (*PRecordTypeComparison) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{63}
}

func (x *PRecordTypeComparison) GetRecordTypeName() string {
	if x != nil && x.RecordTypeName != nil {
		return *x.RecordTypeName
	}
	return ""
}

// Query Predicates
type PQueryPredicate struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Types that are assignable to SpecificPredicate:
	//
	//	*PQueryPredicate_AdditionalQueryPredicates
	//	*PQueryPredicate_AndPredicate
	//	*PQueryPredicate_ConstantPredicate
	//	*PQueryPredicate_ExistsPredicate
	//	*PQueryPredicate_NotPredicate
	//	*PQueryPredicate_OrPredicate
	//	*PQueryPredicate_PredicateWithValueAndRanges
	//	*PQueryPredicate_ValuePredicate
	//	*PQueryPredicate_CompatibleTypeEvolutionPredicate
	//	*PQueryPredicate_DatabaseObjectDependenciesPredicate
	SpecificPredicate isPQueryPredicate_SpecificPredicate `protobuf_oneof:"specific_predicate"`
}

func (x *PQueryPredicate) Reset() {
	*x = PQueryPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PQueryPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PQueryPredicate) ProtoMessage() {}

func (x *PQueryPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PQueryPredicate.ProtoReflect.Descriptor instead.
func (*PQueryPredicate) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{64}
}

func (m *PQueryPredicate) GetSpecificPredicate() isPQueryPredicate_SpecificPredicate {
	if m != nil {
		return m.SpecificPredicate
	}
	return nil
}

func (x *PQueryPredicate) GetAdditionalQueryPredicates() *anypb.Any {
	if x, ok := x.GetSpecificPredicate().(*PQueryPredicate_AdditionalQueryPredicates); ok {
		return x.AdditionalQueryPredicates
	}
	return nil
}

func (x *PQueryPredicate) GetAndPredicate() *PAndPredicate {
	if x, ok := x.GetSpecificPredicate().(*PQueryPredicate_AndPredicate); ok {
		return x.AndPredicate
	}
	return nil
}

func (x *PQueryPredicate) GetConstantPredicate() *PConstantPredicate {
	if x, ok := x.GetSpecificPredicate().(*PQueryPredicate_ConstantPredicate); ok {
		return x.ConstantPredicate
	}
	return nil
}

func (x *PQueryPredicate) GetExistsPredicate() *PExistsPredicate {
	if x, ok := x.GetSpecificPredicate().(*PQueryPredicate_ExistsPredicate); ok {
		return x.ExistsPredicate
	}
	return nil
}

func (x *PQueryPredicate) GetNotPredicate() *PNotPredicate {
	if x, ok := x.GetSpecificPredicate().(*PQueryPredicate_NotPredicate); ok {
		return x.NotPredicate
	}
	return nil
}

func (x *PQueryPredicate) GetOrPredicate() *POrPredicate {
	if x, ok := x.GetSpecificPredicate().(*PQueryPredicate_OrPredicate); ok {
		return x.OrPredicate
	}
	return nil
}

func (x *PQueryPredicate) GetPredicateWithValueAndRanges() *PPredicateWithValueAndRanges {
	if x, ok := x.GetSpecificPredicate().(*PQueryPredicate_PredicateWithValueAndRanges); ok {
		return x.PredicateWithValueAndRanges
	}
	return nil
}

func (x *PQueryPredicate) GetValuePredicate() *PValuePredicate {
	if x, ok := x.GetSpecificPredicate().(*PQueryPredicate_ValuePredicate); ok {
		return x.ValuePredicate
	}
	return nil
}

func (x *PQueryPredicate) GetCompatibleTypeEvolutionPredicate() *PCompatibleTypeEvolutionPredicate {
	if x, ok := x.GetSpecificPredicate().(*PQueryPredicate_CompatibleTypeEvolutionPredicate); ok {
		return x.CompatibleTypeEvolutionPredicate
	}
	return nil
}

func (x *PQueryPredicate) GetDatabaseObjectDependenciesPredicate() *PDatabaseObjectDependenciesPredicate {
	if x, ok := x.GetSpecificPredicate().(*PQueryPredicate_DatabaseObjectDependenciesPredicate); ok {
		return x.DatabaseObjectDependenciesPredicate
	}
	return nil
}

type isPQueryPredicate_SpecificPredicate interface {
	isPQueryPredicate_SpecificPredicate()
}

type PQueryPredicate_AdditionalQueryPredicates struct {
	AdditionalQueryPredicates *anypb.Any `protobuf:"bytes,1,opt,name=additional_query_predicates,json=additionalQueryPredicates,oneof"`
}

type PQueryPredicate_AndPredicate struct {
	AndPredicate *PAndPredicate `protobuf:"bytes,2,opt,name=and_predicate,json=andPredicate,oneof"`
}

type PQueryPredicate_ConstantPredicate struct {
	ConstantPredicate *PConstantPredicate `protobuf:"bytes,3,opt,name=constant_predicate,json=constantPredicate,oneof"`
}

type PQueryPredicate_ExistsPredicate struct {
	ExistsPredicate *PExistsPredicate `protobuf:"bytes,4,opt,name=exists_predicate,json=existsPredicate,oneof"`
}

type PQueryPredicate_NotPredicate struct {
	NotPredicate *PNotPredicate `protobuf:"bytes,5,opt,name=not_predicate,json=notPredicate,oneof"`
}

type PQueryPredicate_OrPredicate struct {
	OrPredicate *POrPredicate `protobuf:"bytes,6,opt,name=or_predicate,json=orPredicate,oneof"`
}

type PQueryPredicate_PredicateWithValueAndRanges struct {
	PredicateWithValueAndRanges *PPredicateWithValueAndRanges `protobuf:"bytes,7,opt,name=predicate_with_value_and_ranges,json=predicateWithValueAndRanges,oneof"`
}

type PQueryPredicate_ValuePredicate struct {
	ValuePredicate *PValuePredicate `protobuf:"bytes,8,opt,name=value_predicate,json=valuePredicate,oneof"`
}

type PQueryPredicate_CompatibleTypeEvolutionPredicate struct {
	CompatibleTypeEvolutionPredicate *PCompatibleTypeEvolutionPredicate `protobuf:"bytes,9,opt,name=compatible_type_evolution_predicate,json=compatibleTypeEvolutionPredicate,oneof"`
}

type PQueryPredicate_DatabaseObjectDependenciesPredicate struct {
	DatabaseObjectDependenciesPredicate *PDatabaseObjectDependenciesPredicate `protobuf:"bytes,10,opt,name=database_object_dependencies_predicate,json=databaseObjectDependenciesPredicate,oneof"`
}

func (*PQueryPredicate_AdditionalQueryPredicates) isPQueryPredicate_SpecificPredicate() {}

func (*PQueryPredicate_AndPredicate) isPQueryPredicate_SpecificPredicate() {}

func (*PQueryPredicate_ConstantPredicate) isPQueryPredicate_SpecificPredicate() {}

func (*PQueryPredicate_ExistsPredicate) isPQueryPredicate_SpecificPredicate() {}

func (*PQueryPredicate_NotPredicate) isPQueryPredicate_SpecificPredicate() {}

func (*PQueryPredicate_OrPredicate) isPQueryPredicate_SpecificPredicate() {}

func (*PQueryPredicate_PredicateWithValueAndRanges) isPQueryPredicate_SpecificPredicate() {}

func (*PQueryPredicate_ValuePredicate) isPQueryPredicate_SpecificPredicate() {}

func (*PQueryPredicate_CompatibleTypeEvolutionPredicate) isPQueryPredicate_SpecificPredicate() {}

func (*PQueryPredicate_DatabaseObjectDependenciesPredicate) isPQueryPredicate_SpecificPredicate() {}

type PAbstractQueryPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAtomic *bool `protobuf:"varint,1,opt,name=is_atomic,json=isAtomic" json:"is_atomic,omitempty"`
}

func (x *PAbstractQueryPredicate) Reset() {
	*x = PAbstractQueryPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PAbstractQueryPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PAbstractQueryPredicate) ProtoMessage() {}

func (x *PAbstractQueryPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PAbstractQueryPredicate.ProtoReflect.Descriptor instead.
func (*PAbstractQueryPredicate) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{65}
}

func (x *PAbstractQueryPredicate) GetIsAtomic() bool {
	if x != nil && x.IsAtomic != nil {
		return *x.IsAtomic
	}
	return false
}

type PAndOrPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super    *PAbstractQueryPredicate `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Children []*PQueryPredicate       `protobuf:"bytes,2,rep,name=children" json:"children,omitempty"`
}

func (x *PAndOrPredicate) Reset() {
	*x = PAndOrPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PAndOrPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PAndOrPredicate) ProtoMessage() {}

func (x *PAndOrPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PAndOrPredicate.ProtoReflect.Descriptor instead.
func (*PAndOrPredicate) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{66}
}

func (x *PAndOrPredicate) GetSuper() *PAbstractQueryPredicate {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PAndOrPredicate) GetChildren() []*PQueryPredicate {
	if x != nil {
		return x.Children
	}
	return nil
}

type PAndPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PAndOrPredicate `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *PAndPredicate) Reset() {
	*x = PAndPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PAndPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PAndPredicate) ProtoMessage() {}

func (x *PAndPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PAndPredicate.ProtoReflect.Descriptor instead.
func (*PAndPredicate) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{67}
}

func (x *PAndPredicate) GetSuper() *PAndOrPredicate {
	if x != nil {
		return x.Super
	}
	return nil
}

type PCompatibleTypeEvolutionPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordTypeNameFieldAccessPairs []*PCompatibleTypeEvolutionPredicate_PRecordTypeNameFieldAccessPair `protobuf:"bytes,1,rep,name=record_type_name_field_access_pairs,json=recordTypeNameFieldAccessPairs" json:"record_type_name_field_access_pairs,omitempty"`
}

func (x *PCompatibleTypeEvolutionPredicate) Reset() {
	*x = PCompatibleTypeEvolutionPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCompatibleTypeEvolutionPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCompatibleTypeEvolutionPredicate) ProtoMessage() {}

func (x *PCompatibleTypeEvolutionPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCompatibleTypeEvolutionPredicate.ProtoReflect.Descriptor instead.
func (*PCompatibleTypeEvolutionPredicate) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{68}
}

func (x *PCompatibleTypeEvolutionPredicate) GetRecordTypeNameFieldAccessPairs() []*PCompatibleTypeEvolutionPredicate_PRecordTypeNameFieldAccessPair {
	if x != nil {
		return x.RecordTypeNameFieldAccessPairs
	}
	return nil
}

type PConstantPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PAbstractQueryPredicate `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Value *bool                    `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (x *PConstantPredicate) Reset() {
	*x = PConstantPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PConstantPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PConstantPredicate) ProtoMessage() {}

func (x *PConstantPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PConstantPredicate.ProtoReflect.Descriptor instead.
func (*PConstantPredicate) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{69}
}

func (x *PConstantPredicate) GetSuper() *PAbstractQueryPredicate {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PConstantPredicate) GetValue() bool {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return false
}

type PDatabaseObjectDependenciesPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsedIndexes []*PDatabaseObjectDependenciesPredicate_PUsedIndex `protobuf:"bytes,1,rep,name=used_indexes,json=usedIndexes" json:"used_indexes,omitempty"`
}

func (x *PDatabaseObjectDependenciesPredicate) Reset() {
	*x = PDatabaseObjectDependenciesPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PDatabaseObjectDependenciesPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDatabaseObjectDependenciesPredicate) ProtoMessage() {}

func (x *PDatabaseObjectDependenciesPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDatabaseObjectDependenciesPredicate.ProtoReflect.Descriptor instead.
func (*PDatabaseObjectDependenciesPredicate) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{70}
}

func (x *PDatabaseObjectDependenciesPredicate) GetUsedIndexes() []*PDatabaseObjectDependenciesPredicate_PUsedIndex {
	if x != nil {
		return x.UsedIndexes
	}
	return nil
}

type PExistsPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super            *PAbstractQueryPredicate `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	ExistentialAlias *string                  `protobuf:"bytes,2,opt,name=existential_alias,json=existentialAlias" json:"existential_alias,omitempty"`
}

func (x *PExistsPredicate) Reset() {
	*x = PExistsPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PExistsPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PExistsPredicate) ProtoMessage() {}

func (x *PExistsPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PExistsPredicate.ProtoReflect.Descriptor instead.
func (*PExistsPredicate) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{71}
}

func (x *PExistsPredicate) GetSuper() *PAbstractQueryPredicate {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PExistsPredicate) GetExistentialAlias() string {
	if x != nil && x.ExistentialAlias != nil {
		return *x.ExistentialAlias
	}
	return ""
}

type PNotPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PAbstractQueryPredicate `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Child *PQueryPredicate         `protobuf:"bytes,2,opt,name=child" json:"child,omitempty"`
}

func (x *PNotPredicate) Reset() {
	*x = PNotPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PNotPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNotPredicate) ProtoMessage() {}

func (x *PNotPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNotPredicate.ProtoReflect.Descriptor instead.
func (*PNotPredicate) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{72}
}

func (x *PNotPredicate) GetSuper() *PAbstractQueryPredicate {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PNotPredicate) GetChild() *PQueryPredicate {
	if x != nil {
		return x.Child
	}
	return nil
}

type POrPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PAndOrPredicate `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *POrPredicate) Reset() {
	*x = POrPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *POrPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*POrPredicate) ProtoMessage() {}

func (x *POrPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use POrPredicate.ProtoReflect.Descriptor instead.
func (*POrPredicate) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{73}
}

func (x *POrPredicate) GetSuper() *PAndOrPredicate {
	if x != nil {
		return x.Super
	}
	return nil
}

type PPredicateWithValueAndRanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super  *PAbstractQueryPredicate `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Value  *PValue                  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Ranges []*PRangeConstraints     `protobuf:"bytes,3,rep,name=ranges" json:"ranges,omitempty"`
}

func (x *PPredicateWithValueAndRanges) Reset() {
	*x = PPredicateWithValueAndRanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PPredicateWithValueAndRanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PPredicateWithValueAndRanges) ProtoMessage() {}

func (x *PPredicateWithValueAndRanges) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PPredicateWithValueAndRanges.ProtoReflect.Descriptor instead.
func (*PPredicateWithValueAndRanges) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{74}
}

func (x *PPredicateWithValueAndRanges) GetSuper() *PAbstractQueryPredicate {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PPredicateWithValueAndRanges) GetValue() *PValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PPredicateWithValueAndRanges) GetRanges() []*PRangeConstraints {
	if x != nil {
		return x.Ranges
	}
	return nil
}

type PRangeConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvaluableRange *PCompilableRange `protobuf:"bytes,1,opt,name=evaluable_range,json=evaluableRange" json:"evaluable_range,omitempty"`
	DeferredRanges []*PComparison    `protobuf:"bytes,2,rep,name=deferred_ranges,json=deferredRanges" json:"deferred_ranges,omitempty"`
}

func (x *PRangeConstraints) Reset() {
	*x = PRangeConstraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRangeConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRangeConstraints) ProtoMessage() {}

func (x *PRangeConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRangeConstraints.ProtoReflect.Descriptor instead.
func (*PRangeConstraints) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{75}
}

func (x *PRangeConstraints) GetEvaluableRange() *PCompilableRange {
	if x != nil {
		return x.EvaluableRange
	}
	return nil
}

func (x *PRangeConstraints) GetDeferredRanges() []*PComparison {
	if x != nil {
		return x.DeferredRanges
	}
	return nil
}

type PCompilableRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompilableComparisons []*PComparison `protobuf:"bytes,1,rep,name=compilable_comparisons,json=compilableComparisons" json:"compilable_comparisons,omitempty"`
}

func (x *PCompilableRange) Reset() {
	*x = PCompilableRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCompilableRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCompilableRange) ProtoMessage() {}

func (x *PCompilableRange) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCompilableRange.ProtoReflect.Descriptor instead.
func (*PCompilableRange) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{76}
}

func (x *PCompilableRange) GetCompilableComparisons() []*PComparison {
	if x != nil {
		return x.CompilableComparisons
	}
	return nil
}

type PValuePredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *PAbstractQueryPredicate `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Value      *PValue                  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Comparison *PComparison             `protobuf:"bytes,3,opt,name=comparison" json:"comparison,omitempty"`
}

func (x *PValuePredicate) Reset() {
	*x = PValuePredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PValuePredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PValuePredicate) ProtoMessage() {}

func (x *PValuePredicate) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PValuePredicate.ProtoReflect.Descriptor instead.
func (*PValuePredicate) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{77}
}

func (x *PValuePredicate) GetSuper() *PAbstractQueryPredicate {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PValuePredicate) GetValue() *PValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PValuePredicate) GetComparison() *PComparison {
	if x != nil {
		return x.Comparison
	}
	return nil
}

// PPhysicalQuantifier - A quantifier ranges over at least one plan reference, however, it could range
// over more than one if we at some point want to serialize variations as well, i.e. the intermediate state that
// a plan structure can be in during planning.
type PPhysicalQuantifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias          *string           `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	PlanReferences []*PPlanReference `protobuf:"bytes,2,rep,name=plan_references,json=planReferences" json:"plan_references,omitempty"`
}

func (x *PPhysicalQuantifier) Reset() {
	*x = PPhysicalQuantifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PPhysicalQuantifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PPhysicalQuantifier) ProtoMessage() {}

func (x *PPhysicalQuantifier) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PPhysicalQuantifier.ProtoReflect.Descriptor instead.
func (*PPhysicalQuantifier) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{78}
}

func (x *PPhysicalQuantifier) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *PPhysicalQuantifier) GetPlanReferences() []*PPlanReference {
	if x != nil {
		return x.PlanReferences
	}
	return nil
}

// Plan reference holder to assign ids to plans in order to support plan DAGs.
type PPlanReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceId     *int32            `protobuf:"varint,1,opt,name=reference_id,json=referenceId" json:"reference_id,omitempty"`
	RecordQueryPlan *PRecordQueryPlan `protobuf:"bytes,2,opt,name=record_query_plan,json=recordQueryPlan" json:"record_query_plan,omitempty"`
}

func (x *PPlanReference) Reset() {
	*x = PPlanReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PPlanReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PPlanReference) ProtoMessage() {}

func (x *PPlanReference) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PPlanReference.ProtoReflect.Descriptor instead.
func (*PPlanReference) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{79}
}

func (x *PPlanReference) GetReferenceId() int32 {
	if x != nil && x.ReferenceId != nil {
		return *x.ReferenceId
	}
	return 0
}

func (x *PPlanReference) GetRecordQueryPlan() *PRecordQueryPlan {
	if x != nil {
		return x.RecordQueryPlan
	}
	return nil
}

type PRecordQueryPlan struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Types that are assignable to SpecificPlan:
	//
	//	*PRecordQueryPlan_AdditionalPlans
	//	*PRecordQueryPlan_AggregateIndexPlan
	//	*PRecordQueryPlan_CoveringIndexPlan
	//	*PRecordQueryPlan_DamPlan
	//	*PRecordQueryPlan_DeletePlan
	//	*PRecordQueryPlan_ExplodePlan
	//	*PRecordQueryPlan_FetchFromPartialRecordPlan
	//	*PRecordQueryPlan_FirstOrDefaultPlan
	//	*PRecordQueryPlan_FlatMapPlan
	//	*PRecordQueryPlan_InComparandJoinPlan
	//	*PRecordQueryPlan_RecordQueryIndexPlan
	//	*PRecordQueryPlan_InParameterJoinPlan
	//	*PRecordQueryPlan_InsertPlan
	//	*PRecordQueryPlan_IntersectionOnKeyExpressionPlan
	//	*PRecordQueryPlan_IntersectionOnValuesPlan
	//	*PRecordQueryPlan_InUnionOnKeyExpressionPlan
	//	*PRecordQueryPlan_InUnionOnValuesPlan
	//	*PRecordQueryPlan_InValuesJoinPlan
	//	*PRecordQueryPlan_MapPlan
	//	*PRecordQueryPlan_PredicatesFilterPlan
	//	*PRecordQueryPlan_RangePlan
	//	*PRecordQueryPlan_ScanPlan
	//	*PRecordQueryPlan_ScoreForRankPlan
	//	*PRecordQueryPlan_SortPlan
	//	*PRecordQueryPlan_StreamingAggregationPlan
	//	*PRecordQueryPlan_TypeFilterPlan
	//	*PRecordQueryPlan_UnionOnKeyExpressionPlan
	//	*PRecordQueryPlan_UnionOnValuesPlan
	//	*PRecordQueryPlan_UnorderedDistinctPlan
	//	*PRecordQueryPlan_UnorderedPrimaryKeyDistinctPlan
	//	*PRecordQueryPlan_UnorderedUnionPlan
	//	*PRecordQueryPlan_UpdatePlan
	SpecificPlan isPRecordQueryPlan_SpecificPlan `protobuf_oneof:"specific_plan"`
}

func (x *PRecordQueryPlan) Reset() {
	*x = PRecordQueryPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryPlan) ProtoMessage() {}

func (x *PRecordQueryPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{80}
}

func (m *PRecordQueryPlan) GetSpecificPlan() isPRecordQueryPlan_SpecificPlan {
	if m != nil {
		return m.SpecificPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetAdditionalPlans() *anypb.Any {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_AdditionalPlans); ok {
		return x.AdditionalPlans
	}
	return nil
}

func (x *PRecordQueryPlan) GetAggregateIndexPlan() *PRecordQueryAggregateIndexPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_AggregateIndexPlan); ok {
		return x.AggregateIndexPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetCoveringIndexPlan() *PRecordQueryCoveringIndexPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_CoveringIndexPlan); ok {
		return x.CoveringIndexPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetDamPlan() *PRecordQueryDamPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_DamPlan); ok {
		return x.DamPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetDeletePlan() *PRecordQueryDeletePlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_DeletePlan); ok {
		return x.DeletePlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetExplodePlan() *PRecordQueryExplodePlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_ExplodePlan); ok {
		return x.ExplodePlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetFetchFromPartialRecordPlan() *PRecordQueryFetchFromPartialRecordPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_FetchFromPartialRecordPlan); ok {
		return x.FetchFromPartialRecordPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetFirstOrDefaultPlan() *PRecordQueryFirstOrDefaultPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_FirstOrDefaultPlan); ok {
		return x.FirstOrDefaultPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetFlatMapPlan() *PRecordQueryFlatMapPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_FlatMapPlan); ok {
		return x.FlatMapPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetInComparandJoinPlan() *PRecordQueryInComparandJoinPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_InComparandJoinPlan); ok {
		return x.InComparandJoinPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetRecordQueryIndexPlan() *PRecordQueryIndexPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_RecordQueryIndexPlan); ok {
		return x.RecordQueryIndexPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetInParameterJoinPlan() *PRecordQueryInParameterJoinPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_InParameterJoinPlan); ok {
		return x.InParameterJoinPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetInsertPlan() *PRecordQueryInsertPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_InsertPlan); ok {
		return x.InsertPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetIntersectionOnKeyExpressionPlan() *PRecordQueryIntersectionOnKeyExpressionPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_IntersectionOnKeyExpressionPlan); ok {
		return x.IntersectionOnKeyExpressionPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetIntersectionOnValuesPlan() *PRecordQueryIntersectionOnValuesPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_IntersectionOnValuesPlan); ok {
		return x.IntersectionOnValuesPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetInUnionOnKeyExpressionPlan() *PRecordQueryInUnionOnKeyExpressionPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_InUnionOnKeyExpressionPlan); ok {
		return x.InUnionOnKeyExpressionPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetInUnionOnValuesPlan() *PRecordQueryInUnionOnValuesPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_InUnionOnValuesPlan); ok {
		return x.InUnionOnValuesPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetInValuesJoinPlan() *PRecordQueryInValuesJoinPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_InValuesJoinPlan); ok {
		return x.InValuesJoinPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetMapPlan() *PRecordQueryMapPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_MapPlan); ok {
		return x.MapPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetPredicatesFilterPlan() *PRecordQueryPredicatesFilterPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_PredicatesFilterPlan); ok {
		return x.PredicatesFilterPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetRangePlan() *PRecordQueryRangePlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_RangePlan); ok {
		return x.RangePlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetScanPlan() *PRecordQueryScanPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_ScanPlan); ok {
		return x.ScanPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetScoreForRankPlan() *PRecordQueryScoreForRankPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_ScoreForRankPlan); ok {
		return x.ScoreForRankPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetSortPlan() *PRecordQuerySortPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_SortPlan); ok {
		return x.SortPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetStreamingAggregationPlan() *PRecordQueryStreamingAggregationPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_StreamingAggregationPlan); ok {
		return x.StreamingAggregationPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetTypeFilterPlan() *PRecordQueryTypeFilterPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_TypeFilterPlan); ok {
		return x.TypeFilterPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetUnionOnKeyExpressionPlan() *PRecordQueryUnionOnKeyExpressionPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_UnionOnKeyExpressionPlan); ok {
		return x.UnionOnKeyExpressionPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetUnionOnValuesPlan() *PRecordQueryUnionOnValuesPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_UnionOnValuesPlan); ok {
		return x.UnionOnValuesPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetUnorderedDistinctPlan() *PRecordQueryUnorderedDistinctPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_UnorderedDistinctPlan); ok {
		return x.UnorderedDistinctPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetUnorderedPrimaryKeyDistinctPlan() *PRecordQueryUnorderedPrimaryKeyDistinctPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_UnorderedPrimaryKeyDistinctPlan); ok {
		return x.UnorderedPrimaryKeyDistinctPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetUnorderedUnionPlan() *PRecordQueryUnorderedUnionPlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_UnorderedUnionPlan); ok {
		return x.UnorderedUnionPlan
	}
	return nil
}

func (x *PRecordQueryPlan) GetUpdatePlan() *PRecordQueryUpdatePlan {
	if x, ok := x.GetSpecificPlan().(*PRecordQueryPlan_UpdatePlan); ok {
		return x.UpdatePlan
	}
	return nil
}

type isPRecordQueryPlan_SpecificPlan interface {
	isPRecordQueryPlan_SpecificPlan()
}

type PRecordQueryPlan_AdditionalPlans struct {
	AdditionalPlans *anypb.Any `protobuf:"bytes,1,opt,name=additional_plans,json=additionalPlans,oneof"`
}

type PRecordQueryPlan_AggregateIndexPlan struct {
	AggregateIndexPlan *PRecordQueryAggregateIndexPlan `protobuf:"bytes,2,opt,name=aggregate_index_plan,json=aggregateIndexPlan,oneof"`
}

type PRecordQueryPlan_CoveringIndexPlan struct {
	CoveringIndexPlan *PRecordQueryCoveringIndexPlan `protobuf:"bytes,3,opt,name=covering_index_plan,json=coveringIndexPlan,oneof"`
}

type PRecordQueryPlan_DamPlan struct {
	DamPlan *PRecordQueryDamPlan `protobuf:"bytes,4,opt,name=dam_plan,json=damPlan,oneof"`
}

type PRecordQueryPlan_DeletePlan struct {
	DeletePlan *PRecordQueryDeletePlan `protobuf:"bytes,5,opt,name=delete_plan,json=deletePlan,oneof"`
}

type PRecordQueryPlan_ExplodePlan struct {
	ExplodePlan *PRecordQueryExplodePlan `protobuf:"bytes,6,opt,name=explode_plan,json=explodePlan,oneof"`
}

type PRecordQueryPlan_FetchFromPartialRecordPlan struct {
	FetchFromPartialRecordPlan *PRecordQueryFetchFromPartialRecordPlan `protobuf:"bytes,7,opt,name=fetch_from_partial_record_plan,json=fetchFromPartialRecordPlan,oneof"`
}

type PRecordQueryPlan_FirstOrDefaultPlan struct {
	FirstOrDefaultPlan *PRecordQueryFirstOrDefaultPlan `protobuf:"bytes,8,opt,name=first_or_default_plan,json=firstOrDefaultPlan,oneof"`
}

type PRecordQueryPlan_FlatMapPlan struct {
	FlatMapPlan *PRecordQueryFlatMapPlan `protobuf:"bytes,9,opt,name=flat_map_plan,json=flatMapPlan,oneof"`
}

type PRecordQueryPlan_InComparandJoinPlan struct {
	InComparandJoinPlan *PRecordQueryInComparandJoinPlan `protobuf:"bytes,10,opt,name=in_comparand_join_plan,json=inComparandJoinPlan,oneof"`
}

type PRecordQueryPlan_RecordQueryIndexPlan struct {
	RecordQueryIndexPlan *PRecordQueryIndexPlan `protobuf:"bytes,11,opt,name=record_query_index_plan,json=recordQueryIndexPlan,oneof"`
}

type PRecordQueryPlan_InParameterJoinPlan struct {
	InParameterJoinPlan *PRecordQueryInParameterJoinPlan `protobuf:"bytes,12,opt,name=in_parameter_join_plan,json=inParameterJoinPlan,oneof"`
}

type PRecordQueryPlan_InsertPlan struct {
	InsertPlan *PRecordQueryInsertPlan `protobuf:"bytes,13,opt,name=insert_plan,json=insertPlan,oneof"`
}

type PRecordQueryPlan_IntersectionOnKeyExpressionPlan struct {
	IntersectionOnKeyExpressionPlan *PRecordQueryIntersectionOnKeyExpressionPlan `protobuf:"bytes,14,opt,name=intersection_on_key_expression_plan,json=intersectionOnKeyExpressionPlan,oneof"`
}

type PRecordQueryPlan_IntersectionOnValuesPlan struct {
	IntersectionOnValuesPlan *PRecordQueryIntersectionOnValuesPlan `protobuf:"bytes,15,opt,name=intersection_on_values_plan,json=intersectionOnValuesPlan,oneof"`
}

type PRecordQueryPlan_InUnionOnKeyExpressionPlan struct {
	InUnionOnKeyExpressionPlan *PRecordQueryInUnionOnKeyExpressionPlan `protobuf:"bytes,16,opt,name=in_union_on_key_expression_plan,json=inUnionOnKeyExpressionPlan,oneof"`
}

type PRecordQueryPlan_InUnionOnValuesPlan struct {
	InUnionOnValuesPlan *PRecordQueryInUnionOnValuesPlan `protobuf:"bytes,17,opt,name=in_union_on_values_plan,json=inUnionOnValuesPlan,oneof"`
}

type PRecordQueryPlan_InValuesJoinPlan struct {
	InValuesJoinPlan *PRecordQueryInValuesJoinPlan `protobuf:"bytes,18,opt,name=in_values_join_plan,json=inValuesJoinPlan,oneof"`
}

type PRecordQueryPlan_MapPlan struct {
	MapPlan *PRecordQueryMapPlan `protobuf:"bytes,19,opt,name=map_plan,json=mapPlan,oneof"`
}

type PRecordQueryPlan_PredicatesFilterPlan struct {
	PredicatesFilterPlan *PRecordQueryPredicatesFilterPlan `protobuf:"bytes,20,opt,name=predicates_filter_plan,json=predicatesFilterPlan,oneof"`
}

type PRecordQueryPlan_RangePlan struct {
	RangePlan *PRecordQueryRangePlan `protobuf:"bytes,21,opt,name=range_plan,json=rangePlan,oneof"`
}

type PRecordQueryPlan_ScanPlan struct {
	ScanPlan *PRecordQueryScanPlan `protobuf:"bytes,22,opt,name=scan_plan,json=scanPlan,oneof"`
}

type PRecordQueryPlan_ScoreForRankPlan struct {
	ScoreForRankPlan *PRecordQueryScoreForRankPlan `protobuf:"bytes,23,opt,name=score_for_rank_plan,json=scoreForRankPlan,oneof"`
}

type PRecordQueryPlan_SortPlan struct {
	SortPlan *PRecordQuerySortPlan `protobuf:"bytes,24,opt,name=sort_plan,json=sortPlan,oneof"`
}

type PRecordQueryPlan_StreamingAggregationPlan struct {
	StreamingAggregationPlan *PRecordQueryStreamingAggregationPlan `protobuf:"bytes,25,opt,name=streaming_aggregation_plan,json=streamingAggregationPlan,oneof"`
}

type PRecordQueryPlan_TypeFilterPlan struct {
	TypeFilterPlan *PRecordQueryTypeFilterPlan `protobuf:"bytes,26,opt,name=type_filter_plan,json=typeFilterPlan,oneof"`
}

type PRecordQueryPlan_UnionOnKeyExpressionPlan struct {
	UnionOnKeyExpressionPlan *PRecordQueryUnionOnKeyExpressionPlan `protobuf:"bytes,27,opt,name=union_on_key_expression_plan,json=unionOnKeyExpressionPlan,oneof"`
}

type PRecordQueryPlan_UnionOnValuesPlan struct {
	UnionOnValuesPlan *PRecordQueryUnionOnValuesPlan `protobuf:"bytes,28,opt,name=union_on_values_plan,json=unionOnValuesPlan,oneof"`
}

type PRecordQueryPlan_UnorderedDistinctPlan struct {
	UnorderedDistinctPlan *PRecordQueryUnorderedDistinctPlan `protobuf:"bytes,29,opt,name=unordered_distinct_plan,json=unorderedDistinctPlan,oneof"`
}

type PRecordQueryPlan_UnorderedPrimaryKeyDistinctPlan struct {
	UnorderedPrimaryKeyDistinctPlan *PRecordQueryUnorderedPrimaryKeyDistinctPlan `protobuf:"bytes,30,opt,name=unordered_primary_key_distinct_plan,json=unorderedPrimaryKeyDistinctPlan,oneof"`
}

type PRecordQueryPlan_UnorderedUnionPlan struct {
	UnorderedUnionPlan *PRecordQueryUnorderedUnionPlan `protobuf:"bytes,31,opt,name=unordered_union_plan,json=unorderedUnionPlan,oneof"`
}

type PRecordQueryPlan_UpdatePlan struct {
	UpdatePlan *PRecordQueryUpdatePlan `protobuf:"bytes,32,opt,name=update_plan,json=updatePlan,oneof"`
}

func (*PRecordQueryPlan_AdditionalPlans) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_AggregateIndexPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_CoveringIndexPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_DamPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_DeletePlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_ExplodePlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_FetchFromPartialRecordPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_FirstOrDefaultPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_FlatMapPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_InComparandJoinPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_RecordQueryIndexPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_InParameterJoinPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_InsertPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_IntersectionOnKeyExpressionPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_IntersectionOnValuesPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_InUnionOnKeyExpressionPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_InUnionOnValuesPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_InValuesJoinPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_MapPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_PredicatesFilterPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_RangePlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_ScanPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_ScoreForRankPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_SortPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_StreamingAggregationPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_TypeFilterPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_UnionOnKeyExpressionPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_UnionOnValuesPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_UnorderedDistinctPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_UnorderedPrimaryKeyDistinctPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_UnorderedUnionPlan) isPRecordQueryPlan_SpecificPlan() {}

func (*PRecordQueryPlan_UpdatePlan) isPRecordQueryPlan_SpecificPlan() {}

// PRecordQueryAbstractDataModificationPlan
type PRecordQueryAbstractDataModificationPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner                      *PPhysicalQuantifier     `protobuf:"bytes,1,opt,name=inner" json:"inner,omitempty"`
	TargetRecordType           *string                  `protobuf:"bytes,2,opt,name=target_record_type,json=targetRecordType" json:"target_record_type,omitempty"`
	TargetType                 *PType_PRecordType       `protobuf:"bytes,3,opt,name=target_type,json=targetType" json:"target_type,omitempty"`
	TransformationsTrie        *PTransformationTrieNode `protobuf:"bytes,4,opt,name=transformations_trie,json=transformationsTrie" json:"transformations_trie,omitempty"`
	CoercionTrie               *PCoercionTrieNode       `protobuf:"bytes,5,opt,name=coercion_trie,json=coercionTrie" json:"coercion_trie,omitempty"`
	ComputationValue           *PValue                  `protobuf:"bytes,6,opt,name=computation_value,json=computationValue" json:"computation_value,omitempty"`
	CurrentModifiedRecordAlias *string                  `protobuf:"bytes,7,opt,name=current_modified_record_alias,json=currentModifiedRecordAlias" json:"current_modified_record_alias,omitempty"`
}

func (x *PRecordQueryAbstractDataModificationPlan) Reset() {
	*x = PRecordQueryAbstractDataModificationPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryAbstractDataModificationPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryAbstractDataModificationPlan) ProtoMessage() {}

func (x *PRecordQueryAbstractDataModificationPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryAbstractDataModificationPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryAbstractDataModificationPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{81}
}

func (x *PRecordQueryAbstractDataModificationPlan) GetInner() *PPhysicalQuantifier {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *PRecordQueryAbstractDataModificationPlan) GetTargetRecordType() string {
	if x != nil && x.TargetRecordType != nil {
		return *x.TargetRecordType
	}
	return ""
}

func (x *PRecordQueryAbstractDataModificationPlan) GetTargetType() *PType_PRecordType {
	if x != nil {
		return x.TargetType
	}
	return nil
}

func (x *PRecordQueryAbstractDataModificationPlan) GetTransformationsTrie() *PTransformationTrieNode {
	if x != nil {
		return x.TransformationsTrie
	}
	return nil
}

func (x *PRecordQueryAbstractDataModificationPlan) GetCoercionTrie() *PCoercionTrieNode {
	if x != nil {
		return x.CoercionTrie
	}
	return nil
}

func (x *PRecordQueryAbstractDataModificationPlan) GetComputationValue() *PValue {
	if x != nil {
		return x.ComputationValue
	}
	return nil
}

func (x *PRecordQueryAbstractDataModificationPlan) GetCurrentModifiedRecordAlias() string {
	if x != nil && x.CurrentModifiedRecordAlias != nil {
		return *x.CurrentModifiedRecordAlias
	}
	return ""
}

// PRecordQueryAggregateIndexPlan
type PRecordQueryAggregateIndexPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexPlan      *PRecordQueryIndexPlan         `protobuf:"bytes,1,opt,name=index_plan,json=indexPlan" json:"index_plan,omitempty"`
	RecordTypeName *string                        `protobuf:"bytes,2,opt,name=record_type_name,json=recordTypeName" json:"record_type_name,omitempty"`
	ToRecord       *PIndexKeyValueToPartialRecord `protobuf:"bytes,3,opt,name=to_record,json=toRecord" json:"to_record,omitempty"`
	ResultValue    *PValue                        `protobuf:"bytes,4,opt,name=result_value,json=resultValue" json:"result_value,omitempty"`
	Constraint     *PQueryPlanConstraint          `protobuf:"bytes,5,opt,name=constraint" json:"constraint,omitempty"`
}

func (x *PRecordQueryAggregateIndexPlan) Reset() {
	*x = PRecordQueryAggregateIndexPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryAggregateIndexPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryAggregateIndexPlan) ProtoMessage() {}

func (x *PRecordQueryAggregateIndexPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryAggregateIndexPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryAggregateIndexPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{82}
}

func (x *PRecordQueryAggregateIndexPlan) GetIndexPlan() *PRecordQueryIndexPlan {
	if x != nil {
		return x.IndexPlan
	}
	return nil
}

func (x *PRecordQueryAggregateIndexPlan) GetRecordTypeName() string {
	if x != nil && x.RecordTypeName != nil {
		return *x.RecordTypeName
	}
	return ""
}

func (x *PRecordQueryAggregateIndexPlan) GetToRecord() *PIndexKeyValueToPartialRecord {
	if x != nil {
		return x.ToRecord
	}
	return nil
}

func (x *PRecordQueryAggregateIndexPlan) GetResultValue() *PValue {
	if x != nil {
		return x.ResultValue
	}
	return nil
}

func (x *PRecordQueryAggregateIndexPlan) GetConstraint() *PQueryPlanConstraint {
	if x != nil {
		return x.Constraint
	}
	return nil
}

// PRecordQueryCoveringIndexPlan
type PRecordQueryCoveringIndexPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexPlan      *PRecordQueryPlan              `protobuf:"bytes,1,opt,name=index_plan,json=indexPlan" json:"index_plan,omitempty"`
	RecordTypeName *string                        `protobuf:"bytes,2,opt,name=record_type_name,json=recordTypeName" json:"record_type_name,omitempty"`
	ToRecord       *PIndexKeyValueToPartialRecord `protobuf:"bytes,3,opt,name=to_record,json=toRecord" json:"to_record,omitempty"`
}

func (x *PRecordQueryCoveringIndexPlan) Reset() {
	*x = PRecordQueryCoveringIndexPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryCoveringIndexPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryCoveringIndexPlan) ProtoMessage() {}

func (x *PRecordQueryCoveringIndexPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryCoveringIndexPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryCoveringIndexPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{83}
}

func (x *PRecordQueryCoveringIndexPlan) GetIndexPlan() *PRecordQueryPlan {
	if x != nil {
		return x.IndexPlan
	}
	return nil
}

func (x *PRecordQueryCoveringIndexPlan) GetRecordTypeName() string {
	if x != nil && x.RecordTypeName != nil {
		return *x.RecordTypeName
	}
	return ""
}

func (x *PRecordQueryCoveringIndexPlan) GetToRecord() *PIndexKeyValueToPartialRecord {
	if x != nil {
		return x.ToRecord
	}
	return nil
}

type PIndexKeyValueToPartialRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Copiers    []*PIndexKeyValueToPartialRecord_PCopier `protobuf:"bytes,1,rep,name=copiers" json:"copiers,omitempty"`
	IsRequired *bool                                    `protobuf:"varint,2,opt,name=is_required,json=isRequired" json:"is_required,omitempty"`
}

func (x *PIndexKeyValueToPartialRecord) Reset() {
	*x = PIndexKeyValueToPartialRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PIndexKeyValueToPartialRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PIndexKeyValueToPartialRecord) ProtoMessage() {}

func (x *PIndexKeyValueToPartialRecord) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PIndexKeyValueToPartialRecord.ProtoReflect.Descriptor instead.
func (*PIndexKeyValueToPartialRecord) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{84}
}

func (x *PIndexKeyValueToPartialRecord) GetCopiers() []*PIndexKeyValueToPartialRecord_PCopier {
	if x != nil {
		return x.Copiers
	}
	return nil
}

func (x *PIndexKeyValueToPartialRecord) GetIsRequired() bool {
	if x != nil && x.IsRequired != nil {
		return *x.IsRequired
	}
	return false
}

// PRecordQueryDamPlan
type PRecordQueryDamPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner *PPhysicalQuantifier `protobuf:"bytes,1,opt,name=inner" json:"inner,omitempty"`
	Key   *PRecordQuerySortKey `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (x *PRecordQueryDamPlan) Reset() {
	*x = PRecordQueryDamPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryDamPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryDamPlan) ProtoMessage() {}

func (x *PRecordQueryDamPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryDamPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryDamPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{85}
}

func (x *PRecordQueryDamPlan) GetInner() *PPhysicalQuantifier {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *PRecordQueryDamPlan) GetKey() *PRecordQuerySortKey {
	if x != nil {
		return x.Key
	}
	return nil
}

// PRecordQueryDeletePlan
type PRecordQueryDeletePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner *PPhysicalQuantifier `protobuf:"bytes,1,opt,name=inner" json:"inner,omitempty"`
}

func (x *PRecordQueryDeletePlan) Reset() {
	*x = PRecordQueryDeletePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryDeletePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryDeletePlan) ProtoMessage() {}

func (x *PRecordQueryDeletePlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryDeletePlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryDeletePlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{86}
}

func (x *PRecordQueryDeletePlan) GetInner() *PPhysicalQuantifier {
	if x != nil {
		return x.Inner
	}
	return nil
}

// PRecordQueryExplodePlan
type PRecordQueryExplodePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionValue *PValue `protobuf:"bytes,1,opt,name=collection_value,json=collectionValue" json:"collection_value,omitempty"`
}

func (x *PRecordQueryExplodePlan) Reset() {
	*x = PRecordQueryExplodePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryExplodePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryExplodePlan) ProtoMessage() {}

func (x *PRecordQueryExplodePlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryExplodePlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryExplodePlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{87}
}

func (x *PRecordQueryExplodePlan) GetCollectionValue() *PValue {
	if x != nil {
		return x.CollectionValue
	}
	return nil
}

// PRecordQueryFetchFromPartialRecordPlan
type PRecordQueryFetchFromPartialRecordPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner             *PPhysicalQuantifier `protobuf:"bytes,1,opt,name=inner" json:"inner,omitempty"`
	ResultType        *PType               `protobuf:"bytes,2,opt,name=result_type,json=resultType" json:"result_type,omitempty"`
	FetchIndexRecords *PFetchIndexRecords  `protobuf:"varint,3,opt,name=fetch_index_records,json=fetchIndexRecords,enum=com.apple.foundationdb.record.PFetchIndexRecords" json:"fetch_index_records,omitempty"`
}

func (x *PRecordQueryFetchFromPartialRecordPlan) Reset() {
	*x = PRecordQueryFetchFromPartialRecordPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryFetchFromPartialRecordPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryFetchFromPartialRecordPlan) ProtoMessage() {}

func (x *PRecordQueryFetchFromPartialRecordPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryFetchFromPartialRecordPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryFetchFromPartialRecordPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{88}
}

func (x *PRecordQueryFetchFromPartialRecordPlan) GetInner() *PPhysicalQuantifier {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *PRecordQueryFetchFromPartialRecordPlan) GetResultType() *PType {
	if x != nil {
		return x.ResultType
	}
	return nil
}

func (x *PRecordQueryFetchFromPartialRecordPlan) GetFetchIndexRecords() PFetchIndexRecords {
	if x != nil && x.FetchIndexRecords != nil {
		return *x.FetchIndexRecords
	}
	return PFetchIndexRecords_PRIMARY_KEY
}

// PRecordQueryFilterPlanBase
type PRecordQueryFilterPlanBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner *PPhysicalQuantifier `protobuf:"bytes,1,opt,name=inner" json:"inner,omitempty"`
}

func (x *PRecordQueryFilterPlanBase) Reset() {
	*x = PRecordQueryFilterPlanBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryFilterPlanBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryFilterPlanBase) ProtoMessage() {}

func (x *PRecordQueryFilterPlanBase) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryFilterPlanBase.ProtoReflect.Descriptor instead.
func (*PRecordQueryFilterPlanBase) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{89}
}

func (x *PRecordQueryFilterPlanBase) GetInner() *PPhysicalQuantifier {
	if x != nil {
		return x.Inner
	}
	return nil
}

// PRecordQueryFirstOrDefaultPlan
type PRecordQueryFirstOrDefaultPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner              *PPhysicalQuantifier `protobuf:"bytes,1,opt,name=inner" json:"inner,omitempty"`
	OnEmptyResultValue *PValue              `protobuf:"bytes,2,opt,name=on_empty_result_value,json=onEmptyResultValue" json:"on_empty_result_value,omitempty"`
}

func (x *PRecordQueryFirstOrDefaultPlan) Reset() {
	*x = PRecordQueryFirstOrDefaultPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryFirstOrDefaultPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryFirstOrDefaultPlan) ProtoMessage() {}

func (x *PRecordQueryFirstOrDefaultPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryFirstOrDefaultPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryFirstOrDefaultPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{90}
}

func (x *PRecordQueryFirstOrDefaultPlan) GetInner() *PPhysicalQuantifier {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *PRecordQueryFirstOrDefaultPlan) GetOnEmptyResultValue() *PValue {
	if x != nil {
		return x.OnEmptyResultValue
	}
	return nil
}

// PRecordQueryFlatMapPlan
type PRecordQueryFlatMapPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OuterQuantifier              *PPhysicalQuantifier `protobuf:"bytes,1,opt,name=outer_quantifier,json=outerQuantifier" json:"outer_quantifier,omitempty"`
	InnerQuantifier              *PPhysicalQuantifier `protobuf:"bytes,2,opt,name=inner_quantifier,json=innerQuantifier" json:"inner_quantifier,omitempty"`
	ResultValue                  *PValue              `protobuf:"bytes,3,opt,name=result_value,json=resultValue" json:"result_value,omitempty"`
	InheritOuterRecordProperties *bool                `protobuf:"varint,4,opt,name=inherit_outer_record_properties,json=inheritOuterRecordProperties" json:"inherit_outer_record_properties,omitempty"`
}

func (x *PRecordQueryFlatMapPlan) Reset() {
	*x = PRecordQueryFlatMapPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryFlatMapPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryFlatMapPlan) ProtoMessage() {}

func (x *PRecordQueryFlatMapPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryFlatMapPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryFlatMapPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{91}
}

func (x *PRecordQueryFlatMapPlan) GetOuterQuantifier() *PPhysicalQuantifier {
	if x != nil {
		return x.OuterQuantifier
	}
	return nil
}

func (x *PRecordQueryFlatMapPlan) GetInnerQuantifier() *PPhysicalQuantifier {
	if x != nil {
		return x.InnerQuantifier
	}
	return nil
}

func (x *PRecordQueryFlatMapPlan) GetResultValue() *PValue {
	if x != nil {
		return x.ResultValue
	}
	return nil
}

func (x *PRecordQueryFlatMapPlan) GetInheritOuterRecordProperties() bool {
	if x != nil && x.InheritOuterRecordProperties != nil {
		return *x.InheritOuterRecordProperties
	}
	return false
}

// PRecordQueryIndexPlan
type PRecordQueryIndexPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName         *string               `protobuf:"bytes,1,opt,name=index_name,json=indexName" json:"index_name,omitempty"`
	CommonPrimaryKey  *KeyExpression        `protobuf:"bytes,2,opt,name=common_primary_key,json=commonPrimaryKey" json:"common_primary_key,omitempty"`
	ScanParameters    *PIndexScanParameters `protobuf:"bytes,3,opt,name=scan_parameters,json=scanParameters" json:"scan_parameters,omitempty"`
	IndexFetchMethod  *PIndexFetchMethod    `protobuf:"varint,4,opt,name=index_fetch_method,json=indexFetchMethod,enum=com.apple.foundationdb.record.PIndexFetchMethod" json:"index_fetch_method,omitempty"`
	FetchIndexRecords *PFetchIndexRecords   `protobuf:"varint,5,opt,name=fetch_index_records,json=fetchIndexRecords,enum=com.apple.foundationdb.record.PFetchIndexRecords" json:"fetch_index_records,omitempty"`
	Reverse           *bool                 `protobuf:"varint,6,opt,name=reverse" json:"reverse,omitempty"`
	StrictlySorted    *bool                 `protobuf:"varint,7,opt,name=strictly_sorted,json=strictlySorted" json:"strictly_sorted,omitempty"`
	ResultType        *PType                `protobuf:"bytes,8,opt,name=result_type,json=resultType" json:"result_type,omitempty"`
	Constraint        *PQueryPlanConstraint `protobuf:"bytes,9,opt,name=constraint" json:"constraint,omitempty"`
}

func (x *PRecordQueryIndexPlan) Reset() {
	*x = PRecordQueryIndexPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryIndexPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryIndexPlan) ProtoMessage() {}

func (x *PRecordQueryIndexPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryIndexPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryIndexPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{92}
}

func (x *PRecordQueryIndexPlan) GetIndexName() string {
	if x != nil && x.IndexName != nil {
		return *x.IndexName
	}
	return ""
}

func (x *PRecordQueryIndexPlan) GetCommonPrimaryKey() *KeyExpression {
	if x != nil {
		return x.CommonPrimaryKey
	}
	return nil
}

func (x *PRecordQueryIndexPlan) GetScanParameters() *PIndexScanParameters {
	if x != nil {
		return x.ScanParameters
	}
	return nil
}

func (x *PRecordQueryIndexPlan) GetIndexFetchMethod() PIndexFetchMethod {
	if x != nil && x.IndexFetchMethod != nil {
		return *x.IndexFetchMethod
	}
	return PIndexFetchMethod_SCAN_AND_FETCH
}

func (x *PRecordQueryIndexPlan) GetFetchIndexRecords() PFetchIndexRecords {
	if x != nil && x.FetchIndexRecords != nil {
		return *x.FetchIndexRecords
	}
	return PFetchIndexRecords_PRIMARY_KEY
}

func (x *PRecordQueryIndexPlan) GetReverse() bool {
	if x != nil && x.Reverse != nil {
		return *x.Reverse
	}
	return false
}

func (x *PRecordQueryIndexPlan) GetStrictlySorted() bool {
	if x != nil && x.StrictlySorted != nil {
		return *x.StrictlySorted
	}
	return false
}

func (x *PRecordQueryIndexPlan) GetResultType() *PType {
	if x != nil {
		return x.ResultType
	}
	return nil
}

func (x *PRecordQueryIndexPlan) GetConstraint() *PQueryPlanConstraint {
	if x != nil {
		return x.Constraint
	}
	return nil
}

type PIndexScanParameters struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Types that are assignable to SpecificIndexScanParameters:
	//
	//	*PIndexScanParameters_AdditionalIndexScanParameters
	//	*PIndexScanParameters_IndexScanComparisons
	//	*PIndexScanParameters_MultidimensionalIndexScanComparisons
	//	*PIndexScanParameters_TimeWindowScanComparisons
	SpecificIndexScanParameters isPIndexScanParameters_SpecificIndexScanParameters `protobuf_oneof:"specific_index_scan_parameters"`
}

func (x *PIndexScanParameters) Reset() {
	*x = PIndexScanParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PIndexScanParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PIndexScanParameters) ProtoMessage() {}

func (x *PIndexScanParameters) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PIndexScanParameters.ProtoReflect.Descriptor instead.
func (*PIndexScanParameters) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{93}
}

func (m *PIndexScanParameters) GetSpecificIndexScanParameters() isPIndexScanParameters_SpecificIndexScanParameters {
	if m != nil {
		return m.SpecificIndexScanParameters
	}
	return nil
}

func (x *PIndexScanParameters) GetAdditionalIndexScanParameters() *anypb.Any {
	if x, ok := x.GetSpecificIndexScanParameters().(*PIndexScanParameters_AdditionalIndexScanParameters); ok {
		return x.AdditionalIndexScanParameters
	}
	return nil
}

func (x *PIndexScanParameters) GetIndexScanComparisons() *PIndexScanComparisons {
	if x, ok := x.GetSpecificIndexScanParameters().(*PIndexScanParameters_IndexScanComparisons); ok {
		return x.IndexScanComparisons
	}
	return nil
}

func (x *PIndexScanParameters) GetMultidimensionalIndexScanComparisons() *PMultidimensionalIndexScanComparisons {
	if x, ok := x.GetSpecificIndexScanParameters().(*PIndexScanParameters_MultidimensionalIndexScanComparisons); ok {
		return x.MultidimensionalIndexScanComparisons
	}
	return nil
}

func (x *PIndexScanParameters) GetTimeWindowScanComparisons() *PTimeWindowScanComparisons {
	if x, ok := x.GetSpecificIndexScanParameters().(*PIndexScanParameters_TimeWindowScanComparisons); ok {
		return x.TimeWindowScanComparisons
	}
	return nil
}

type isPIndexScanParameters_SpecificIndexScanParameters interface {
	isPIndexScanParameters_SpecificIndexScanParameters()
}

type PIndexScanParameters_AdditionalIndexScanParameters struct {
	AdditionalIndexScanParameters *anypb.Any `protobuf:"bytes,1,opt,name=additional_index_scan_parameters,json=additionalIndexScanParameters,oneof"`
}

type PIndexScanParameters_IndexScanComparisons struct {
	IndexScanComparisons *PIndexScanComparisons `protobuf:"bytes,2,opt,name=index_scan_comparisons,json=indexScanComparisons,oneof"`
}

type PIndexScanParameters_MultidimensionalIndexScanComparisons struct {
	MultidimensionalIndexScanComparisons *PMultidimensionalIndexScanComparisons `protobuf:"bytes,3,opt,name=multidimensional_index_scan_comparisons,json=multidimensionalIndexScanComparisons,oneof"`
}

type PIndexScanParameters_TimeWindowScanComparisons struct {
	TimeWindowScanComparisons *PTimeWindowScanComparisons `protobuf:"bytes,4,opt,name=time_window_scan_comparisons,json=timeWindowScanComparisons,oneof"`
}

func (*PIndexScanParameters_AdditionalIndexScanParameters) isPIndexScanParameters_SpecificIndexScanParameters() {
}

func (*PIndexScanParameters_IndexScanComparisons) isPIndexScanParameters_SpecificIndexScanParameters() {
}

func (*PIndexScanParameters_MultidimensionalIndexScanComparisons) isPIndexScanParameters_SpecificIndexScanParameters() {
}

func (*PIndexScanParameters_TimeWindowScanComparisons) isPIndexScanParameters_SpecificIndexScanParameters() {
}

type PIndexScanType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *PIndexScanType) Reset() {
	*x = PIndexScanType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PIndexScanType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PIndexScanType) ProtoMessage() {}

func (x *PIndexScanType) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PIndexScanType.ProtoReflect.Descriptor instead.
func (*PIndexScanType) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{94}
}

func (x *PIndexScanType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type PScanComparisons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EqualityComparisons   []*PComparison `protobuf:"bytes,1,rep,name=equality_comparisons,json=equalityComparisons" json:"equality_comparisons,omitempty"`
	InequalityComparisons []*PComparison `protobuf:"bytes,2,rep,name=inequality_comparisons,json=inequalityComparisons" json:"inequality_comparisons,omitempty"`
}

func (x *PScanComparisons) Reset() {
	*x = PScanComparisons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PScanComparisons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PScanComparisons) ProtoMessage() {}

func (x *PScanComparisons) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PScanComparisons.ProtoReflect.Descriptor instead.
func (*PScanComparisons) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{95}
}

func (x *PScanComparisons) GetEqualityComparisons() []*PComparison {
	if x != nil {
		return x.EqualityComparisons
	}
	return nil
}

func (x *PScanComparisons) GetInequalityComparisons() []*PComparison {
	if x != nil {
		return x.InequalityComparisons
	}
	return nil
}

type PIndexScanComparisons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanType        *PIndexScanType   `protobuf:"bytes,1,opt,name=scan_type,json=scanType" json:"scan_type,omitempty"`
	ScanComparisons *PScanComparisons `protobuf:"bytes,2,opt,name=scan_comparisons,json=scanComparisons" json:"scan_comparisons,omitempty"`
}

func (x *PIndexScanComparisons) Reset() {
	*x = PIndexScanComparisons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PIndexScanComparisons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PIndexScanComparisons) ProtoMessage() {}

func (x *PIndexScanComparisons) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PIndexScanComparisons.ProtoReflect.Descriptor instead.
func (*PIndexScanComparisons) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{96}
}

func (x *PIndexScanComparisons) GetScanType() *PIndexScanType {
	if x != nil {
		return x.ScanType
	}
	return nil
}

func (x *PIndexScanComparisons) GetScanComparisons() *PScanComparisons {
	if x != nil {
		return x.ScanComparisons
	}
	return nil
}

type PMultidimensionalIndexScanComparisons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixScanComparisons     *PScanComparisons   `protobuf:"bytes,1,opt,name=prefix_scan_comparisons,json=prefixScanComparisons" json:"prefix_scan_comparisons,omitempty"`
	DimensionsScanComparisons []*PScanComparisons `protobuf:"bytes,2,rep,name=dimensions_scan_comparisons,json=dimensionsScanComparisons" json:"dimensions_scan_comparisons,omitempty"`
	SuffixScanComparisons     *PScanComparisons   `protobuf:"bytes,3,opt,name=suffix_scan_comparisons,json=suffixScanComparisons" json:"suffix_scan_comparisons,omitempty"`
}

func (x *PMultidimensionalIndexScanComparisons) Reset() {
	*x = PMultidimensionalIndexScanComparisons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PMultidimensionalIndexScanComparisons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PMultidimensionalIndexScanComparisons) ProtoMessage() {}

func (x *PMultidimensionalIndexScanComparisons) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PMultidimensionalIndexScanComparisons.ProtoReflect.Descriptor instead.
func (*PMultidimensionalIndexScanComparisons) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{97}
}

func (x *PMultidimensionalIndexScanComparisons) GetPrefixScanComparisons() *PScanComparisons {
	if x != nil {
		return x.PrefixScanComparisons
	}
	return nil
}

func (x *PMultidimensionalIndexScanComparisons) GetDimensionsScanComparisons() []*PScanComparisons {
	if x != nil {
		return x.DimensionsScanComparisons
	}
	return nil
}

func (x *PMultidimensionalIndexScanComparisons) GetSuffixScanComparisons() *PScanComparisons {
	if x != nil {
		return x.SuffixScanComparisons
	}
	return nil
}

type PTimeWindowForFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderboardType               *int32  `protobuf:"varint,1,opt,name=leaderboard_type,json=leaderboardType" json:"leaderboard_type,omitempty"`
	LeaderboardTimestamp          *int64  `protobuf:"varint,2,opt,name=leaderboard_timestamp,json=leaderboardTimestamp" json:"leaderboard_timestamp,omitempty"`
	LeaderboardTypeParameter      *string `protobuf:"bytes,3,opt,name=leaderboard_type_parameter,json=leaderboardTypeParameter" json:"leaderboard_type_parameter,omitempty"`
	LeaderboardTimestampParameter *string `protobuf:"bytes,4,opt,name=leaderboard_timestamp_parameter,json=leaderboardTimestampParameter" json:"leaderboard_timestamp_parameter,omitempty"`
}

func (x *PTimeWindowForFunction) Reset() {
	*x = PTimeWindowForFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PTimeWindowForFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PTimeWindowForFunction) ProtoMessage() {}

func (x *PTimeWindowForFunction) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PTimeWindowForFunction.ProtoReflect.Descriptor instead.
func (*PTimeWindowForFunction) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{98}
}

func (x *PTimeWindowForFunction) GetLeaderboardType() int32 {
	if x != nil && x.LeaderboardType != nil {
		return *x.LeaderboardType
	}
	return 0
}

func (x *PTimeWindowForFunction) GetLeaderboardTimestamp() int64 {
	if x != nil && x.LeaderboardTimestamp != nil {
		return *x.LeaderboardTimestamp
	}
	return 0
}

func (x *PTimeWindowForFunction) GetLeaderboardTypeParameter() string {
	if x != nil && x.LeaderboardTypeParameter != nil {
		return *x.LeaderboardTypeParameter
	}
	return ""
}

func (x *PTimeWindowForFunction) GetLeaderboardTimestampParameter() string {
	if x != nil && x.LeaderboardTimestampParameter != nil {
		return *x.LeaderboardTimestampParameter
	}
	return ""
}

type PTimeWindowScanComparisons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *PIndexScanComparisons  `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	TimeWindow *PTimeWindowForFunction `protobuf:"bytes,2,opt,name=time_window,json=timeWindow" json:"time_window,omitempty"`
}

func (x *PTimeWindowScanComparisons) Reset() {
	*x = PTimeWindowScanComparisons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PTimeWindowScanComparisons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PTimeWindowScanComparisons) ProtoMessage() {}

func (x *PTimeWindowScanComparisons) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PTimeWindowScanComparisons.ProtoReflect.Descriptor instead.
func (*PTimeWindowScanComparisons) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{99}
}

func (x *PTimeWindowScanComparisons) GetSuper() *PIndexScanComparisons {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PTimeWindowScanComparisons) GetTimeWindow() *PTimeWindowForFunction {
	if x != nil {
		return x.TimeWindow
	}
	return nil
}

type PQueryPlanConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predicate *PQueryPredicate `protobuf:"bytes,1,opt,name=predicate" json:"predicate,omitempty"`
}

func (x *PQueryPlanConstraint) Reset() {
	*x = PQueryPlanConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PQueryPlanConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PQueryPlanConstraint) ProtoMessage() {}

func (x *PQueryPlanConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PQueryPlanConstraint.ProtoReflect.Descriptor instead.
func (*PQueryPlanConstraint) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{100}
}

func (x *PQueryPlanConstraint) GetPredicate() *PQueryPredicate {
	if x != nil {
		return x.Predicate
	}
	return nil
}

// PRecordQueryInComparandJoinPlan
type PRecordQueryInComparandJoinPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PRecordQueryInJoinPlan `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *PRecordQueryInComparandJoinPlan) Reset() {
	*x = PRecordQueryInComparandJoinPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryInComparandJoinPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryInComparandJoinPlan) ProtoMessage() {}

func (x *PRecordQueryInComparandJoinPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryInComparandJoinPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryInComparandJoinPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{101}
}

func (x *PRecordQueryInComparandJoinPlan) GetSuper() *PRecordQueryInJoinPlan {
	if x != nil {
		return x.Super
	}
	return nil
}

// PRecordQueryInJoinPlan
type PRecordQueryInJoinPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhysicalQuantifier *PPhysicalQuantifier               `protobuf:"bytes,1,opt,name=physical_quantifier,json=physicalQuantifier" json:"physical_quantifier,omitempty"`
	InSource           *PInSource                         `protobuf:"bytes,2,opt,name=in_source,json=inSource" json:"in_source,omitempty"`
	Internal           *PParameterComparison_PBindingKind `protobuf:"varint,3,opt,name=internal,enum=com.apple.foundationdb.record.PParameterComparison_PBindingKind" json:"internal,omitempty"`
}

func (x *PRecordQueryInJoinPlan) Reset() {
	*x = PRecordQueryInJoinPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryInJoinPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryInJoinPlan) ProtoMessage() {}

func (x *PRecordQueryInJoinPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryInJoinPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryInJoinPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{102}
}

func (x *PRecordQueryInJoinPlan) GetPhysicalQuantifier() *PPhysicalQuantifier {
	if x != nil {
		return x.PhysicalQuantifier
	}
	return nil
}

func (x *PRecordQueryInJoinPlan) GetInSource() *PInSource {
	if x != nil {
		return x.InSource
	}
	return nil
}

func (x *PRecordQueryInJoinPlan) GetInternal() PParameterComparison_PBindingKind {
	if x != nil && x.Internal != nil {
		return *x.Internal
	}
	return PParameterComparison_IN
}

type PInSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SpecificInSource:
	//
	//	*PInSource_InComparandSource
	//	*PInSource_SortedInComparandSource
	//	*PInSource_InParameterSource
	//	*PInSource_SortedInParameterSource
	//	*PInSource_InValuesSource
	//	*PInSource_SortedInValuesSource
	SpecificInSource isPInSource_SpecificInSource `protobuf_oneof:"specific_in_source"`
}

func (x *PInSource) Reset() {
	*x = PInSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PInSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PInSource) ProtoMessage() {}

func (x *PInSource) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PInSource.ProtoReflect.Descriptor instead.
func (*PInSource) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{103}
}

func (m *PInSource) GetSpecificInSource() isPInSource_SpecificInSource {
	if m != nil {
		return m.SpecificInSource
	}
	return nil
}

func (x *PInSource) GetInComparandSource() *PInComparandSource {
	if x, ok := x.GetSpecificInSource().(*PInSource_InComparandSource); ok {
		return x.InComparandSource
	}
	return nil
}

func (x *PInSource) GetSortedInComparandSource() *PSortedInComparandSource {
	if x, ok := x.GetSpecificInSource().(*PInSource_SortedInComparandSource); ok {
		return x.SortedInComparandSource
	}
	return nil
}

func (x *PInSource) GetInParameterSource() *PInParameterSource {
	if x, ok := x.GetSpecificInSource().(*PInSource_InParameterSource); ok {
		return x.InParameterSource
	}
	return nil
}

func (x *PInSource) GetSortedInParameterSource() *PSortedInParameterSource {
	if x, ok := x.GetSpecificInSource().(*PInSource_SortedInParameterSource); ok {
		return x.SortedInParameterSource
	}
	return nil
}

func (x *PInSource) GetInValuesSource() *PInValuesSource {
	if x, ok := x.GetSpecificInSource().(*PInSource_InValuesSource); ok {
		return x.InValuesSource
	}
	return nil
}

func (x *PInSource) GetSortedInValuesSource() *PSortedInValuesSource {
	if x, ok := x.GetSpecificInSource().(*PInSource_SortedInValuesSource); ok {
		return x.SortedInValuesSource
	}
	return nil
}

type isPInSource_SpecificInSource interface {
	isPInSource_SpecificInSource()
}

type PInSource_InComparandSource struct {
	InComparandSource *PInComparandSource `protobuf:"bytes,1,opt,name=in_comparand_source,json=inComparandSource,oneof"`
}

type PInSource_SortedInComparandSource struct {
	SortedInComparandSource *PSortedInComparandSource `protobuf:"bytes,2,opt,name=sorted_in_comparand_source,json=sortedInComparandSource,oneof"`
}

type PInSource_InParameterSource struct {
	InParameterSource *PInParameterSource `protobuf:"bytes,3,opt,name=in_parameter_source,json=inParameterSource,oneof"`
}

type PInSource_SortedInParameterSource struct {
	SortedInParameterSource *PSortedInParameterSource `protobuf:"bytes,4,opt,name=sorted_in_parameter_source,json=sortedInParameterSource,oneof"`
}

type PInSource_InValuesSource struct {
	InValuesSource *PInValuesSource `protobuf:"bytes,5,opt,name=in_values_source,json=inValuesSource,oneof"`
}

type PInSource_SortedInValuesSource struct {
	SortedInValuesSource *PSortedInValuesSource `protobuf:"bytes,6,opt,name=sorted_in_values_source,json=sortedInValuesSource,oneof"`
}

func (*PInSource_InComparandSource) isPInSource_SpecificInSource() {}

func (*PInSource_SortedInComparandSource) isPInSource_SpecificInSource() {}

func (*PInSource_InParameterSource) isPInSource_SpecificInSource() {}

func (*PInSource_SortedInParameterSource) isPInSource_SpecificInSource() {}

func (*PInSource_InValuesSource) isPInSource_SpecificInSource() {}

func (*PInSource_SortedInValuesSource) isPInSource_SpecificInSource() {}

type PInComparandSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *PInSource_Super `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Comparison *PComparison     `protobuf:"bytes,2,opt,name=comparison" json:"comparison,omitempty"`
}

func (x *PInComparandSource) Reset() {
	*x = PInComparandSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PInComparandSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PInComparandSource) ProtoMessage() {}

func (x *PInComparandSource) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PInComparandSource.ProtoReflect.Descriptor instead.
func (*PInComparandSource) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{104}
}

func (x *PInComparandSource) GetSuper() *PInSource_Super {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PInComparandSource) GetComparison() *PComparison {
	if x != nil {
		return x.Comparison
	}
	return nil
}

type PSortedInComparandSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super   *PInComparandSource `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Reverse *bool               `protobuf:"varint,2,opt,name=reverse" json:"reverse,omitempty"`
}

func (x *PSortedInComparandSource) Reset() {
	*x = PSortedInComparandSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PSortedInComparandSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSortedInComparandSource) ProtoMessage() {}

func (x *PSortedInComparandSource) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSortedInComparandSource.ProtoReflect.Descriptor instead.
func (*PSortedInComparandSource) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{105}
}

func (x *PSortedInComparandSource) GetSuper() *PInComparandSource {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PSortedInComparandSource) GetReverse() bool {
	if x != nil && x.Reverse != nil {
		return *x.Reverse
	}
	return false
}

type PInParameterSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *PInSource_Super `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	ParameterName *string          `protobuf:"bytes,2,opt,name=parameter_name,json=parameterName" json:"parameter_name,omitempty"`
}

func (x *PInParameterSource) Reset() {
	*x = PInParameterSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PInParameterSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PInParameterSource) ProtoMessage() {}

func (x *PInParameterSource) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PInParameterSource.ProtoReflect.Descriptor instead.
func (*PInParameterSource) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{106}
}

func (x *PInParameterSource) GetSuper() *PInSource_Super {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PInParameterSource) GetParameterName() string {
	if x != nil && x.ParameterName != nil {
		return *x.ParameterName
	}
	return ""
}

type PSortedInParameterSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super   *PInParameterSource `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Reverse *bool               `protobuf:"varint,2,opt,name=reverse" json:"reverse,omitempty"`
}

func (x *PSortedInParameterSource) Reset() {
	*x = PSortedInParameterSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PSortedInParameterSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSortedInParameterSource) ProtoMessage() {}

func (x *PSortedInParameterSource) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSortedInParameterSource.ProtoReflect.Descriptor instead.
func (*PSortedInParameterSource) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{107}
}

func (x *PSortedInParameterSource) GetSuper() *PInParameterSource {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PSortedInParameterSource) GetReverse() bool {
	if x != nil && x.Reverse != nil {
		return *x.Reverse
	}
	return false
}

type PInValuesSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super  *PInSource_Super     `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Values []*PComparableObject `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
}

func (x *PInValuesSource) Reset() {
	*x = PInValuesSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PInValuesSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PInValuesSource) ProtoMessage() {}

func (x *PInValuesSource) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PInValuesSource.ProtoReflect.Descriptor instead.
func (*PInValuesSource) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{108}
}

func (x *PInValuesSource) GetSuper() *PInSource_Super {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PInValuesSource) GetValues() []*PComparableObject {
	if x != nil {
		return x.Values
	}
	return nil
}

type PSortedInValuesSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super   *PInValuesSource `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Reverse *bool            `protobuf:"varint,2,opt,name=reverse" json:"reverse,omitempty"`
}

func (x *PSortedInValuesSource) Reset() {
	*x = PSortedInValuesSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PSortedInValuesSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSortedInValuesSource) ProtoMessage() {}

func (x *PSortedInValuesSource) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSortedInValuesSource.ProtoReflect.Descriptor instead.
func (*PSortedInValuesSource) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{109}
}

func (x *PSortedInValuesSource) GetSuper() *PInValuesSource {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PSortedInValuesSource) GetReverse() bool {
	if x != nil && x.Reverse != nil {
		return *x.Reverse
	}
	return false
}

// PRecordQueryInParameterJoinPlan
type PRecordQueryInParameterJoinPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PRecordQueryInJoinPlan `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *PRecordQueryInParameterJoinPlan) Reset() {
	*x = PRecordQueryInParameterJoinPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryInParameterJoinPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryInParameterJoinPlan) ProtoMessage() {}

func (x *PRecordQueryInParameterJoinPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryInParameterJoinPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryInParameterJoinPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{110}
}

func (x *PRecordQueryInParameterJoinPlan) GetSuper() *PRecordQueryInJoinPlan {
	if x != nil {
		return x.Super
	}
	return nil
}

// PRecordQueryInsertPlan
type PRecordQueryInsertPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PRecordQueryAbstractDataModificationPlan `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *PRecordQueryInsertPlan) Reset() {
	*x = PRecordQueryInsertPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryInsertPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryInsertPlan) ProtoMessage() {}

func (x *PRecordQueryInsertPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryInsertPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryInsertPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{111}
}

func (x *PRecordQueryInsertPlan) GetSuper() *PRecordQueryAbstractDataModificationPlan {
	if x != nil {
		return x.Super
	}
	return nil
}

// PRecordQueryIntersectionPlan
type PRecordQueryIntersectionPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quantifiers           []*PPhysicalQuantifier  `protobuf:"bytes,1,rep,name=quantifiers" json:"quantifiers,omitempty"`
	ComparisonKeyFunction *PComparisonKeyFunction `protobuf:"bytes,2,opt,name=comparison_key_function,json=comparisonKeyFunction" json:"comparison_key_function,omitempty"`
	Reverse               *bool                   `protobuf:"varint,3,opt,name=reverse" json:"reverse,omitempty"`
}

func (x *PRecordQueryIntersectionPlan) Reset() {
	*x = PRecordQueryIntersectionPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryIntersectionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryIntersectionPlan) ProtoMessage() {}

func (x *PRecordQueryIntersectionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryIntersectionPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryIntersectionPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{112}
}

func (x *PRecordQueryIntersectionPlan) GetQuantifiers() []*PPhysicalQuantifier {
	if x != nil {
		return x.Quantifiers
	}
	return nil
}

func (x *PRecordQueryIntersectionPlan) GetComparisonKeyFunction() *PComparisonKeyFunction {
	if x != nil {
		return x.ComparisonKeyFunction
	}
	return nil
}

func (x *PRecordQueryIntersectionPlan) GetReverse() bool {
	if x != nil && x.Reverse != nil {
		return *x.Reverse
	}
	return false
}

type PComparisonKeyFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SpecificComparisonKeyFunction:
	//
	//	*PComparisonKeyFunction_OnKeyExpression
	//	*PComparisonKeyFunction_OnValues
	SpecificComparisonKeyFunction isPComparisonKeyFunction_SpecificComparisonKeyFunction `protobuf_oneof:"specific_comparison_key_function"`
}

func (x *PComparisonKeyFunction) Reset() {
	*x = PComparisonKeyFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PComparisonKeyFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PComparisonKeyFunction) ProtoMessage() {}

func (x *PComparisonKeyFunction) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PComparisonKeyFunction.ProtoReflect.Descriptor instead.
func (*PComparisonKeyFunction) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{113}
}

func (m *PComparisonKeyFunction) GetSpecificComparisonKeyFunction() isPComparisonKeyFunction_SpecificComparisonKeyFunction {
	if m != nil {
		return m.SpecificComparisonKeyFunction
	}
	return nil
}

func (x *PComparisonKeyFunction) GetOnKeyExpression() *PComparisonKeyFunction_POnKeyExpression {
	if x, ok := x.GetSpecificComparisonKeyFunction().(*PComparisonKeyFunction_OnKeyExpression); ok {
		return x.OnKeyExpression
	}
	return nil
}

func (x *PComparisonKeyFunction) GetOnValues() *PComparisonKeyFunction_POnValues {
	if x, ok := x.GetSpecificComparisonKeyFunction().(*PComparisonKeyFunction_OnValues); ok {
		return x.OnValues
	}
	return nil
}

type isPComparisonKeyFunction_SpecificComparisonKeyFunction interface {
	isPComparisonKeyFunction_SpecificComparisonKeyFunction()
}

type PComparisonKeyFunction_OnKeyExpression struct {
	OnKeyExpression *PComparisonKeyFunction_POnKeyExpression `protobuf:"bytes,1,opt,name=on_key_expression,json=onKeyExpression,oneof"`
}

type PComparisonKeyFunction_OnValues struct {
	OnValues *PComparisonKeyFunction_POnValues `protobuf:"bytes,2,opt,name=on_values,json=onValues,oneof"`
}

func (*PComparisonKeyFunction_OnKeyExpression) isPComparisonKeyFunction_SpecificComparisonKeyFunction() {
}

func (*PComparisonKeyFunction_OnValues) isPComparisonKeyFunction_SpecificComparisonKeyFunction() {}

// PRecordQueryIntersectionOnKeyExpressionPlan
type PRecordQueryIntersectionOnKeyExpressionPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PRecordQueryIntersectionPlan `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *PRecordQueryIntersectionOnKeyExpressionPlan) Reset() {
	*x = PRecordQueryIntersectionOnKeyExpressionPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryIntersectionOnKeyExpressionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryIntersectionOnKeyExpressionPlan) ProtoMessage() {}

func (x *PRecordQueryIntersectionOnKeyExpressionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryIntersectionOnKeyExpressionPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryIntersectionOnKeyExpressionPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{114}
}

func (x *PRecordQueryIntersectionOnKeyExpressionPlan) GetSuper() *PRecordQueryIntersectionPlan {
	if x != nil {
		return x.Super
	}
	return nil
}

// PRecordQueryIntersectionOnValuesPlan
type PRecordQueryIntersectionOnValuesPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PRecordQueryIntersectionPlan `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *PRecordQueryIntersectionOnValuesPlan) Reset() {
	*x = PRecordQueryIntersectionOnValuesPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryIntersectionOnValuesPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryIntersectionOnValuesPlan) ProtoMessage() {}

func (x *PRecordQueryIntersectionOnValuesPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryIntersectionOnValuesPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryIntersectionOnValuesPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{115}
}

func (x *PRecordQueryIntersectionOnValuesPlan) GetSuper() *PRecordQueryIntersectionPlan {
	if x != nil {
		return x.Super
	}
	return nil
}

// PRecordQueryInUnionPlan
type PRecordQueryInUnionPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner                    *PPhysicalQuantifier               `protobuf:"bytes,1,opt,name=inner" json:"inner,omitempty"`
	InSources                []*PInSource                       `protobuf:"bytes,2,rep,name=in_sources,json=inSources" json:"in_sources,omitempty"`
	ComparisonKeyFunction    *PComparisonKeyFunction            `protobuf:"bytes,3,opt,name=comparison_key_function,json=comparisonKeyFunction" json:"comparison_key_function,omitempty"`
	Reverse                  *bool                              `protobuf:"varint,4,opt,name=reverse" json:"reverse,omitempty"`
	MaxNumberOfValuesAllowed *int32                             `protobuf:"varint,5,opt,name=max_number_of_values_allowed,json=maxNumberOfValuesAllowed" json:"max_number_of_values_allowed,omitempty"`
	Internal                 *PParameterComparison_PBindingKind `protobuf:"varint,6,opt,name=internal,enum=com.apple.foundationdb.record.PParameterComparison_PBindingKind" json:"internal,omitempty"`
}

func (x *PRecordQueryInUnionPlan) Reset() {
	*x = PRecordQueryInUnionPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryInUnionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryInUnionPlan) ProtoMessage() {}

func (x *PRecordQueryInUnionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryInUnionPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryInUnionPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{116}
}

func (x *PRecordQueryInUnionPlan) GetInner() *PPhysicalQuantifier {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *PRecordQueryInUnionPlan) GetInSources() []*PInSource {
	if x != nil {
		return x.InSources
	}
	return nil
}

func (x *PRecordQueryInUnionPlan) GetComparisonKeyFunction() *PComparisonKeyFunction {
	if x != nil {
		return x.ComparisonKeyFunction
	}
	return nil
}

func (x *PRecordQueryInUnionPlan) GetReverse() bool {
	if x != nil && x.Reverse != nil {
		return *x.Reverse
	}
	return false
}

func (x *PRecordQueryInUnionPlan) GetMaxNumberOfValuesAllowed() int32 {
	if x != nil && x.MaxNumberOfValuesAllowed != nil {
		return *x.MaxNumberOfValuesAllowed
	}
	return 0
}

func (x *PRecordQueryInUnionPlan) GetInternal() PParameterComparison_PBindingKind {
	if x != nil && x.Internal != nil {
		return *x.Internal
	}
	return PParameterComparison_IN
}

// PRecordQueryInUnionOnKeyExpressionPlan
type PRecordQueryInUnionOnKeyExpressionPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PRecordQueryInUnionPlan `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *PRecordQueryInUnionOnKeyExpressionPlan) Reset() {
	*x = PRecordQueryInUnionOnKeyExpressionPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryInUnionOnKeyExpressionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryInUnionOnKeyExpressionPlan) ProtoMessage() {}

func (x *PRecordQueryInUnionOnKeyExpressionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryInUnionOnKeyExpressionPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryInUnionOnKeyExpressionPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{117}
}

func (x *PRecordQueryInUnionOnKeyExpressionPlan) GetSuper() *PRecordQueryInUnionPlan {
	if x != nil {
		return x.Super
	}
	return nil
}

// PRecordQueryInUnionOnValuesPlan
type PRecordQueryInUnionOnValuesPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PRecordQueryInUnionPlan `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *PRecordQueryInUnionOnValuesPlan) Reset() {
	*x = PRecordQueryInUnionOnValuesPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryInUnionOnValuesPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryInUnionOnValuesPlan) ProtoMessage() {}

func (x *PRecordQueryInUnionOnValuesPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryInUnionOnValuesPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryInUnionOnValuesPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{118}
}

func (x *PRecordQueryInUnionOnValuesPlan) GetSuper() *PRecordQueryInUnionPlan {
	if x != nil {
		return x.Super
	}
	return nil
}

// PRecordQueryInValuesJoinPlan
type PRecordQueryInValuesJoinPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PRecordQueryInJoinPlan `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *PRecordQueryInValuesJoinPlan) Reset() {
	*x = PRecordQueryInValuesJoinPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryInValuesJoinPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryInValuesJoinPlan) ProtoMessage() {}

func (x *PRecordQueryInValuesJoinPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryInValuesJoinPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryInValuesJoinPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{119}
}

func (x *PRecordQueryInValuesJoinPlan) GetSuper() *PRecordQueryInJoinPlan {
	if x != nil {
		return x.Super
	}
	return nil
}

// PRecordQueryMapPlan
type PRecordQueryMapPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner       *PPhysicalQuantifier `protobuf:"bytes,1,opt,name=inner" json:"inner,omitempty"`
	ResultValue *PValue              `protobuf:"bytes,2,opt,name=result_value,json=resultValue" json:"result_value,omitempty"`
}

func (x *PRecordQueryMapPlan) Reset() {
	*x = PRecordQueryMapPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryMapPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryMapPlan) ProtoMessage() {}

func (x *PRecordQueryMapPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryMapPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryMapPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{120}
}

func (x *PRecordQueryMapPlan) GetInner() *PPhysicalQuantifier {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *PRecordQueryMapPlan) GetResultValue() *PValue {
	if x != nil {
		return x.ResultValue
	}
	return nil
}

// PRecordQueryPredicatesFilterPlan
type PRecordQueryPredicatesFilterPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *PRecordQueryFilterPlanBase `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Predicates []*PQueryPredicate          `protobuf:"bytes,2,rep,name=predicates" json:"predicates,omitempty"`
}

func (x *PRecordQueryPredicatesFilterPlan) Reset() {
	*x = PRecordQueryPredicatesFilterPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryPredicatesFilterPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryPredicatesFilterPlan) ProtoMessage() {}

func (x *PRecordQueryPredicatesFilterPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryPredicatesFilterPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryPredicatesFilterPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{121}
}

func (x *PRecordQueryPredicatesFilterPlan) GetSuper() *PRecordQueryFilterPlanBase {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PRecordQueryPredicatesFilterPlan) GetPredicates() []*PQueryPredicate {
	if x != nil {
		return x.Predicates
	}
	return nil
}

// PRecordQueryRangePlan
type PRecordQueryRangePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExclusiveLimitValue *PValue `protobuf:"bytes,1,opt,name=exclusive_limit_value,json=exclusiveLimitValue" json:"exclusive_limit_value,omitempty"`
}

func (x *PRecordQueryRangePlan) Reset() {
	*x = PRecordQueryRangePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryRangePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryRangePlan) ProtoMessage() {}

func (x *PRecordQueryRangePlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryRangePlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryRangePlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{122}
}

func (x *PRecordQueryRangePlan) GetExclusiveLimitValue() *PValue {
	if x != nil {
		return x.ExclusiveLimitValue
	}
	return nil
}

// PRecordQuerySortPlan
type PRecordQuerySortPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner *PPhysicalQuantifier `protobuf:"bytes,1,opt,name=inner" json:"inner,omitempty"`
	Key   *PRecordQuerySortKey `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (x *PRecordQuerySortPlan) Reset() {
	*x = PRecordQuerySortPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQuerySortPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQuerySortPlan) ProtoMessage() {}

func (x *PRecordQuerySortPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQuerySortPlan.ProtoReflect.Descriptor instead.
func (*PRecordQuerySortPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{123}
}

func (x *PRecordQuerySortPlan) GetInner() *PPhysicalQuantifier {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *PRecordQuerySortPlan) GetKey() *PRecordQuerySortKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type PRecordQuerySortKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     *KeyExpression `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Reverse *bool          `protobuf:"varint,2,opt,name=reverse" json:"reverse,omitempty"`
}

func (x *PRecordQuerySortKey) Reset() {
	*x = PRecordQuerySortKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQuerySortKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQuerySortKey) ProtoMessage() {}

func (x *PRecordQuerySortKey) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQuerySortKey.ProtoReflect.Descriptor instead.
func (*PRecordQuerySortKey) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{124}
}

func (x *PRecordQuerySortKey) GetKey() *KeyExpression {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PRecordQuerySortKey) GetReverse() bool {
	if x != nil && x.Reverse != nil {
		return *x.Reverse
	}
	return false
}

// PRecordQueryScanPlan
type PRecordQueryScanPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasRecordTypes   *bool             `protobuf:"varint,1,opt,name=has_record_types,json=hasRecordTypes" json:"has_record_types,omitempty"`
	RecordTypes      []string          `protobuf:"bytes,2,rep,name=record_types,json=recordTypes" json:"record_types,omitempty"`
	FlowedType       *PType            `protobuf:"bytes,3,opt,name=flowed_type,json=flowedType" json:"flowed_type,omitempty"`
	CommonPrimaryKey *KeyExpression    `protobuf:"bytes,4,opt,name=common_primary_key,json=commonPrimaryKey" json:"common_primary_key,omitempty"`
	Comparisons      *PScanComparisons `protobuf:"bytes,5,opt,name=comparisons" json:"comparisons,omitempty"`
	Reverse          *bool             `protobuf:"varint,6,opt,name=reverse" json:"reverse,omitempty"`
	StrictlySorted   *bool             `protobuf:"varint,7,opt,name=strictly_sorted,json=strictlySorted" json:"strictly_sorted,omitempty"`
}

func (x *PRecordQueryScanPlan) Reset() {
	*x = PRecordQueryScanPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryScanPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryScanPlan) ProtoMessage() {}

func (x *PRecordQueryScanPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryScanPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryScanPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{125}
}

func (x *PRecordQueryScanPlan) GetHasRecordTypes() bool {
	if x != nil && x.HasRecordTypes != nil {
		return *x.HasRecordTypes
	}
	return false
}

func (x *PRecordQueryScanPlan) GetRecordTypes() []string {
	if x != nil {
		return x.RecordTypes
	}
	return nil
}

func (x *PRecordQueryScanPlan) GetFlowedType() *PType {
	if x != nil {
		return x.FlowedType
	}
	return nil
}

func (x *PRecordQueryScanPlan) GetCommonPrimaryKey() *KeyExpression {
	if x != nil {
		return x.CommonPrimaryKey
	}
	return nil
}

func (x *PRecordQueryScanPlan) GetComparisons() *PScanComparisons {
	if x != nil {
		return x.Comparisons
	}
	return nil
}

func (x *PRecordQueryScanPlan) GetReverse() bool {
	if x != nil && x.Reverse != nil {
		return *x.Reverse
	}
	return false
}

func (x *PRecordQueryScanPlan) GetStrictlySorted() bool {
	if x != nil && x.StrictlySorted != nil {
		return *x.StrictlySorted
	}
	return false
}

// PRecordQueryScoreForRankPlan
type PRecordQueryScoreForRankPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner *PPhysicalQuantifier `protobuf:"bytes,1,opt,name=inner" json:"inner,omitempty"`
	Ranks []*PScoreForRank     `protobuf:"bytes,2,rep,name=ranks" json:"ranks,omitempty"`
}

func (x *PRecordQueryScoreForRankPlan) Reset() {
	*x = PRecordQueryScoreForRankPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryScoreForRankPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryScoreForRankPlan) ProtoMessage() {}

func (x *PRecordQueryScoreForRankPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryScoreForRankPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryScoreForRankPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{126}
}

func (x *PRecordQueryScoreForRankPlan) GetInner() *PPhysicalQuantifier {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *PRecordQueryScoreForRankPlan) GetRanks() []*PScoreForRank {
	if x != nil {
		return x.Ranks
	}
	return nil
}

type PScoreForRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindingName     *string                         `protobuf:"bytes,1,opt,name=binding_name,json=bindingName" json:"binding_name,omitempty"`
	BindingFunction *PScoreForRank_PBindingFunction `protobuf:"varint,2,opt,name=binding_function,json=bindingFunction,enum=com.apple.foundationdb.record.PScoreForRank_PBindingFunction" json:"binding_function,omitempty"`
	Function        *PIndexAggregateFunction        `protobuf:"bytes,3,opt,name=function" json:"function,omitempty"`
	Comparisons     []*PComparison                  `protobuf:"bytes,4,rep,name=comparisons" json:"comparisons,omitempty"`
}

func (x *PScoreForRank) Reset() {
	*x = PScoreForRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PScoreForRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PScoreForRank) ProtoMessage() {}

func (x *PScoreForRank) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PScoreForRank.ProtoReflect.Descriptor instead.
func (*PScoreForRank) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{127}
}

func (x *PScoreForRank) GetBindingName() string {
	if x != nil && x.BindingName != nil {
		return *x.BindingName
	}
	return ""
}

func (x *PScoreForRank) GetBindingFunction() PScoreForRank_PBindingFunction {
	if x != nil && x.BindingFunction != nil {
		return *x.BindingFunction
	}
	return PScoreForRank_INT
}

func (x *PScoreForRank) GetFunction() *PIndexAggregateFunction {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *PScoreForRank) GetComparisons() []*PComparison {
	if x != nil {
		return x.Comparisons
	}
	return nil
}

type PIndexAggregateFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Operand *KeyExpression `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	Index   *string        `protobuf:"bytes,3,opt,name=index" json:"index,omitempty"`
}

func (x *PIndexAggregateFunction) Reset() {
	*x = PIndexAggregateFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PIndexAggregateFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PIndexAggregateFunction) ProtoMessage() {}

func (x *PIndexAggregateFunction) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PIndexAggregateFunction.ProtoReflect.Descriptor instead.
func (*PIndexAggregateFunction) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{128}
}

func (x *PIndexAggregateFunction) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PIndexAggregateFunction) GetOperand() *KeyExpression {
	if x != nil {
		return x.Operand
	}
	return nil
}

func (x *PIndexAggregateFunction) GetIndex() string {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return ""
}

// PRecordQueryStreamingAggregationPlan
type PRecordQueryStreamingAggregationPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner               *PPhysicalQuantifier `protobuf:"bytes,1,opt,name=inner" json:"inner,omitempty"`
	AggregateValue      *PValue              `protobuf:"bytes,2,opt,name=aggregate_value,json=aggregateValue" json:"aggregate_value,omitempty"`
	GroupingKeyValue    *PValue              `protobuf:"bytes,3,opt,name=grouping_key_value,json=groupingKeyValue" json:"grouping_key_value,omitempty"`
	GroupingKeyAlias    *string              `protobuf:"bytes,4,opt,name=grouping_key_alias,json=groupingKeyAlias" json:"grouping_key_alias,omitempty"`
	AggregateAlias      *string              `protobuf:"bytes,5,opt,name=aggregate_alias,json=aggregateAlias" json:"aggregate_alias,omitempty"`
	CompleteResultValue *PValue              `protobuf:"bytes,6,opt,name=complete_result_value,json=completeResultValue" json:"complete_result_value,omitempty"`
}

func (x *PRecordQueryStreamingAggregationPlan) Reset() {
	*x = PRecordQueryStreamingAggregationPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryStreamingAggregationPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryStreamingAggregationPlan) ProtoMessage() {}

func (x *PRecordQueryStreamingAggregationPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryStreamingAggregationPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryStreamingAggregationPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{129}
}

func (x *PRecordQueryStreamingAggregationPlan) GetInner() *PPhysicalQuantifier {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *PRecordQueryStreamingAggregationPlan) GetAggregateValue() *PValue {
	if x != nil {
		return x.AggregateValue
	}
	return nil
}

func (x *PRecordQueryStreamingAggregationPlan) GetGroupingKeyValue() *PValue {
	if x != nil {
		return x.GroupingKeyValue
	}
	return nil
}

func (x *PRecordQueryStreamingAggregationPlan) GetGroupingKeyAlias() string {
	if x != nil && x.GroupingKeyAlias != nil {
		return *x.GroupingKeyAlias
	}
	return ""
}

func (x *PRecordQueryStreamingAggregationPlan) GetAggregateAlias() string {
	if x != nil && x.AggregateAlias != nil {
		return *x.AggregateAlias
	}
	return ""
}

func (x *PRecordQueryStreamingAggregationPlan) GetCompleteResultValue() *PValue {
	if x != nil {
		return x.CompleteResultValue
	}
	return nil
}

// PRecordQueryTypeFilterPlan
type PRecordQueryTypeFilterPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner       *PPhysicalQuantifier `protobuf:"bytes,1,opt,name=inner" json:"inner,omitempty"`
	RecordTypes []string             `protobuf:"bytes,2,rep,name=record_types,json=recordTypes" json:"record_types,omitempty"`
	ResultType  *PType               `protobuf:"bytes,3,opt,name=result_type,json=resultType" json:"result_type,omitempty"`
}

func (x *PRecordQueryTypeFilterPlan) Reset() {
	*x = PRecordQueryTypeFilterPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryTypeFilterPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryTypeFilterPlan) ProtoMessage() {}

func (x *PRecordQueryTypeFilterPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryTypeFilterPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryTypeFilterPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{130}
}

func (x *PRecordQueryTypeFilterPlan) GetInner() *PPhysicalQuantifier {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *PRecordQueryTypeFilterPlan) GetRecordTypes() []string {
	if x != nil {
		return x.RecordTypes
	}
	return nil
}

func (x *PRecordQueryTypeFilterPlan) GetResultType() *PType {
	if x != nil {
		return x.ResultType
	}
	return nil
}

// PRecordQueryUnionOnKeyExpressionPlan
type PRecordQueryUnionOnKeyExpressionPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PRecordQueryUnionPlan `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *PRecordQueryUnionOnKeyExpressionPlan) Reset() {
	*x = PRecordQueryUnionOnKeyExpressionPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryUnionOnKeyExpressionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryUnionOnKeyExpressionPlan) ProtoMessage() {}

func (x *PRecordQueryUnionOnKeyExpressionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryUnionOnKeyExpressionPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryUnionOnKeyExpressionPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{131}
}

func (x *PRecordQueryUnionOnKeyExpressionPlan) GetSuper() *PRecordQueryUnionPlan {
	if x != nil {
		return x.Super
	}
	return nil
}

// PRecordQueryUnionOnValuesPlan
type PRecordQueryUnionOnValuesPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PRecordQueryUnionPlan `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *PRecordQueryUnionOnValuesPlan) Reset() {
	*x = PRecordQueryUnionOnValuesPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryUnionOnValuesPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryUnionOnValuesPlan) ProtoMessage() {}

func (x *PRecordQueryUnionOnValuesPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryUnionOnValuesPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryUnionOnValuesPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{132}
}

func (x *PRecordQueryUnionOnValuesPlan) GetSuper() *PRecordQueryUnionPlan {
	if x != nil {
		return x.Super
	}
	return nil
}

// PRecordQueryUnionPlan
type PRecordQueryUnionPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                 *PRecordQueryUnionPlanBase `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	ComparisonKeyFunction *PComparisonKeyFunction    `protobuf:"bytes,2,opt,name=comparison_key_function,json=comparisonKeyFunction" json:"comparison_key_function,omitempty"`
	ShowComparisonKey     *bool                      `protobuf:"varint,3,opt,name=show_comparison_key,json=showComparisonKey" json:"show_comparison_key,omitempty"`
}

func (x *PRecordQueryUnionPlan) Reset() {
	*x = PRecordQueryUnionPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryUnionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryUnionPlan) ProtoMessage() {}

func (x *PRecordQueryUnionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryUnionPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryUnionPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{133}
}

func (x *PRecordQueryUnionPlan) GetSuper() *PRecordQueryUnionPlanBase {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PRecordQueryUnionPlan) GetComparisonKeyFunction() *PComparisonKeyFunction {
	if x != nil {
		return x.ComparisonKeyFunction
	}
	return nil
}

func (x *PRecordQueryUnionPlan) GetShowComparisonKey() bool {
	if x != nil && x.ShowComparisonKey != nil {
		return *x.ShowComparisonKey
	}
	return false
}

// PRecordQueryUnorderedDistinctPlan
type PRecordQueryUnorderedDistinctPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner         *PPhysicalQuantifier `protobuf:"bytes,1,opt,name=inner" json:"inner,omitempty"`
	ComparisonKey *KeyExpression       `protobuf:"bytes,2,opt,name=comparison_key,json=comparisonKey" json:"comparison_key,omitempty"`
}

func (x *PRecordQueryUnorderedDistinctPlan) Reset() {
	*x = PRecordQueryUnorderedDistinctPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryUnorderedDistinctPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryUnorderedDistinctPlan) ProtoMessage() {}

func (x *PRecordQueryUnorderedDistinctPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryUnorderedDistinctPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryUnorderedDistinctPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{134}
}

func (x *PRecordQueryUnorderedDistinctPlan) GetInner() *PPhysicalQuantifier {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *PRecordQueryUnorderedDistinctPlan) GetComparisonKey() *KeyExpression {
	if x != nil {
		return x.ComparisonKey
	}
	return nil
}

// PRecordQueryUnorderedPrimaryKeyDistinctPlan
type PRecordQueryUnorderedPrimaryKeyDistinctPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner *PPhysicalQuantifier `protobuf:"bytes,1,opt,name=inner" json:"inner,omitempty"`
}

func (x *PRecordQueryUnorderedPrimaryKeyDistinctPlan) Reset() {
	*x = PRecordQueryUnorderedPrimaryKeyDistinctPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryUnorderedPrimaryKeyDistinctPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryUnorderedPrimaryKeyDistinctPlan) ProtoMessage() {}

func (x *PRecordQueryUnorderedPrimaryKeyDistinctPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryUnorderedPrimaryKeyDistinctPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryUnorderedPrimaryKeyDistinctPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{135}
}

func (x *PRecordQueryUnorderedPrimaryKeyDistinctPlan) GetInner() *PPhysicalQuantifier {
	if x != nil {
		return x.Inner
	}
	return nil
}

// PRecordQueryUnorderedUnionPlan
type PRecordQueryUnorderedUnionPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PRecordQueryUnionPlanBase `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *PRecordQueryUnorderedUnionPlan) Reset() {
	*x = PRecordQueryUnorderedUnionPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryUnorderedUnionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryUnorderedUnionPlan) ProtoMessage() {}

func (x *PRecordQueryUnorderedUnionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryUnorderedUnionPlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryUnorderedUnionPlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{136}
}

func (x *PRecordQueryUnorderedUnionPlan) GetSuper() *PRecordQueryUnionPlanBase {
	if x != nil {
		return x.Super
	}
	return nil
}

// PRecordQueryUnionPlanBase
type PRecordQueryUnionPlanBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quantifiers []*PPhysicalQuantifier `protobuf:"bytes,1,rep,name=quantifiers" json:"quantifiers,omitempty"`
	Reverse     *bool                  `protobuf:"varint,2,opt,name=reverse" json:"reverse,omitempty"`
}

func (x *PRecordQueryUnionPlanBase) Reset() {
	*x = PRecordQueryUnionPlanBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryUnionPlanBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryUnionPlanBase) ProtoMessage() {}

func (x *PRecordQueryUnionPlanBase) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryUnionPlanBase.ProtoReflect.Descriptor instead.
func (*PRecordQueryUnionPlanBase) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{137}
}

func (x *PRecordQueryUnionPlanBase) GetQuantifiers() []*PPhysicalQuantifier {
	if x != nil {
		return x.Quantifiers
	}
	return nil
}

func (x *PRecordQueryUnionPlanBase) GetReverse() bool {
	if x != nil && x.Reverse != nil {
		return *x.Reverse
	}
	return false
}

// PRecordQueryUpdatePlan
type PRecordQueryUpdatePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PRecordQueryAbstractDataModificationPlan `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *PRecordQueryUpdatePlan) Reset() {
	*x = PRecordQueryUpdatePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordQueryUpdatePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordQueryUpdatePlan) ProtoMessage() {}

func (x *PRecordQueryUpdatePlan) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordQueryUpdatePlan.ProtoReflect.Descriptor instead.
func (*PRecordQueryUpdatePlan) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{138}
}

func (x *PRecordQueryUpdatePlan) GetSuper() *PRecordQueryAbstractDataModificationPlan {
	if x != nil {
		return x.Super
	}
	return nil
}

type PType_PPrimitiveType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeCode   *PType_PTypeCode `protobuf:"varint,1,opt,name=type_code,json=typeCode,enum=com.apple.foundationdb.record.PType_PTypeCode" json:"type_code,omitempty"`
	IsNullable *bool            `protobuf:"varint,2,opt,name=is_nullable,json=isNullable" json:"is_nullable,omitempty"`
}

func (x *PType_PPrimitiveType) Reset() {
	*x = PType_PPrimitiveType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PType_PPrimitiveType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PType_PPrimitiveType) ProtoMessage() {}

func (x *PType_PPrimitiveType) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PType_PPrimitiveType.ProtoReflect.Descriptor instead.
func (*PType_PPrimitiveType) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PType_PPrimitiveType) GetTypeCode() PType_PTypeCode {
	if x != nil && x.TypeCode != nil {
		return *x.TypeCode
	}
	return PType_UNKNOWN
}

func (x *PType_PPrimitiveType) GetIsNullable() bool {
	if x != nil && x.IsNullable != nil {
		return *x.IsNullable
	}
	return false
}

type PType_PNullType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PType_PNullType) Reset() {
	*x = PType_PNullType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PType_PNullType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PType_PNullType) ProtoMessage() {}

func (x *PType_PNullType) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PType_PNullType.ProtoReflect.Descriptor instead.
func (*PType_PNullType) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{0, 1}
}

type PType_PNoneType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PType_PNoneType) Reset() {
	*x = PType_PNoneType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PType_PNoneType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PType_PNoneType) ProtoMessage() {}

func (x *PType_PNoneType) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PType_PNoneType.ProtoReflect.Descriptor instead.
func (*PType_PNoneType) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{0, 2}
}

type PType_PAnyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PType_PAnyType) Reset() {
	*x = PType_PAnyType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PType_PAnyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PType_PAnyType) ProtoMessage() {}

func (x *PType_PAnyType) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PType_PAnyType.ProtoReflect.Descriptor instead.
func (*PType_PAnyType) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{0, 3}
}

type PType_PAnyRecordType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNullable *bool `protobuf:"varint,1,opt,name=is_nullable,json=isNullable" json:"is_nullable,omitempty"`
}

func (x *PType_PAnyRecordType) Reset() {
	*x = PType_PAnyRecordType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PType_PAnyRecordType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PType_PAnyRecordType) ProtoMessage() {}

func (x *PType_PAnyRecordType) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PType_PAnyRecordType.ProtoReflect.Descriptor instead.
func (*PType_PAnyRecordType) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{0, 4}
}

func (x *PType_PAnyRecordType) GetIsNullable() bool {
	if x != nil && x.IsNullable != nil {
		return *x.IsNullable
	}
	return false
}

type PType_PEnumType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNullable *bool                         `protobuf:"varint,1,opt,name=is_nullable,json=isNullable" json:"is_nullable,omitempty"`
	EnumValues []*PType_PEnumType_PEnumValue `protobuf:"bytes,2,rep,name=enum_values,json=enumValues" json:"enum_values,omitempty"`
	Name       *string                       `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"` // referential name -- not used in the planner
}

func (x *PType_PEnumType) Reset() {
	*x = PType_PEnumType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PType_PEnumType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PType_PEnumType) ProtoMessage() {}

func (x *PType_PEnumType) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PType_PEnumType.ProtoReflect.Descriptor instead.
func (*PType_PEnumType) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{0, 5}
}

func (x *PType_PEnumType) GetIsNullable() bool {
	if x != nil && x.IsNullable != nil {
		return *x.IsNullable
	}
	return false
}

func (x *PType_PEnumType) GetEnumValues() []*PType_PEnumType_PEnumValue {
	if x != nil {
		return x.EnumValues
	}
	return nil
}

func (x *PType_PEnumType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type PType_PRecordType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceId *int32                      `protobuf:"varint,1,opt,name=reference_id,json=referenceId" json:"reference_id,omitempty"`
	Name        *string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"` // referential name -- not used in the planner
	IsNullable  *bool                       `protobuf:"varint,3,opt,name=is_nullable,json=isNullable" json:"is_nullable,omitempty"`
	Fields      []*PType_PRecordType_PField `protobuf:"bytes,4,rep,name=fields" json:"fields,omitempty"`
}

func (x *PType_PRecordType) Reset() {
	*x = PType_PRecordType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PType_PRecordType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PType_PRecordType) ProtoMessage() {}

func (x *PType_PRecordType) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PType_PRecordType.ProtoReflect.Descriptor instead.
func (*PType_PRecordType) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{0, 6}
}

func (x *PType_PRecordType) GetReferenceId() int32 {
	if x != nil && x.ReferenceId != nil {
		return *x.ReferenceId
	}
	return 0
}

func (x *PType_PRecordType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PType_PRecordType) GetIsNullable() bool {
	if x != nil && x.IsNullable != nil {
		return *x.IsNullable
	}
	return false
}

func (x *PType_PRecordType) GetFields() []*PType_PRecordType_PField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type PType_PRelationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerType *PType `protobuf:"bytes,1,opt,name=inner_type,json=innerType" json:"inner_type,omitempty"`
}

func (x *PType_PRelationType) Reset() {
	*x = PType_PRelationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PType_PRelationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PType_PRelationType) ProtoMessage() {}

func (x *PType_PRelationType) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PType_PRelationType.ProtoReflect.Descriptor instead.
func (*PType_PRelationType) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{0, 7}
}

func (x *PType_PRelationType) GetInnerType() *PType {
	if x != nil {
		return x.InnerType
	}
	return nil
}

type PType_PArrayType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNullable  *bool  `protobuf:"varint,2,opt,name=is_nullable,json=isNullable" json:"is_nullable,omitempty"`
	ElementType *PType `protobuf:"bytes,3,opt,name=element_type,json=elementType" json:"element_type,omitempty"`
}

func (x *PType_PArrayType) Reset() {
	*x = PType_PArrayType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PType_PArrayType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PType_PArrayType) ProtoMessage() {}

func (x *PType_PArrayType) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PType_PArrayType.ProtoReflect.Descriptor instead.
func (*PType_PArrayType) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{0, 8}
}

func (x *PType_PArrayType) GetIsNullable() bool {
	if x != nil && x.IsNullable != nil {
		return *x.IsNullable
	}
	return false
}

func (x *PType_PArrayType) GetElementType() *PType {
	if x != nil {
		return x.ElementType
	}
	return nil
}

type PType_PEnumType_PEnumValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Number *int32  `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
}

func (x *PType_PEnumType_PEnumValue) Reset() {
	*x = PType_PEnumType_PEnumValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PType_PEnumType_PEnumValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PType_PEnumType_PEnumValue) ProtoMessage() {}

func (x *PType_PEnumType_PEnumValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PType_PEnumType_PEnumValue.ProtoReflect.Descriptor instead.
func (*PType_PEnumType_PEnumValue) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *PType_PEnumType_PEnumValue) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PType_PEnumType_PEnumValue) GetNumber() int32 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

type PType_PRecordType_PField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldType  *PType  `protobuf:"bytes,1,opt,name=field_type,json=fieldType" json:"field_type,omitempty"`
	FieldName  *string `protobuf:"bytes,2,opt,name=field_name,json=fieldName" json:"field_name,omitempty"`
	FieldIndex *int32  `protobuf:"varint,3,opt,name=field_index,json=fieldIndex" json:"field_index,omitempty"`
}

func (x *PType_PRecordType_PField) Reset() {
	*x = PType_PRecordType_PField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PType_PRecordType_PField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PType_PRecordType_PField) ProtoMessage() {}

func (x *PType_PRecordType_PField) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PType_PRecordType_PField.ProtoReflect.Descriptor instead.
func (*PType_PRecordType_PField) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{0, 6, 0}
}

func (x *PType_PRecordType_PField) GetFieldType() *PType {
	if x != nil {
		return x.FieldType
	}
	return nil
}

func (x *PType_PRecordType_PField) GetFieldName() string {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return ""
}

func (x *PType_PRecordType_PField) GetFieldIndex() int32 {
	if x != nil && x.FieldIndex != nil {
		return *x.FieldIndex
	}
	return 0
}

type PCoercionTrieNode_IntChildPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                 *int32             `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	ChildCoercionTrieNode *PCoercionTrieNode `protobuf:"bytes,2,opt,name=child_coercion_trie_node,json=childCoercionTrieNode" json:"child_coercion_trie_node,omitempty"`
}

func (x *PCoercionTrieNode_IntChildPair) Reset() {
	*x = PCoercionTrieNode_IntChildPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCoercionTrieNode_IntChildPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCoercionTrieNode_IntChildPair) ProtoMessage() {}

func (x *PCoercionTrieNode_IntChildPair) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCoercionTrieNode_IntChildPair.ProtoReflect.Descriptor instead.
func (*PCoercionTrieNode_IntChildPair) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{1, 0}
}

func (x *PCoercionTrieNode_IntChildPair) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *PCoercionTrieNode_IntChildPair) GetChildCoercionTrieNode() *PCoercionTrieNode {
	if x != nil {
		return x.ChildCoercionTrieNode
	}
	return nil
}

type PTransformationTrieNode_IntChildPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                       *int32                   `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	ChildTransformationTrieNode *PTransformationTrieNode `protobuf:"bytes,2,opt,name=child_transformation_trie_node,json=childTransformationTrieNode" json:"child_transformation_trie_node,omitempty"`
}

func (x *PTransformationTrieNode_IntChildPair) Reset() {
	*x = PTransformationTrieNode_IntChildPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PTransformationTrieNode_IntChildPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PTransformationTrieNode_IntChildPair) ProtoMessage() {}

func (x *PTransformationTrieNode_IntChildPair) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PTransformationTrieNode_IntChildPair.ProtoReflect.Descriptor instead.
func (*PTransformationTrieNode_IntChildPair) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{5, 0}
}

func (x *PTransformationTrieNode_IntChildPair) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *PTransformationTrieNode_IntChildPair) GetChildTransformationTrieNode() *PTransformationTrieNode {
	if x != nil {
		return x.ChildTransformationTrieNode
	}
	return nil
}

type PFieldAccessTrieNode_PResolvedAccessorChildPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResolvedAccessor         *PFieldPath_PResolvedAccessor `protobuf:"bytes,1,opt,name=resolved_accessor,json=resolvedAccessor" json:"resolved_accessor,omitempty"`
	ChildFieldAccessTrieNode *PFieldAccessTrieNode         `protobuf:"bytes,2,opt,name=child_field_access_trie_node,json=childFieldAccessTrieNode" json:"child_field_access_trie_node,omitempty"`
}

func (x *PFieldAccessTrieNode_PResolvedAccessorChildPair) Reset() {
	*x = PFieldAccessTrieNode_PResolvedAccessorChildPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PFieldAccessTrieNode_PResolvedAccessorChildPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PFieldAccessTrieNode_PResolvedAccessorChildPair) ProtoMessage() {}

func (x *PFieldAccessTrieNode_PResolvedAccessorChildPair) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PFieldAccessTrieNode_PResolvedAccessorChildPair.ProtoReflect.Descriptor instead.
func (*PFieldAccessTrieNode_PResolvedAccessorChildPair) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{6, 0}
}

func (x *PFieldAccessTrieNode_PResolvedAccessorChildPair) GetResolvedAccessor() *PFieldPath_PResolvedAccessor {
	if x != nil {
		return x.ResolvedAccessor
	}
	return nil
}

func (x *PFieldAccessTrieNode_PResolvedAccessorChildPair) GetChildFieldAccessTrieNode() *PFieldAccessTrieNode {
	if x != nil {
		return x.ChildFieldAccessTrieNode
	}
	return nil
}

type PFieldPath_PResolvedAccessor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Ordinal *int32  `protobuf:"varint,2,opt,name=ordinal" json:"ordinal,omitempty"`
	Type    *PType  `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
}

func (x *PFieldPath_PResolvedAccessor) Reset() {
	*x = PFieldPath_PResolvedAccessor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PFieldPath_PResolvedAccessor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PFieldPath_PResolvedAccessor) ProtoMessage() {}

func (x *PFieldPath_PResolvedAccessor) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PFieldPath_PResolvedAccessor.ProtoReflect.Descriptor instead.
func (*PFieldPath_PResolvedAccessor) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{20, 0}
}

func (x *PFieldPath_PResolvedAccessor) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PFieldPath_PResolvedAccessor) GetOrdinal() int32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

func (x *PFieldPath_PResolvedAccessor) GetType() *PType {
	if x != nil {
		return x.Type
	}
	return nil
}

type PNumericAggregationValue_PSum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PNumericAggregationValue `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *PNumericAggregationValue_PSum) Reset() {
	*x = PNumericAggregationValue_PSum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PNumericAggregationValue_PSum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNumericAggregationValue_PSum) ProtoMessage() {}

func (x *PNumericAggregationValue_PSum) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNumericAggregationValue_PSum.ProtoReflect.Descriptor instead.
func (*PNumericAggregationValue_PSum) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{31, 0}
}

func (x *PNumericAggregationValue_PSum) GetSuper() *PNumericAggregationValue {
	if x != nil {
		return x.Super
	}
	return nil
}

type PNumericAggregationValue_PAvg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PNumericAggregationValue `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *PNumericAggregationValue_PAvg) Reset() {
	*x = PNumericAggregationValue_PAvg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PNumericAggregationValue_PAvg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNumericAggregationValue_PAvg) ProtoMessage() {}

func (x *PNumericAggregationValue_PAvg) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNumericAggregationValue_PAvg.ProtoReflect.Descriptor instead.
func (*PNumericAggregationValue_PAvg) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{31, 1}
}

func (x *PNumericAggregationValue_PAvg) GetSuper() *PNumericAggregationValue {
	if x != nil {
		return x.Super
	}
	return nil
}

type PNumericAggregationValue_PMin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PNumericAggregationValue `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *PNumericAggregationValue_PMin) Reset() {
	*x = PNumericAggregationValue_PMin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PNumericAggregationValue_PMin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNumericAggregationValue_PMin) ProtoMessage() {}

func (x *PNumericAggregationValue_PMin) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNumericAggregationValue_PMin.ProtoReflect.Descriptor instead.
func (*PNumericAggregationValue_PMin) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{31, 2}
}

func (x *PNumericAggregationValue_PMin) GetSuper() *PNumericAggregationValue {
	if x != nil {
		return x.Super
	}
	return nil
}

type PNumericAggregationValue_PMax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *PNumericAggregationValue `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *PNumericAggregationValue_PMax) Reset() {
	*x = PNumericAggregationValue_PMax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PNumericAggregationValue_PMax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNumericAggregationValue_PMax) ProtoMessage() {}

func (x *PNumericAggregationValue_PMax) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNumericAggregationValue_PMax.ProtoReflect.Descriptor instead.
func (*PNumericAggregationValue_PMax) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{31, 3}
}

func (x *PNumericAggregationValue_PMax) GetSuper() *PNumericAggregationValue {
	if x != nil {
		return x.Super
	}
	return nil
}

type PRecordConstructorValue_PColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field *PType_PRecordType_PField `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
	Value *PValue                   `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *PRecordConstructorValue_PColumn) Reset() {
	*x = PRecordConstructorValue_PColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRecordConstructorValue_PColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRecordConstructorValue_PColumn) ProtoMessage() {}

func (x *PRecordConstructorValue_PColumn) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRecordConstructorValue_PColumn.ProtoReflect.Descriptor instead.
func (*PRecordConstructorValue_PColumn) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{40, 0}
}

func (x *PRecordConstructorValue_PColumn) GetField() *PType_PRecordType_PField {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *PRecordConstructorValue_PColumn) GetValue() *PValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type PCompatibleTypeEvolutionPredicate_PRecordTypeNameFieldAccessPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordTypeName      *string               `protobuf:"bytes,1,opt,name=record_type_name,json=recordTypeName" json:"record_type_name,omitempty"`
	FieldAccessTrieNode *PFieldAccessTrieNode `protobuf:"bytes,2,opt,name=field_access_trie_node,json=fieldAccessTrieNode" json:"field_access_trie_node,omitempty"`
}

func (x *PCompatibleTypeEvolutionPredicate_PRecordTypeNameFieldAccessPair) Reset() {
	*x = PCompatibleTypeEvolutionPredicate_PRecordTypeNameFieldAccessPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCompatibleTypeEvolutionPredicate_PRecordTypeNameFieldAccessPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCompatibleTypeEvolutionPredicate_PRecordTypeNameFieldAccessPair) ProtoMessage() {}

func (x *PCompatibleTypeEvolutionPredicate_PRecordTypeNameFieldAccessPair) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCompatibleTypeEvolutionPredicate_PRecordTypeNameFieldAccessPair.ProtoReflect.Descriptor instead.
func (*PCompatibleTypeEvolutionPredicate_PRecordTypeNameFieldAccessPair) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{68, 0}
}

func (x *PCompatibleTypeEvolutionPredicate_PRecordTypeNameFieldAccessPair) GetRecordTypeName() string {
	if x != nil && x.RecordTypeName != nil {
		return *x.RecordTypeName
	}
	return ""
}

func (x *PCompatibleTypeEvolutionPredicate_PRecordTypeNameFieldAccessPair) GetFieldAccessTrieNode() *PFieldAccessTrieNode {
	if x != nil {
		return x.FieldAccessTrieNode
	}
	return nil
}

type PDatabaseObjectDependenciesPredicate_PUsedIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	LastModifiedVersion *int32  `protobuf:"varint,3,opt,name=last_modified_version,json=lastModifiedVersion" json:"last_modified_version,omitempty"`
}

func (x *PDatabaseObjectDependenciesPredicate_PUsedIndex) Reset() {
	*x = PDatabaseObjectDependenciesPredicate_PUsedIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PDatabaseObjectDependenciesPredicate_PUsedIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDatabaseObjectDependenciesPredicate_PUsedIndex) ProtoMessage() {}

func (x *PDatabaseObjectDependenciesPredicate_PUsedIndex) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDatabaseObjectDependenciesPredicate_PUsedIndex.ProtoReflect.Descriptor instead.
func (*PDatabaseObjectDependenciesPredicate_PUsedIndex) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{70, 0}
}

func (x *PDatabaseObjectDependenciesPredicate_PUsedIndex) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PDatabaseObjectDependenciesPredicate_PUsedIndex) GetLastModifiedVersion() int32 {
	if x != nil && x.LastModifiedVersion != nil {
		return *x.LastModifiedVersion
	}
	return 0
}

type PIndexKeyValueToPartialRecord_PCopier struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Types that are assignable to SpecificCopier:
	//
	//	*PIndexKeyValueToPartialRecord_PCopier_AdditionalCopiers
	//	*PIndexKeyValueToPartialRecord_PCopier_FieldCopier
	//	*PIndexKeyValueToPartialRecord_PCopier_MessageCopier
	SpecificCopier isPIndexKeyValueToPartialRecord_PCopier_SpecificCopier `protobuf_oneof:"specific_copier"`
}

func (x *PIndexKeyValueToPartialRecord_PCopier) Reset() {
	*x = PIndexKeyValueToPartialRecord_PCopier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PIndexKeyValueToPartialRecord_PCopier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PIndexKeyValueToPartialRecord_PCopier) ProtoMessage() {}

func (x *PIndexKeyValueToPartialRecord_PCopier) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PIndexKeyValueToPartialRecord_PCopier.ProtoReflect.Descriptor instead.
func (*PIndexKeyValueToPartialRecord_PCopier) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{84, 0}
}

func (m *PIndexKeyValueToPartialRecord_PCopier) GetSpecificCopier() isPIndexKeyValueToPartialRecord_PCopier_SpecificCopier {
	if m != nil {
		return m.SpecificCopier
	}
	return nil
}

func (x *PIndexKeyValueToPartialRecord_PCopier) GetAdditionalCopiers() *anypb.Any {
	if x, ok := x.GetSpecificCopier().(*PIndexKeyValueToPartialRecord_PCopier_AdditionalCopiers); ok {
		return x.AdditionalCopiers
	}
	return nil
}

func (x *PIndexKeyValueToPartialRecord_PCopier) GetFieldCopier() *PIndexKeyValueToPartialRecord_PFieldCopier {
	if x, ok := x.GetSpecificCopier().(*PIndexKeyValueToPartialRecord_PCopier_FieldCopier); ok {
		return x.FieldCopier
	}
	return nil
}

func (x *PIndexKeyValueToPartialRecord_PCopier) GetMessageCopier() *PIndexKeyValueToPartialRecord_PMessageCopier {
	if x, ok := x.GetSpecificCopier().(*PIndexKeyValueToPartialRecord_PCopier_MessageCopier); ok {
		return x.MessageCopier
	}
	return nil
}

type isPIndexKeyValueToPartialRecord_PCopier_SpecificCopier interface {
	isPIndexKeyValueToPartialRecord_PCopier_SpecificCopier()
}

type PIndexKeyValueToPartialRecord_PCopier_AdditionalCopiers struct {
	AdditionalCopiers *anypb.Any `protobuf:"bytes,1,opt,name=additional_copiers,json=additionalCopiers,oneof"`
}

type PIndexKeyValueToPartialRecord_PCopier_FieldCopier struct {
	FieldCopier *PIndexKeyValueToPartialRecord_PFieldCopier `protobuf:"bytes,2,opt,name=field_copier,json=fieldCopier,oneof"`
}

type PIndexKeyValueToPartialRecord_PCopier_MessageCopier struct {
	MessageCopier *PIndexKeyValueToPartialRecord_PMessageCopier `protobuf:"bytes,3,opt,name=message_copier,json=messageCopier,oneof"`
}

func (*PIndexKeyValueToPartialRecord_PCopier_AdditionalCopiers) isPIndexKeyValueToPartialRecord_PCopier_SpecificCopier() {
}

func (*PIndexKeyValueToPartialRecord_PCopier_FieldCopier) isPIndexKeyValueToPartialRecord_PCopier_SpecificCopier() {
}

func (*PIndexKeyValueToPartialRecord_PCopier_MessageCopier) isPIndexKeyValueToPartialRecord_PCopier_SpecificCopier() {
}

type PIndexKeyValueToPartialRecord_PFieldCopier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field           *string                                         `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
	Source          *PIndexKeyValueToPartialRecord_PTupleSource     `protobuf:"varint,2,opt,name=source,enum=com.apple.foundationdb.record.PIndexKeyValueToPartialRecord_PTupleSource" json:"source,omitempty"`
	CopyIfPredicate *PIndexKeyValueToPartialRecord_PCopyIfPredicate `protobuf:"bytes,3,opt,name=copy_if_predicate,json=copyIfPredicate" json:"copy_if_predicate,omitempty"`
	OrdinalPath     []int32                                         `protobuf:"varint,4,rep,name=ordinal_path,json=ordinalPath" json:"ordinal_path,omitempty"`
}

func (x *PIndexKeyValueToPartialRecord_PFieldCopier) Reset() {
	*x = PIndexKeyValueToPartialRecord_PFieldCopier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PIndexKeyValueToPartialRecord_PFieldCopier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PIndexKeyValueToPartialRecord_PFieldCopier) ProtoMessage() {}

func (x *PIndexKeyValueToPartialRecord_PFieldCopier) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PIndexKeyValueToPartialRecord_PFieldCopier.ProtoReflect.Descriptor instead.
func (*PIndexKeyValueToPartialRecord_PFieldCopier) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{84, 1}
}

func (x *PIndexKeyValueToPartialRecord_PFieldCopier) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *PIndexKeyValueToPartialRecord_PFieldCopier) GetSource() PIndexKeyValueToPartialRecord_PTupleSource {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return PIndexKeyValueToPartialRecord_KEY
}

func (x *PIndexKeyValueToPartialRecord_PFieldCopier) GetCopyIfPredicate() *PIndexKeyValueToPartialRecord_PCopyIfPredicate {
	if x != nil {
		return x.CopyIfPredicate
	}
	return nil
}

func (x *PIndexKeyValueToPartialRecord_PFieldCopier) GetOrdinalPath() []int32 {
	if x != nil {
		return x.OrdinalPath
	}
	return nil
}

type PIndexKeyValueToPartialRecord_PCopyIfPredicate struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Types that are assignable to SpecificCopyIfPredicate:
	//
	//	*PIndexKeyValueToPartialRecord_PCopyIfPredicate_AdditionalCopyIfPredicate
	//	*PIndexKeyValueToPartialRecord_PCopyIfPredicate_TruePredicate
	//	*PIndexKeyValueToPartialRecord_PCopyIfPredicate_ConditionalUponPathPredicate
	SpecificCopyIfPredicate isPIndexKeyValueToPartialRecord_PCopyIfPredicate_SpecificCopyIfPredicate `protobuf_oneof:"specific_copy_if_predicate"`
}

func (x *PIndexKeyValueToPartialRecord_PCopyIfPredicate) Reset() {
	*x = PIndexKeyValueToPartialRecord_PCopyIfPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PIndexKeyValueToPartialRecord_PCopyIfPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PIndexKeyValueToPartialRecord_PCopyIfPredicate) ProtoMessage() {}

func (x *PIndexKeyValueToPartialRecord_PCopyIfPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PIndexKeyValueToPartialRecord_PCopyIfPredicate.ProtoReflect.Descriptor instead.
func (*PIndexKeyValueToPartialRecord_PCopyIfPredicate) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{84, 2}
}

func (m *PIndexKeyValueToPartialRecord_PCopyIfPredicate) GetSpecificCopyIfPredicate() isPIndexKeyValueToPartialRecord_PCopyIfPredicate_SpecificCopyIfPredicate {
	if m != nil {
		return m.SpecificCopyIfPredicate
	}
	return nil
}

func (x *PIndexKeyValueToPartialRecord_PCopyIfPredicate) GetAdditionalCopyIfPredicate() *anypb.Any {
	if x, ok := x.GetSpecificCopyIfPredicate().(*PIndexKeyValueToPartialRecord_PCopyIfPredicate_AdditionalCopyIfPredicate); ok {
		return x.AdditionalCopyIfPredicate
	}
	return nil
}

func (x *PIndexKeyValueToPartialRecord_PCopyIfPredicate) GetTruePredicate() *PIndexKeyValueToPartialRecord_PCopyIfPredicate_PTruePredicate {
	if x, ok := x.GetSpecificCopyIfPredicate().(*PIndexKeyValueToPartialRecord_PCopyIfPredicate_TruePredicate); ok {
		return x.TruePredicate
	}
	return nil
}

func (x *PIndexKeyValueToPartialRecord_PCopyIfPredicate) GetConditionalUponPathPredicate() *PIndexKeyValueToPartialRecord_PCopyIfPredicate_PConditionalUponPathPredicate {
	if x, ok := x.GetSpecificCopyIfPredicate().(*PIndexKeyValueToPartialRecord_PCopyIfPredicate_ConditionalUponPathPredicate); ok {
		return x.ConditionalUponPathPredicate
	}
	return nil
}

type isPIndexKeyValueToPartialRecord_PCopyIfPredicate_SpecificCopyIfPredicate interface {
	isPIndexKeyValueToPartialRecord_PCopyIfPredicate_SpecificCopyIfPredicate()
}

type PIndexKeyValueToPartialRecord_PCopyIfPredicate_AdditionalCopyIfPredicate struct {
	AdditionalCopyIfPredicate *anypb.Any `protobuf:"bytes,101,opt,name=additional_copy_if_predicate,json=additionalCopyIfPredicate,oneof"`
}

type PIndexKeyValueToPartialRecord_PCopyIfPredicate_TruePredicate struct {
	TruePredicate *PIndexKeyValueToPartialRecord_PCopyIfPredicate_PTruePredicate `protobuf:"bytes,1,opt,name=true_predicate,json=truePredicate,oneof"`
}

type PIndexKeyValueToPartialRecord_PCopyIfPredicate_ConditionalUponPathPredicate struct {
	ConditionalUponPathPredicate *PIndexKeyValueToPartialRecord_PCopyIfPredicate_PConditionalUponPathPredicate `protobuf:"bytes,2,opt,name=conditional_upon_path_predicate,json=conditionalUponPathPredicate,oneof"`
}

func (*PIndexKeyValueToPartialRecord_PCopyIfPredicate_AdditionalCopyIfPredicate) isPIndexKeyValueToPartialRecord_PCopyIfPredicate_SpecificCopyIfPredicate() {
}

func (*PIndexKeyValueToPartialRecord_PCopyIfPredicate_TruePredicate) isPIndexKeyValueToPartialRecord_PCopyIfPredicate_SpecificCopyIfPredicate() {
}

func (*PIndexKeyValueToPartialRecord_PCopyIfPredicate_ConditionalUponPathPredicate) isPIndexKeyValueToPartialRecord_PCopyIfPredicate_SpecificCopyIfPredicate() {
}

type PIndexKeyValueToPartialRecord_PMessageCopier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field  *string                        `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
	Nested *PIndexKeyValueToPartialRecord `protobuf:"bytes,2,opt,name=nested" json:"nested,omitempty"`
}

func (x *PIndexKeyValueToPartialRecord_PMessageCopier) Reset() {
	*x = PIndexKeyValueToPartialRecord_PMessageCopier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PIndexKeyValueToPartialRecord_PMessageCopier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PIndexKeyValueToPartialRecord_PMessageCopier) ProtoMessage() {}

func (x *PIndexKeyValueToPartialRecord_PMessageCopier) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PIndexKeyValueToPartialRecord_PMessageCopier.ProtoReflect.Descriptor instead.
func (*PIndexKeyValueToPartialRecord_PMessageCopier) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{84, 3}
}

func (x *PIndexKeyValueToPartialRecord_PMessageCopier) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *PIndexKeyValueToPartialRecord_PMessageCopier) GetNested() *PIndexKeyValueToPartialRecord {
	if x != nil {
		return x.Nested
	}
	return nil
}

type PIndexKeyValueToPartialRecord_PCopyIfPredicate_PTruePredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PIndexKeyValueToPartialRecord_PCopyIfPredicate_PTruePredicate) Reset() {
	*x = PIndexKeyValueToPartialRecord_PCopyIfPredicate_PTruePredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PIndexKeyValueToPartialRecord_PCopyIfPredicate_PTruePredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PIndexKeyValueToPartialRecord_PCopyIfPredicate_PTruePredicate) ProtoMessage() {}

func (x *PIndexKeyValueToPartialRecord_PCopyIfPredicate_PTruePredicate) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PIndexKeyValueToPartialRecord_PCopyIfPredicate_PTruePredicate.ProtoReflect.Descriptor instead.
func (*PIndexKeyValueToPartialRecord_PCopyIfPredicate_PTruePredicate) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{84, 2, 0}
}

type PIndexKeyValueToPartialRecord_PCopyIfPredicate_PConditionalUponPathPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrdinalPath []int32 `protobuf:"varint,1,rep,name=ordinal_path,json=ordinalPath" json:"ordinal_path,omitempty"`
}

func (x *PIndexKeyValueToPartialRecord_PCopyIfPredicate_PConditionalUponPathPredicate) Reset() {
	*x = PIndexKeyValueToPartialRecord_PCopyIfPredicate_PConditionalUponPathPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PIndexKeyValueToPartialRecord_PCopyIfPredicate_PConditionalUponPathPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PIndexKeyValueToPartialRecord_PCopyIfPredicate_PConditionalUponPathPredicate) ProtoMessage() {}

func (x *PIndexKeyValueToPartialRecord_PCopyIfPredicate_PConditionalUponPathPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PIndexKeyValueToPartialRecord_PCopyIfPredicate_PConditionalUponPathPredicate.ProtoReflect.Descriptor instead.
func (*PIndexKeyValueToPartialRecord_PCopyIfPredicate_PConditionalUponPathPredicate) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{84, 2, 1}
}

func (x *PIndexKeyValueToPartialRecord_PCopyIfPredicate_PConditionalUponPathPredicate) GetOrdinalPath() []int32 {
	if x != nil {
		return x.OrdinalPath
	}
	return nil
}

type PInSource_Super struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindingName *string `protobuf:"bytes,1,opt,name=binding_name,json=bindingName" json:"binding_name,omitempty"`
}

func (x *PInSource_Super) Reset() {
	*x = PInSource_Super{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PInSource_Super) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PInSource_Super) ProtoMessage() {}

func (x *PInSource_Super) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PInSource_Super.ProtoReflect.Descriptor instead.
func (*PInSource_Super) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{103, 0}
}

func (x *PInSource_Super) GetBindingName() string {
	if x != nil && x.BindingName != nil {
		return *x.BindingName
	}
	return ""
}

type PComparisonKeyFunction_POnKeyExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComparisonKeyExpression *KeyExpression `protobuf:"bytes,1,opt,name=comparison_key_expression,json=comparisonKeyExpression" json:"comparison_key_expression,omitempty"`
}

func (x *PComparisonKeyFunction_POnKeyExpression) Reset() {
	*x = PComparisonKeyFunction_POnKeyExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PComparisonKeyFunction_POnKeyExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PComparisonKeyFunction_POnKeyExpression) ProtoMessage() {}

func (x *PComparisonKeyFunction_POnKeyExpression) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PComparisonKeyFunction_POnKeyExpression.ProtoReflect.Descriptor instead.
func (*PComparisonKeyFunction_POnKeyExpression) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{113, 0}
}

func (x *PComparisonKeyFunction_POnKeyExpression) GetComparisonKeyExpression() *KeyExpression {
	if x != nil {
		return x.ComparisonKeyExpression
	}
	return nil
}

type PComparisonKeyFunction_POnValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAlias           *string   `protobuf:"bytes,1,opt,name=base_alias,json=baseAlias" json:"base_alias,omitempty"`
	ComparisonKeyValues []*PValue `protobuf:"bytes,2,rep,name=comparison_key_values,json=comparisonKeyValues" json:"comparison_key_values,omitempty"`
}

func (x *PComparisonKeyFunction_POnValues) Reset() {
	*x = PComparisonKeyFunction_POnValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_query_plan_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PComparisonKeyFunction_POnValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PComparisonKeyFunction_POnValues) ProtoMessage() {}

func (x *PComparisonKeyFunction_POnValues) ProtoReflect() protoreflect.Message {
	mi := &file_record_query_plan_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PComparisonKeyFunction_POnValues.ProtoReflect.Descriptor instead.
func (*PComparisonKeyFunction_POnValues) Descriptor() ([]byte, []int) {
	return file_record_query_plan_proto_rawDescGZIP(), []int{113, 1}
}

func (x *PComparisonKeyFunction_POnValues) GetBaseAlias() string {
	if x != nil && x.BaseAlias != nil {
		return *x.BaseAlias
	}
	return ""
}

func (x *PComparisonKeyFunction_POnValues) GetComparisonKeyValues() []*PValue {
	if x != nil {
		return x.ComparisonKeyValues
	}
	return nil
}

var File_record_query_plan_proto protoreflect.FileDescriptor

var file_record_query_plan_proto_rawDesc = []byte{
	0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x0f, 0x0a,
	0x05, 0x50, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5c, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x4e,
	0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x6e, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x4e, 0x6f,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x6f, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x61, 0x6e, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x41, 0x6e, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x07, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d,
	0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x59, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x50, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a,
	0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x41, 0x72, 0x72, 0x61, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x61, 0x72, 0x72, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x5d, 0x0a, 0x0f, 0x61, 0x6e, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50,
	0x41, 0x6e, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x0d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x7e,
	0x0a, 0x0e, 0x50, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x4b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x0b,
	0x0a, 0x09, 0x50, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x0b, 0x0a, 0x09, 0x50,
	0x4e, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x0a, 0x0a, 0x08, 0x50, 0x41, 0x6e, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0x31, 0x0a, 0x0e, 0x50, 0x41, 0x6e, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xd6, 0x01, 0x0a, 0x09, 0x50, 0x45, 0x6e, 0x75,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x50, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x45, 0x6e, 0x75,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x50, 0x45, 0x6e, 0x75, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x1a, 0xc6, 0x02, 0x0a, 0x0b, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x8d, 0x01, 0x0a, 0x06, 0x50, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x54, 0x0a, 0x0d, 0x50, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x1a,
	0x76, 0x0a, 0x0a, 0x50, 0x41, 0x72, 0x72, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x47,
	0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x09, 0x50, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x55, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e,
	0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x05, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f,
	0x41, 0x54, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e,
	0x47, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x0b,
	0x12, 0x08, 0x0a, 0x04, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10,
	0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x10, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfe, 0x02, 0x0a, 0x11, 0x50,
	0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x2f, 0x0a, 0x14, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x4d, 0x61, 0x70, 0x49, 0x73, 0x4e, 0x75, 0x6c,
	0x6c, 0x12, 0x5c, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x8f, 0x01, 0x0a, 0x0c, 0x49, 0x6e,
	0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x69, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x69, 0x0a, 0x18, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x65, 0x72, 0x63, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x69, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x15, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x65, 0x72, 0x63,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x93, 0x03, 0x0a, 0x13,
	0x50, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x1d, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x1e, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x63, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x5f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50,
	0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e,
	0x42, 0x69, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1b, 0x70, 0x72,
	0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x42,
	0x69, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x1a, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x5f, 0x63, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x5f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x61, 0x72, 0x72, 0x61, 0x79, 0x43,
	0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2a, 0x09, 0x08, 0x88, 0x27, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x42, 0x13, 0x0a, 0x11,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xe4, 0x03, 0x0a, 0x1c, 0x50, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xd8, 0x02,
	0x0a, 0x11, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x4f,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x46,
	0x4c, 0x4f, 0x41, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x4f,
	0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x4e,
	0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e,
	0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x05,
	0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x4f, 0x55,
	0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x54, 0x4f,
	0x5f, 0x49, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x54,
	0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x55, 0x4c, 0x4c,
	0x5f, 0x54, 0x4f, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x4e,
	0x55, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x0a, 0x12,
	0x13, 0x0a, 0x0f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x45,
	0x41, 0x4e, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x5f,
	0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x55, 0x4c, 0x4c,
	0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x4e,
	0x55, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x0e, 0x12,
	0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59,
	0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x4f, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x11, 0x22, 0x89, 0x02, 0x0a, 0x18, 0x50, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x74, 0x6f, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x74, 0x6f, 0x41, 0x72, 0x72, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a,
	0x0d, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x54, 0x72, 0x69, 0x65, 0x22, 0x8f, 0x03, 0x0a, 0x17, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x2f, 0x0a, 0x14, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x4d, 0x61, 0x70, 0x49, 0x73, 0x4e, 0x75, 0x6c,
	0x6c, 0x12, 0x62, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x6e,
	0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x69, 0x72, 0x52, 0x09, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x50, 0x61, 0x69, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xa1, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x50,
	0x61, 0x69, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x7b, 0x0a, 0x1e, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x72, 0x69, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x1b, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xee, 0x03, 0x0a, 0x14, 0x50, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x2f, 0x0a, 0x14, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x5f,
	0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x4d, 0x61, 0x70, 0x49, 0x73, 0x4e, 0x75, 0x6c, 0x6c,
	0x12, 0x6d, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xfb, 0x01, 0x0a, 0x1a, 0x50, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x69, 0x72, 0x12, 0x68, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x50,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x12, 0x73, 0x0a, 0x1c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x65, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x18, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x89, 0x1e, 0x0a, 0x06, 0x50, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x1d, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x61, 0x6e, 0x64, 0x5f,
	0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x41, 0x6e, 0x64, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6e,
	0x64, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x61, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69,
	0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x72, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x69, 0x0a, 0x15, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4d, 0x0a,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x53, 0x0a, 0x0d,
	0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x50, 0x0a, 0x0c, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x53, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x76,
	0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x4d, 0x61, 0x78, 0x45, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x45, 0x76, 0x65, 0x72,
	0x4c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x6d, 0x69, 0x6e,
	0x5f, 0x65, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x4d, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x72, 0x4c,
	0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x45,
	0x76, 0x65, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4b, 0x0a, 0x0b,
	0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x49, 0x6e, 0x4f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x69, 0x6e, 0x4f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x63, 0x0a, 0x13, 0x6c, 0x69, 0x6b,
	0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x4c, 0x69, 0x6b, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x69, 0x6b,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x53,
	0x0a, 0x0d, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x4e, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x0a,
	0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x50, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6e,
	0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x1d, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x50, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x53, 0x75, 0x6d, 0x48, 0x00,
	0x52, 0x1a, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x75, 0x6d, 0x12, 0x81, 0x01, 0x0a,
	0x1d, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x41,
	0x76, 0x67, 0x48, 0x00, 0x52, 0x1a, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x76, 0x67,
	0x12, 0x81, 0x01, 0x0a, 0x1d, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d,
	0x69, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x50, 0x4d, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x1a, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4d, 0x69, 0x6e, 0x12, 0x81, 0x01, 0x0a, 0x1d, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x4e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x4d, 0x61, 0x78, 0x48, 0x00, 0x52, 0x1a, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x50, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x6f, 0x66,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x0b, 0x6f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6a, 0x0a,
	0x16, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x6b,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x13, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6f, 0x72,
	0x4c, 0x69, 0x6b, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x70, 0x69, 0x63,
	0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50,
	0x69, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x70, 0x69, 0x63, 0x6b,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x53, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6f, 0x0a, 0x17, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x15, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x53, 0x0a, 0x0d, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x4a, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x61, 0x6e, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x72, 0x0a, 0x18,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x5d, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x61, 0x0a, 0x13, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x5f, 0x6f, 0x70,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x4f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x10, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x4f, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x5e, 0x0a, 0x12, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x5f,
	0x6f, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x55, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x4f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x0f, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x4f, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x6f, 0x0a, 0x17, 0x76, 0x61, 0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x5f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x15, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x53, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6a, 0x0a, 0x16, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4f,
	0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4f, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x68, 0x72, 0x6f,
	0x77, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x68, 0x72, 0x6f, 0x77,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x09, 0x08, 0x88, 0x27, 0x10, 0x80, 0x80, 0x80, 0x80,
	0x02, 0x42, 0x10, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x1e, 0x50, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x47, 0x0a, 0x0c, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x50, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x72, 0x0a, 0x1b, 0x50, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x53, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x50, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0xb0, 0x02, 0x0a, 0x0b, 0x50, 0x41, 0x6e, 0x64, 0x4f,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x6c,
	0x65, 0x66, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x12, 0x46, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x50, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x41, 0x6e, 0x64,
	0x4f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x1c, 0x0a, 0x09, 0x50,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10,
	0x01, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x02, 0x22, 0xc1, 0x0a, 0x0a, 0x10, 0x50, 0x41,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5d,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x50, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x44, 0x0a,
	0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x12, 0x46, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x22, 0xbf, 0x08, 0x0a, 0x11,
	0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x44, 0x5f, 0x49, 0x49, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x44, 0x44, 0x5f, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x44,
	0x5f, 0x49, 0x46, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x44, 0x5f, 0x49, 0x44, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x44, 0x5f, 0x49, 0x53, 0x10, 0x05, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x44, 0x44, 0x5f, 0x4c, 0x49, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x44,
	0x5f, 0x4c, 0x4c, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x44, 0x5f, 0x4c, 0x46, 0x10,
	0x08, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x44, 0x5f, 0x4c, 0x44, 0x10, 0x09, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x44, 0x44, 0x5f, 0x4c, 0x53, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x44,
	0x5f, 0x46, 0x49, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x44, 0x5f, 0x46, 0x4c, 0x10,
	0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x44, 0x5f, 0x46, 0x46, 0x10, 0x0d, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x44, 0x44, 0x5f, 0x46, 0x44, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x44,
	0x5f, 0x46, 0x53, 0x10, 0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x44, 0x5f, 0x44, 0x49, 0x10,
	0x10, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x44, 0x5f, 0x44, 0x4c, 0x10, 0x11, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x44, 0x44, 0x5f, 0x44, 0x46, 0x10, 0x12, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x44,
	0x5f, 0x44, 0x44, 0x10, 0x13, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x44, 0x5f, 0x44, 0x53, 0x10,
	0x14, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x44, 0x5f, 0x53, 0x49, 0x10, 0x15, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x44, 0x44, 0x5f, 0x53, 0x4c, 0x10, 0x16, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x44,
	0x5f, 0x53, 0x46, 0x10, 0x17, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x44, 0x5f, 0x53, 0x44, 0x10,
	0x18, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x44, 0x5f, 0x53, 0x53, 0x10, 0x19, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x55, 0x42, 0x5f, 0x49, 0x49, 0x10, 0x1a, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x42,
	0x5f, 0x49, 0x4c, 0x10, 0x1b, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x42, 0x5f, 0x49, 0x46, 0x10,
	0x1c, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x42, 0x5f, 0x49, 0x44, 0x10, 0x1d, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x55, 0x42, 0x5f, 0x4c, 0x49, 0x10, 0x1e, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x42,
	0x5f, 0x4c, 0x4c, 0x10, 0x1f, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x42, 0x5f, 0x4c, 0x46, 0x10,
	0x20, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x42, 0x5f, 0x4c, 0x44, 0x10, 0x21, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x55, 0x42, 0x5f, 0x46, 0x49, 0x10, 0x22, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x42,
	0x5f, 0x46, 0x4c, 0x10, 0x23, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x42, 0x5f, 0x46, 0x46, 0x10,
	0x24, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x42, 0x5f, 0x46, 0x44, 0x10, 0x25, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x55, 0x42, 0x5f, 0x44, 0x49, 0x10, 0x26, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x42,
	0x5f, 0x44, 0x4c, 0x10, 0x27, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x42, 0x5f, 0x44, 0x46, 0x10,
	0x28, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x42, 0x5f, 0x44, 0x44, 0x10, 0x29, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x55, 0x4c, 0x5f, 0x49, 0x49, 0x10, 0x2a, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x55, 0x4c,
	0x5f, 0x49, 0x4c, 0x10, 0x2b, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x55, 0x4c, 0x5f, 0x49, 0x46, 0x10,
	0x2c, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x55, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x2d, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x55, 0x4c, 0x5f, 0x4c, 0x49, 0x10, 0x2e, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x55, 0x4c,
	0x5f, 0x4c, 0x4c, 0x10, 0x2f, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x55, 0x4c, 0x5f, 0x4c, 0x46, 0x10,
	0x30, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x55, 0x4c, 0x5f, 0x4c, 0x44, 0x10, 0x31, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x55, 0x4c, 0x5f, 0x46, 0x49, 0x10, 0x32, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x55, 0x4c,
	0x5f, 0x46, 0x4c, 0x10, 0x33, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x55, 0x4c, 0x5f, 0x46, 0x46, 0x10,
	0x34, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x55, 0x4c, 0x5f, 0x46, 0x44, 0x10, 0x35, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x55, 0x4c, 0x5f, 0x44, 0x49, 0x10, 0x36, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x55, 0x4c,
	0x5f, 0x44, 0x4c, 0x10, 0x37, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x55, 0x4c, 0x5f, 0x44, 0x46, 0x10,
	0x38, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x55, 0x4c, 0x5f, 0x44, 0x44, 0x10, 0x39, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x49, 0x56, 0x5f, 0x49, 0x49, 0x10, 0x3a, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x56,
	0x5f, 0x49, 0x4c, 0x10, 0x3b, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x56, 0x5f, 0x49, 0x46, 0x10,
	0x3c, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x56, 0x5f, 0x49, 0x44, 0x10, 0x3d, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x49, 0x56, 0x5f, 0x4c, 0x49, 0x10, 0x3e, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x56,
	0x5f, 0x4c, 0x4c, 0x10, 0x3f, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x56, 0x5f, 0x4c, 0x46, 0x10,
	0x40, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x56, 0x5f, 0x4c, 0x44, 0x10, 0x41, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x49, 0x56, 0x5f, 0x46, 0x49, 0x10, 0x42, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x56,
	0x5f, 0x46, 0x4c, 0x10, 0x43, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x56, 0x5f, 0x46, 0x46, 0x10,
	0x44, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x56, 0x5f, 0x46, 0x44, 0x10, 0x45, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x49, 0x56, 0x5f, 0x44, 0x49, 0x10, 0x46, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x56,
	0x5f, 0x44, 0x4c, 0x10, 0x47, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x56, 0x5f, 0x44, 0x46, 0x10,
	0x48, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x56, 0x5f, 0x44, 0x44, 0x10, 0x49, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x4f, 0x44, 0x5f, 0x49, 0x49, 0x10, 0x4a, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44,
	0x5f, 0x49, 0x4c, 0x10, 0x4b, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44, 0x5f, 0x49, 0x46, 0x10,
	0x4c, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x4d, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x4f, 0x44, 0x5f, 0x4c, 0x49, 0x10, 0x4e, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44,
	0x5f, 0x4c, 0x4c, 0x10, 0x4f, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44, 0x5f, 0x4c, 0x46, 0x10,
	0x50, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44, 0x5f, 0x4c, 0x44, 0x10, 0x51, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x4f, 0x44, 0x5f, 0x46, 0x49, 0x10, 0x52, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44,
	0x5f, 0x46, 0x4c, 0x10, 0x53, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44, 0x5f, 0x46, 0x46, 0x10,
	0x54, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44, 0x5f, 0x46, 0x44, 0x10, 0x55, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x4f, 0x44, 0x5f, 0x44, 0x49, 0x10, 0x56, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44,
	0x5f, 0x44, 0x4c, 0x10, 0x57, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44, 0x5f, 0x44, 0x46, 0x10,
	0x58, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44, 0x5f, 0x44, 0x44, 0x10, 0x59, 0x22, 0x64, 0x0a,
	0x17, 0x50, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x50, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4d, 0x0a, 0x0e, 0x50, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x0b, 0x50, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x22, 0x2e, 0x0a, 0x11, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x10, 0x02,
	0x22, 0x99, 0x01, 0x0a, 0x0d, 0x50, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x0d, 0x0a, 0x0b,
	0x50, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x0c, 0x50,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x0b, 0x50, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x48, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x22, 0xef, 0x01, 0x0a, 0x0a, 0x50,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x64, 0x0a, 0x0f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x50, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52,
	0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x1a,
	0x7b, 0x0a, 0x11, 0x50, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x6c, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb8, 0x01, 0x0a,
	0x14, 0x50, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4f, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a,
	0x15, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x12, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x56, 0x0a, 0x0d, 0x50, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xf9, 0x01, 0x0a, 0x18, 0x50, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x6e, 0x6c, 0x79, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x65, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x6e, 0x6c, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x22, 0x39, 0x0a, 0x11, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x58, 0x5f, 0x45, 0x56, 0x45,
	0x52, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x49, 0x4e, 0x5f,
	0x45, 0x56, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x02, 0x22, 0xa1, 0x01, 0x0a, 0x0a,
	0x50, 0x49, 0x6e, 0x4f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x69, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x62, 0x0a, 0x11, 0x50, 0x4d, 0x61, 0x78, 0x45, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x6e, 0x6c, 0x79, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x22, 0x62, 0x0a, 0x11, 0x50, 0x4d, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x72, 0x4c,
	0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x6e,
	0x6c, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0xa4, 0x01, 0x0a, 0x12, 0x50, 0x4c, 0x69, 0x6b,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42,
	0x0a, 0x09, 0x73, 0x72, 0x63, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x72, 0x63, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x22, 0x9e,
	0x01, 0x0a, 0x0d, 0x50, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x48, 0x0a, 0x09, 0x50, 0x4e, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x05,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x22, 0x53, 0x0a, 0x0a, 0x50, 0x4e, 0x75,
	0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe0,
	0x05, 0x0a, 0x18, 0x50, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x65, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x1a,
	0x55, 0x0a, 0x04, 0x50, 0x53, 0x75, 0x6d, 0x12, 0x4d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x1a, 0x55, 0x0a, 0x04, 0x50, 0x41, 0x76, 0x67, 0x12, 0x4d,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x1a, 0x55, 0x0a,
	0x04, 0x50, 0x4d, 0x69, 0x6e, 0x12, 0x4d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x1a, 0x55, 0x0a, 0x04, 0x50, 0x4d, 0x61, 0x78, 0x12, 0x4d, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0xc3, 0x01, 0x0a, 0x11,
	0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x55, 0x4d, 0x5f, 0x49, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x53, 0x55, 0x4d, 0x5f, 0x4c, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x55, 0x4d, 0x5f, 0x46,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x55, 0x4d, 0x5f, 0x44, 0x10, 0x04, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x56, 0x47, 0x5f, 0x49, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x56, 0x47, 0x5f,
	0x4c, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x56, 0x47, 0x5f, 0x46, 0x10, 0x07, 0x12, 0x09,
	0x0a, 0x05, 0x41, 0x56, 0x47, 0x5f, 0x44, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x49, 0x4e,
	0x5f, 0x49, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x49, 0x4e, 0x5f, 0x4c, 0x10, 0x0a, 0x12,
	0x09, 0x0a, 0x05, 0x4d, 0x49, 0x4e, 0x5f, 0x46, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x49,
	0x4e, 0x5f, 0x44, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x58, 0x5f, 0x49, 0x10, 0x0d,
	0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05, 0x4d,
	0x41, 0x58, 0x5f, 0x46, 0x10, 0x0f, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x58, 0x5f, 0x44, 0x10,
	0x10, 0x22, 0x6b, 0x0a, 0x0c, 0x50, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x96,
	0x01, 0x0a, 0x0c, 0x50, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3b, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x49, 0x0a, 0x0d,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x14, 0x50, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x4a, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x0c,
	0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65, 0x73, 0x63, 0x61, 0x70,
	0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x0a, 0x50, 0x50, 0x69, 0x63, 0x6b,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xf8, 0x01, 0x0a, 0x0d, 0x50, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x72, 0x69, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x65, 0x72,
	0x63, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x65, 0x22, 0x75, 0x0a, 0x16, 0x50,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0d, 0x50, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x68,
	0x61, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x61, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x0a, 0x50, 0x52,
	0x61, 0x6e, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0xd2, 0x02,
	0x0a, 0x17, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x58, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x1a, 0x95, 0x01, 0x0a, 0x07, 0x50,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x4d, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x28, 0x0a, 0x10, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0xda, 0x01, 0x0a,
	0x0b, 0x50, 0x52, 0x65, 0x6c, 0x4f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x63, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xbd, 0x14, 0x0a, 0x11, 0x50, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x4f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x40, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x52, 0x65, 0x6c, 0x4f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x64, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x4f, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xff, 0x12, 0x0a, 0x17, 0x50, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f, 0x42, 0x55, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x51, 0x5f, 0x42, 0x42, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f,
	0x49, 0x55, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f, 0x49, 0x49, 0x10, 0x04, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f, 0x49, 0x4c, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51,
	0x5f, 0x49, 0x46, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f, 0x49, 0x44, 0x10, 0x07,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f, 0x4c, 0x55, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x51, 0x5f, 0x4c, 0x49, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f, 0x4c, 0x4c, 0x10,
	0x0a, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f, 0x4c, 0x46, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x51, 0x5f, 0x4c, 0x44, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f, 0x46, 0x55,
	0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f, 0x46, 0x49, 0x10, 0x0e, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x51, 0x5f, 0x46, 0x4c, 0x10, 0x0f, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f, 0x46,
	0x46, 0x10, 0x10, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f, 0x46, 0x44, 0x10, 0x11, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x51, 0x5f, 0x44, 0x55, 0x10, 0x12, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f,
	0x44, 0x49, 0x10, 0x13, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f, 0x44, 0x4c, 0x10, 0x14, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f, 0x44, 0x46, 0x10, 0x15, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51,
	0x5f, 0x44, 0x44, 0x10, 0x16, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f, 0x53, 0x55, 0x10, 0x17,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f, 0x53, 0x53, 0x10, 0x18, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x51, 0x5f, 0x55, 0x55, 0x10, 0x19, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f, 0x55, 0x42, 0x10,
	0x1a, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f, 0x55, 0x49, 0x10, 0x1b, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x51, 0x5f, 0x55, 0x4c, 0x10, 0x1c, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f, 0x55, 0x46,
	0x10, 0x1d, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f, 0x55, 0x44, 0x10, 0x1e, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x51, 0x5f, 0x55, 0x53, 0x10, 0x1f, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f, 0x55,
	0x56, 0x10, 0x20, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x5f, 0x56, 0x55, 0x10, 0x21, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x51, 0x5f, 0x56, 0x56, 0x10, 0x22, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51,
	0x5f, 0x42, 0x55, 0x10, 0x23, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51, 0x5f, 0x42, 0x42, 0x10,
	0x24, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51, 0x5f, 0x49, 0x55, 0x10, 0x25, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x45, 0x51, 0x5f, 0x49, 0x49, 0x10, 0x26, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51,
	0x5f, 0x49, 0x4c, 0x10, 0x27, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51, 0x5f, 0x49, 0x46, 0x10,
	0x28, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51, 0x5f, 0x49, 0x44, 0x10, 0x29, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x45, 0x51, 0x5f, 0x4c, 0x55, 0x10, 0x2a, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51,
	0x5f, 0x4c, 0x49, 0x10, 0x2b, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51, 0x5f, 0x4c, 0x4c, 0x10,
	0x2c, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51, 0x5f, 0x4c, 0x46, 0x10, 0x2d, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x45, 0x51, 0x5f, 0x4c, 0x44, 0x10, 0x2e, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51,
	0x5f, 0x46, 0x55, 0x10, 0x2f, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51, 0x5f, 0x46, 0x49, 0x10,
	0x30, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51, 0x5f, 0x46, 0x4c, 0x10, 0x31, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x45, 0x51, 0x5f, 0x46, 0x46, 0x10, 0x32, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51,
	0x5f, 0x46, 0x44, 0x10, 0x33, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51, 0x5f, 0x44, 0x55, 0x10,
	0x34, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51, 0x5f, 0x44, 0x49, 0x10, 0x35, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x45, 0x51, 0x5f, 0x44, 0x4c, 0x10, 0x36, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51,
	0x5f, 0x44, 0x46, 0x10, 0x37, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51, 0x5f, 0x44, 0x44, 0x10,
	0x38, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51, 0x5f, 0x53, 0x55, 0x10, 0x39, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x45, 0x51, 0x5f, 0x53, 0x53, 0x10, 0x3a, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51,
	0x5f, 0x55, 0x55, 0x10, 0x3b, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51, 0x5f, 0x55, 0x42, 0x10,
	0x3c, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51, 0x5f, 0x55, 0x49, 0x10, 0x3d, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x45, 0x51, 0x5f, 0x55, 0x4c, 0x10, 0x3e, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51,
	0x5f, 0x55, 0x46, 0x10, 0x3f, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51, 0x5f, 0x55, 0x44, 0x10,
	0x40, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51, 0x5f, 0x55, 0x53, 0x10, 0x41, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x45, 0x51, 0x5f, 0x55, 0x56, 0x10, 0x42, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51,
	0x5f, 0x56, 0x55, 0x10, 0x43, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x51, 0x5f, 0x56, 0x56, 0x10,
	0x44, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x49, 0x55, 0x10, 0x45, 0x12, 0x09, 0x0a, 0x05,
	0x4c, 0x54, 0x5f, 0x49, 0x49, 0x10, 0x46, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x49, 0x4c,
	0x10, 0x47, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x49, 0x46, 0x10, 0x48, 0x12, 0x09, 0x0a,
	0x05, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x49, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x4c,
	0x55, 0x10, 0x4a, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x4c, 0x49, 0x10, 0x4b, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x4c, 0x4c, 0x10, 0x4c, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f,
	0x4c, 0x46, 0x10, 0x4d, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x4c, 0x44, 0x10, 0x4e, 0x12,
	0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x46, 0x55, 0x10, 0x4f, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54,
	0x5f, 0x46, 0x49, 0x10, 0x50, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x46, 0x4c, 0x10, 0x51,
	0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x46, 0x46, 0x10, 0x52, 0x12, 0x09, 0x0a, 0x05, 0x4c,
	0x54, 0x5f, 0x46, 0x44, 0x10, 0x53, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x44, 0x55, 0x10,
	0x54, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x44, 0x49, 0x10, 0x55, 0x12, 0x09, 0x0a, 0x05,
	0x4c, 0x54, 0x5f, 0x44, 0x4c, 0x10, 0x56, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x44, 0x46,
	0x10, 0x57, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x44, 0x44, 0x10, 0x58, 0x12, 0x09, 0x0a,
	0x05, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x10, 0x59, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x53,
	0x53, 0x10, 0x5a, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x55, 0x55, 0x10, 0x5b, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x55, 0x42, 0x10, 0x5c, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f,
	0x55, 0x49, 0x10, 0x5d, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x55, 0x4c, 0x10, 0x5e, 0x12,
	0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x55, 0x46, 0x10, 0x5f, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54,
	0x5f, 0x55, 0x44, 0x10, 0x60, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x55, 0x53, 0x10, 0x61,
	0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x55, 0x56, 0x10, 0x62, 0x12, 0x09, 0x0a, 0x05, 0x4c,
	0x54, 0x5f, 0x56, 0x55, 0x10, 0x63, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x56, 0x56, 0x10,
	0x64, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x54, 0x45, 0x5f, 0x49, 0x55, 0x10, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x4c, 0x54, 0x45, 0x5f, 0x49, 0x49, 0x10, 0x66, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x54, 0x45,
	0x5f, 0x49, 0x4c, 0x10, 0x67, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x54, 0x45, 0x5f, 0x49, 0x46, 0x10,
	0x68, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x69, 0x12, 0x0a, 0x0a,
	0x06, 0x4c, 0x54, 0x45, 0x5f, 0x4c, 0x55, 0x10, 0x6a, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x54, 0x45,
	0x5f, 0x4c, 0x49, 0x10, 0x6b, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x54, 0x45, 0x5f, 0x4c, 0x4c, 0x10,
	0x6c, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x54, 0x45, 0x5f, 0x4c, 0x46, 0x10, 0x6d, 0x12, 0x0a, 0x0a,
	0x06, 0x4c, 0x54, 0x45, 0x5f, 0x4c, 0x44, 0x10, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x54, 0x45,
	0x5f, 0x46, 0x55, 0x10, 0x6f, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x10,
	0x70, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x10, 0x71, 0x12, 0x0a, 0x0a,
	0x06, 0x4c, 0x54, 0x45, 0x5f, 0x46, 0x46, 0x10, 0x72, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x54, 0x45,
	0x5f, 0x46, 0x44, 0x10, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x54, 0x45, 0x5f, 0x44, 0x55, 0x10,
	0x74, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x10, 0x75, 0x12, 0x0a, 0x0a,
	0x06, 0x4c, 0x54, 0x45, 0x5f, 0x44, 0x4c, 0x10, 0x76, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x54, 0x45,
	0x5f, 0x44, 0x46, 0x10, 0x77, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x54, 0x45, 0x5f, 0x44, 0x44, 0x10,
	0x78, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x10, 0x79, 0x12, 0x0a, 0x0a,
	0x06, 0x4c, 0x54, 0x45, 0x5f, 0x53, 0x53, 0x10, 0x7a, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x54, 0x45,
	0x5f, 0x55, 0x55, 0x10, 0x7b, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x54, 0x45, 0x5f, 0x55, 0x42, 0x10,
	0x7c, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x54, 0x45, 0x5f, 0x55, 0x49, 0x10, 0x7d, 0x12, 0x0a, 0x0a,
	0x06, 0x4c, 0x54, 0x45, 0x5f, 0x55, 0x4c, 0x10, 0x7e, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x54, 0x45,
	0x5f, 0x55, 0x46, 0x10, 0x7f, 0x12, 0x0b, 0x0a, 0x06, 0x4c, 0x54, 0x45, 0x5f, 0x55, 0x44, 0x10,
	0x80, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x4c, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x10, 0x81, 0x01, 0x12,
	0x0b, 0x0a, 0x06, 0x4c, 0x54, 0x45, 0x5f, 0x55, 0x56, 0x10, 0x82, 0x01, 0x12, 0x0b, 0x0a, 0x06,
	0x4c, 0x54, 0x45, 0x5f, 0x56, 0x55, 0x10, 0x83, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x4c, 0x54, 0x45,
	0x5f, 0x56, 0x56, 0x10, 0x84, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54, 0x5f, 0x49, 0x55, 0x10,
	0x85, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54, 0x5f, 0x49, 0x49, 0x10, 0x86, 0x01, 0x12, 0x0a,
	0x0a, 0x05, 0x47, 0x54, 0x5f, 0x49, 0x4c, 0x10, 0x87, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54,
	0x5f, 0x49, 0x46, 0x10, 0x88, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54, 0x5f, 0x49, 0x44, 0x10,
	0x89, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54, 0x5f, 0x4c, 0x55, 0x10, 0x8a, 0x01, 0x12, 0x0a,
	0x0a, 0x05, 0x47, 0x54, 0x5f, 0x4c, 0x49, 0x10, 0x8b, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54,
	0x5f, 0x4c, 0x4c, 0x10, 0x8c, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54, 0x5f, 0x4c, 0x46, 0x10,
	0x8d, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54, 0x5f, 0x4c, 0x44, 0x10, 0x8e, 0x01, 0x12, 0x0a,
	0x0a, 0x05, 0x47, 0x54, 0x5f, 0x46, 0x55, 0x10, 0x8f, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54,
	0x5f, 0x46, 0x49, 0x10, 0x90, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54, 0x5f, 0x46, 0x4c, 0x10,
	0x91, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54, 0x5f, 0x46, 0x46, 0x10, 0x92, 0x01, 0x12, 0x0a,
	0x0a, 0x05, 0x47, 0x54, 0x5f, 0x46, 0x44, 0x10, 0x93, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54,
	0x5f, 0x44, 0x55, 0x10, 0x94, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54, 0x5f, 0x44, 0x49, 0x10,
	0x95, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54, 0x5f, 0x44, 0x4c, 0x10, 0x96, 0x01, 0x12, 0x0a,
	0x0a, 0x05, 0x47, 0x54, 0x5f, 0x44, 0x46, 0x10, 0x97, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54,
	0x5f, 0x44, 0x44, 0x10, 0x98, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54, 0x5f, 0x53, 0x55, 0x10,
	0x99, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54, 0x5f, 0x53, 0x53, 0x10, 0x9a, 0x01, 0x12, 0x0a,
	0x0a, 0x05, 0x47, 0x54, 0x5f, 0x55, 0x55, 0x10, 0x9b, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54,
	0x5f, 0x55, 0x42, 0x10, 0x9c, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54, 0x5f, 0x55, 0x49, 0x10,
	0x9d, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54, 0x5f, 0x55, 0x4c, 0x10, 0x9e, 0x01, 0x12, 0x0a,
	0x0a, 0x05, 0x47, 0x54, 0x5f, 0x55, 0x46, 0x10, 0x9f, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54,
	0x5f, 0x55, 0x44, 0x10, 0xa0, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54, 0x5f, 0x55, 0x53, 0x10,
	0xa1, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54, 0x5f, 0x55, 0x56, 0x10, 0xa2, 0x01, 0x12, 0x0a,
	0x0a, 0x05, 0x47, 0x54, 0x5f, 0x56, 0x55, 0x10, 0xa3, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x54,
	0x5f, 0x56, 0x56, 0x10, 0xa4, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f, 0x49, 0x55,
	0x10, 0xa5, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f, 0x49, 0x49, 0x10, 0xa6, 0x01,
	0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f, 0x49, 0x4c, 0x10, 0xa7, 0x01, 0x12, 0x0b, 0x0a,
	0x06, 0x47, 0x54, 0x45, 0x5f, 0x49, 0x46, 0x10, 0xa8, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54,
	0x45, 0x5f, 0x49, 0x44, 0x10, 0xa9, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f, 0x4c,
	0x55, 0x10, 0xaa, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x10, 0xab,
	0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f, 0x4c, 0x4c, 0x10, 0xac, 0x01, 0x12, 0x0b,
	0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f, 0x4c, 0x46, 0x10, 0xad, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47,
	0x54, 0x45, 0x5f, 0x4c, 0x44, 0x10, 0xae, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f,
	0x46, 0x55, 0x10, 0xaf, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x10,
	0xb0, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x10, 0xb1, 0x01, 0x12,
	0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f, 0x46, 0x46, 0x10, 0xb2, 0x01, 0x12, 0x0b, 0x0a, 0x06,
	0x47, 0x54, 0x45, 0x5f, 0x46, 0x44, 0x10, 0xb3, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45,
	0x5f, 0x44, 0x55, 0x10, 0xb4, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f, 0x44, 0x49,
	0x10, 0xb5, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f, 0x44, 0x4c, 0x10, 0xb6, 0x01,
	0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f, 0x44, 0x46, 0x10, 0xb7, 0x01, 0x12, 0x0b, 0x0a,
	0x06, 0x47, 0x54, 0x45, 0x5f, 0x44, 0x44, 0x10, 0xb8, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54,
	0x45, 0x5f, 0x53, 0x55, 0x10, 0xb9, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f, 0x53,
	0x53, 0x10, 0xba, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f, 0x55, 0x55, 0x10, 0xbb,
	0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f, 0x55, 0x42, 0x10, 0xbc, 0x01, 0x12, 0x0b,
	0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f, 0x55, 0x49, 0x10, 0xbd, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47,
	0x54, 0x45, 0x5f, 0x55, 0x4c, 0x10, 0xbe, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f,
	0x55, 0x46, 0x10, 0xbf, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f, 0x55, 0x44, 0x10,
	0xc0, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x10, 0xc1, 0x01, 0x12,
	0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45, 0x5f, 0x55, 0x56, 0x10, 0xc2, 0x01, 0x12, 0x0b, 0x0a, 0x06,
	0x47, 0x54, 0x45, 0x5f, 0x56, 0x55, 0x10, 0xc3, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x54, 0x45,
	0x5f, 0x56, 0x56, 0x10, 0xc4, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x45, 0x51, 0x5f, 0x42, 0x59, 0x55,
	0x10, 0xc5, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x45, 0x51, 0x5f, 0x42, 0x59, 0x42, 0x59, 0x10, 0xc6,
	0x01, 0x12, 0x0b, 0x0a, 0x06, 0x45, 0x51, 0x5f, 0x55, 0x42, 0x59, 0x10, 0xc7, 0x01, 0x12, 0x0c,
	0x0a, 0x07, 0x4e, 0x45, 0x51, 0x5f, 0x42, 0x59, 0x55, 0x10, 0xc8, 0x01, 0x12, 0x0d, 0x0a, 0x08,
	0x4e, 0x45, 0x51, 0x5f, 0x42, 0x59, 0x42, 0x59, 0x10, 0xc9, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x4e,
	0x45, 0x51, 0x5f, 0x55, 0x42, 0x59, 0x10, 0xca, 0x01, 0x22, 0x55, 0x0a, 0x0c, 0x50, 0x54, 0x68,
	0x72, 0x6f, 0x77, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xf3, 0x03, 0x0a, 0x10, 0x50, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x4f, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x6c, 0x4f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x55, 0x6e, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x6c, 0x4f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x55, 0x6e, 0x61, 0x72,
	0x79, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xb8, 0x02, 0x0a, 0x16,
	0x50, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x53, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x5f, 0x55, 0x49, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x53, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x5f, 0x49, 0x49, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x53, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x5f, 0x4c, 0x49, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x53, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x5f, 0x46, 0x49, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x53, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x5f, 0x44, 0x49, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x53, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x5f, 0x53, 0x53, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x53, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x5f, 0x42, 0x49, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x55, 0x49, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x49, 0x49, 0x10, 0x09, 0x12, 0x12,
	0x0a, 0x0e, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x4c, 0x49,
	0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x5f, 0x46, 0x49, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x44, 0x49, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x53, 0x10, 0x0d, 0x12, 0x12,
	0x0a, 0x0e, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x42, 0x49,
	0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x53, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x42, 0x59,
	0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x5f, 0x42, 0x59, 0x10, 0x10, 0x22, 0x95, 0x01, 0x0a, 0x09, 0x50, 0x55, 0x64, 0x66, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd8,
	0x04, 0x0a, 0x16, 0x50, 0x56, 0x61, 0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x63, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x64, 0x69, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x41,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x22, 0x95, 0x03, 0x0a, 0x11, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e,
	0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53,
	0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x53, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x47,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x06,
	0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x07, 0x12,
	0x0e, 0x0a, 0x0a, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x08, 0x12,
	0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e,
	0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x46, 0x4c,
	0x4f, 0x41, 0x54, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x44,
	0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x41, 0x4c, 0x45,
	0x53, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x41,
	0x4c, 0x45, 0x53, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x4f, 0x41, 0x4c, 0x45, 0x53, 0x43, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e,
	0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x41, 0x4c, 0x45, 0x53, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x41, 0x4c, 0x45,
	0x53, 0x43, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4f, 0x41, 0x4c, 0x45, 0x53, 0x43, 0x45, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x12,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x41, 0x4c, 0x45, 0x53, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x10, 0x13, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x41, 0x4c, 0x45, 0x53, 0x43,
	0x45, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x14, 0x22, 0x2e, 0x0a, 0x0d, 0x50, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x0e, 0x50, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x56, 0x0a, 0x13,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0xc2, 0x0b, 0x0a, 0x0b, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x15, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x73, 0x12, 0x5f, 0x0a, 0x11, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x10, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x5c,
	0x0a, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x0f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x0f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x50, 0x4e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0e, 0x6e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x12, 0x78, 0x0a, 0x1a, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x65, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x45, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x18, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x17,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x7e, 0x0a,
	0x1c, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x1a, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x6c, 0x0a,
	0x16, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x22, 0x89, 0x03, 0x0a, 0x0f,
	0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x53, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x48, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10,
	0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x52, 0x54, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x08,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x53, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x09, 0x12, 0x06, 0x0a,
	0x02, 0x49, 0x4e, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18,
	0x54, 0x45, 0x58, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x41, 0x4c,
	0x4c, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x49, 0x4e, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x45,
	0x58, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x41, 0x4e, 0x59, 0x10,
	0x0d, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x53, 0x5f, 0x50, 0x48, 0x52, 0x41, 0x53, 0x45, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x50, 0x52, 0x45,
	0x46, 0x49, 0x58, 0x10, 0x0f, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49,
	0x58, 0x45, 0x53, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49,
	0x58, 0x10, 0x11, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4f, 0x52, 0x54, 0x10, 0x12, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x13, 0x2a, 0x09, 0x08, 0x88, 0x27, 0x10, 0x80, 0x80, 0x80,
	0x80, 0x02, 0x42, 0x15, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x22, 0xad, 0x01, 0x0a, 0x11, 0x50, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12,
	0x4e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x48, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x9d, 0x03, 0x0a, 0x11, 0x50, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x51, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x51, 0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x45, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x55, 0x55, 0x49, 0x44, 0x48, 0x00, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x60, 0x0a, 0x12, 0x66, 0x64, 0x62, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x46,
	0x44, 0x42, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x10, 0x66, 0x64, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x73, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x11, 0x62, 0x79, 0x74, 0x65, 0x73, 0x41, 0x73, 0x42, 0x79, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x11, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x3d, 0x0a, 0x0f, 0x50, 0x45, 0x6e,
	0x75, 0x6d, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x4d, 0x0a, 0x05, 0x50, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x73, 0x74, 0x53, 0x69, 0x67, 0x42, 0x69, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x6f, 0x73, 0x74, 0x53, 0x69, 0x67, 0x42,
	0x69, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x53, 0x69, 0x67, 0x42,
	0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x74,
	0x53, 0x69, 0x67, 0x42, 0x69, 0x74, 0x73, 0x22, 0x30, 0x0a, 0x11, 0x50, 0x46, 0x44, 0x42, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x61, 0x77, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x72, 0x61, 0x77, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xa3, 0x02, 0x0a, 0x14, 0x50, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x5c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0x3f,
	0x0a, 0x0c, 0x50, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x06,
	0x0a, 0x02, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x04, 0x22,
	0xb1, 0x01, 0x0a, 0x10, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2e, 0x50,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x6e,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x6e, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x0f, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x61, 0x6e, 0x64, 0x22, 0x61, 0x0a, 0x0f, 0x50, 0x4e, 0x75, 0x6c, 0x6c,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x50, 0x4f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x16, 0x50, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x22, 0x8f, 0x02, 0x0a, 0x1b, 0x50, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2e,
	0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x41, 0x0a, 0x15, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xda, 0x08, 0x0a, 0x0f, 0x50, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x1b,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x19, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0d, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x41, 0x6e, 0x64,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x6e, 0x64,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a,
	0x10, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x0d, 0x6e,
	0x6f, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x4e, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x50, 0x0a, 0x0c, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x4f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x1f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x41, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1b, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41,
	0x6e, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x26, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x23, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x2a, 0x09, 0x08, 0x88, 0x27, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x42,
	0x14, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x36, 0x0a, 0x17, 0x50, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x22, 0xab, 0x01,
	0x0a, 0x0f, 0x50, 0x41, 0x6e, 0x64, 0x4f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x4c, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x50, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x4a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x55, 0x0a, 0x0d, 0x50,
	0x41, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x41, 0x6e, 0x64,
	0x4f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x22, 0x89, 0x03, 0x0a, 0x21, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x23, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x61, 0x69, 0x72, 0x52, 0x1e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x61, 0x69, 0x72, 0x73, 0x1a, 0xb4, 0x01, 0x0a, 0x1e, 0x50, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x69, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x16, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x78,
	0x0a, 0x12, 0x50, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x24, 0x50, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x71, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x55, 0x73,
	0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x73, 0x1a, 0x54, 0x0a, 0x0a, 0x50, 0x55, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x50,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x4c, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x11, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x0d, 0x50,
	0x4e, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x41, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x05, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x22, 0x54, 0x0a, 0x0c, 0x50, 0x4f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x44, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x50, 0x41, 0x6e, 0x64, 0x4f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0xf3, 0x01, 0x0a, 0x1c, 0x50, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6e,
	0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xc2, 0x01, 0x0a,
	0x11, 0x50, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x58, 0x0a, 0x0f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x53, 0x0a, 0x0f,
	0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x22, 0x75, 0x0a, 0x10, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x0f, 0x50, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x41, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x13, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x12, 0x56, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x50, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x5b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0x8f, 0x1c, 0x0a,
	0x10, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x41, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x73, 0x12, 0x71, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x6c, 0x61,
	0x6e, 0x48, 0x00, 0x52, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x6e, 0x0a, 0x13, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x6c,
	0x61, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x4f, 0x0a, 0x08, 0x64, 0x61, 0x6d, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52,
	0x07, 0x64, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x58, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x5b, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x48, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x8b, 0x01, 0x0a, 0x1e, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x74, 0x63, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x48,
	0x00, 0x52, 0x1a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x72, 0x0a,
	0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4f, 0x72,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4f, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x5c, 0x0a, 0x0d, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x6c, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x6e,
	0x48, 0x00, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x75, 0x0a, 0x16, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x6e, 0x64, 0x5f,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x61, 0x6e, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x48,
	0x00, 0x52, 0x13, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x6e, 0x64, 0x4a, 0x6f,
	0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x6d, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52,
	0x14, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x75, 0x0a, 0x16, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4a, 0x6f, 0x69,
	0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x58, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x9a, 0x01, 0x0a, 0x23, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4b,
	0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e,
	0x48, 0x00, 0x52, 0x1f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x6e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x6c, 0x61, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00,
	0x52, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x8c, 0x01, 0x0a, 0x1f, 0x69,
	0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x1a, 0x69,
	0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x76, 0x0a, 0x17, 0x69, 0x6e, 0x5f,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x69, 0x6e,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x6c, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x6a,
	0x6f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x69,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x4f, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61,
	0x70, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x77, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61,
	0x6e, 0x48, 0x00, 0x52, 0x14, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x55, 0x0a, 0x0a, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x52, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x63, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x6c, 0x0a, 0x13, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00,
	0x52, 0x10, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x52, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6f,
	0x72, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x83, 0x01, 0x0a, 0x1a, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e,
	0x48, 0x00, 0x52, 0x18, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x65, 0x0a, 0x10,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61,
	0x6e, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50,
	0x6c, 0x61, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x1c, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4b, 0x65,
	0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x48,
	0x00, 0x52, 0x18, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x6f, 0x0a, 0x14, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x4f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x7a, 0x0a, 0x17,
	0x75, 0x6e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x63, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x65, 0x64, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x48,
	0x00, 0x52, 0x15, 0x75, 0x6e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x44, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x9a, 0x01, 0x0a, 0x23, 0x75, 0x6e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x55, 0x6e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x48, 0x00, 0x52, 0x1f, 0x75, 0x6e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x71, 0x0a, 0x14, 0x75, 0x6e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x55, 0x6e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x50, 0x6c,
	0x61, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x75, 0x6e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x58, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x2a, 0x09, 0x08, 0x88, 0x27, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x42, 0x0f, 0x0a,
	0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x22, 0xce,
	0x04, 0x0a, 0x28, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x48, 0x0a, 0x05, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x13, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x72, 0x69,
	0x65, 0x12, 0x55, 0x0a, 0x0d, 0x63, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72,
	0x69, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x65, 0x72,
	0x63, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x1d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x22,
	0x99, 0x03, 0x0a, 0x1e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x53, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x09, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x59, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x08, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x48, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x22, 0xf4, 0x01, 0x0a, 0x1d,
	0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x4e, 0x0a,
	0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x22, 0xf8, 0x0b, 0x0a, 0x1d, 0x50, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x5e, 0x0a, 0x07, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x70,
	0x69, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x1a, 0xd4, 0x02, 0x0a, 0x07, 0x50, 0x43, 0x6f, 0x70, 0x69, 0x65,
	0x72, 0x12, 0x45, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x70, 0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x72, 0x73, 0x12, 0x6e, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x72, 0x12, 0x74, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x50, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x72, 0x2a, 0x09,
	0x08, 0x88, 0x27, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x42, 0x11, 0x0a, 0x0f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x72, 0x1a, 0xa5, 0x02, 0x0a,
	0x0c, 0x50, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x61, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x79, 0x0a, 0x11, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x69,
	0x66, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x50, 0x43, 0x6f, 0x70, 0x79, 0x49, 0x66, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x49, 0x66, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x1a, 0xa9, 0x04, 0x0a, 0x10, 0x50, 0x43, 0x6f, 0x70, 0x79, 0x49, 0x66,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x1c, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x69, 0x66, 0x5f,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x19, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x70, 0x79, 0x49, 0x66, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x70, 0x79, 0x49,
	0x66, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x54, 0x72, 0x75, 0x65,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x72, 0x75,
	0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0xb4, 0x01, 0x0a, 0x1f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x70, 0x79, 0x49, 0x66, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x55, 0x70, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x55, 0x70, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x1a, 0x10, 0x0a, 0x0e, 0x50, 0x54, 0x72, 0x75, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x1a, 0x42, 0x0a, 0x1d, 0x50, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x55, 0x70, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x2a, 0x09, 0x08, 0x88, 0x27, 0x10, 0x80, 0x80, 0x80,
	0x80, 0x02, 0x42, 0x1c, 0x0a, 0x1a, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63,
	0x6f, 0x70, 0x79, 0x5f, 0x69, 0x66, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x1a, 0x7c, 0x0a, 0x0e, 0x50, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x70, 0x69,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x54, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x22, 0x2d,
	0x0a, 0x0c, 0x50, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x4b, 0x45, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x22, 0xa5, 0x01,
	0x0a, 0x13, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61,
	0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x48, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12,
	0x44, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x62, 0x0a, 0x16, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x48, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x6b, 0x0a, 0x17, 0x50, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x50, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9c, 0x02, 0x0a, 0x26, 0x50, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x74, 0x63, 0x68, 0x46, 0x72, 0x6f, 0x6d,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x48, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x50, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x11, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x66, 0x0a, 0x1a, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x42,
	0x61, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0xc4, 0x01,
	0x0a, 0x1e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x4f, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x48, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x15, 0x6f, 0x6e,
	0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x12, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x17, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x6c, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x5d, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x5d, 0x0a, 0x10, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0f, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x48,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x69, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1c, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22,
	0x92, 0x05, 0x0a, 0x15, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x5c, 0x0a, 0x0f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x5e, 0x0a, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x61, 0x0a, 0x13, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x50, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x11, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x6c, 0x79, 0x5f, 0x73, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x6c, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x53, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x22, 0xb0, 0x04, 0x0a, 0x14, 0x50, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53,
	0x63, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5f, 0x0a,
	0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52,
	0x1d, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x53, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6c,
	0x0a, 0x16, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x63, 0x61,
	0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x9d, 0x01, 0x0a,
	0x27, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x24, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x63, 0x61,
	0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x7c, 0x0a, 0x1c,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x63,
	0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52,
	0x19, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x2a, 0x09, 0x08, 0x88, 0x27, 0x10,
	0x80, 0x80, 0x80, 0x80, 0x02, 0x42, 0x20, 0x0a, 0x1e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x24, 0x0a, 0x0e, 0x50, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd4, 0x01,
	0x0a, 0x10, 0x50, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x73, 0x12, 0x5d, 0x0a, 0x14, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x13, 0x65, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x73, 0x12, 0x61, 0x0a, 0x16, 0x69, 0x6e, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x15, 0x69,
	0x6e, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x15, 0x50, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53,
	0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x4a,
	0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x10, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0xea, 0x02, 0x0a, 0x25, 0x50, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73,
	0x12, 0x67, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x73, 0x52, 0x15, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x6f, 0x0a, 0x1b, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x52,
	0x19, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x67, 0x0a, 0x17, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x53, 0x63, 0x61,
	0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x52, 0x15, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x16, 0x50, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x46, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3c,
	0x0a, 0x1a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x1f,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x22, 0xc0, 0x01, 0x0a, 0x1a, 0x50, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x56, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x46, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x64, 0x0a, 0x14, 0x50, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12,
	0x4c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x6e, 0x0a,
	0x1f, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x6e, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x4b, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x4a, 0x6f,
	0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0xa2, 0x02,
	0x0a, 0x16, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e,
	0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x63, 0x0a, 0x13, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x12, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x45, 0x0a,
	0x09, 0x69, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x50, 0x49, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x22, 0xd2, 0x05, 0x0a, 0x09, 0x50, 0x49, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x63, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x6e, 0x64,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x49,
	0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x6e, 0x64, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x76, 0x0a, 0x1a, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x53, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x17, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x63, 0x0a,
	0x13, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x49, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x11, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x76, 0x0a, 0x1a, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x17, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x10, 0x69, 0x6e,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x17, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x14, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x2a, 0x0a, 0x05, 0x53, 0x75, 0x70, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x14, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x69, 0x6e,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x50, 0x49, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x44,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x49,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x22, 0x7d, 0x0a, 0x18, 0x50, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x49, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22,
	0x81, 0x01, 0x0a, 0x12, 0x50, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x49, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x7d, 0x0a, 0x18, 0x50, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x47, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x49, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x0f, 0x50, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x49, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x77, 0x0a, 0x15, 0x50, 0x53, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x44, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x49, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22,
	0x6e, 0x0a, 0x1f, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e,
	0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22,
	0x77, 0x0a, 0x16, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x5d, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0xfd, 0x01, 0x0a, 0x1c, 0x50, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x54, 0x0a, 0x0b, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12,
	0x6d, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0x98, 0x04, 0x0a, 0x16, 0x50, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x11, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x4f, 0x6e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x09, 0x6f, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x4f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x08, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x7c, 0x0a, 0x10, 0x50, 0x4f, 0x6e,
	0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a,
	0x19, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x17,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x85, 0x01, 0x0a, 0x09, 0x50, 0x4f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x59, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42,
	0x22, 0x0a, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x2b, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x6e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x6c, 0x61, 0x6e, 0x12, 0x51, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0x79, 0x0a, 0x24, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x51,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x22, 0xd3, 0x03, 0x0a, 0x17, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x48, 0x0a,
	0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0a, 0x69, 0x6e, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x49, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x6d, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x61, 0x78,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x18, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x5c, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x2e, 0x50, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0x76, 0x0a, 0x26, 0x50, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4f, 0x6e,
	0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x4c, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22,
	0x6f, 0x0a, 0x1f, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x4c, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x22, 0x6b, 0x0a, 0x1c, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x4b, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x4a, 0x6f,
	0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0xa9, 0x01,
	0x0a, 0x13, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61,
	0x70, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x48, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12,
	0x48, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x20, 0x50, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x4f,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x4e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x72, 0x0a, 0x15, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x59, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x14, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x48, 0x0a, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x6f, 0x0a, 0x13,
	0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x72, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0x9c, 0x03,
	0x0a, 0x14, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x63,
	0x61, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x68, 0x61, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x66, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x12, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x53, 0x63, 0x61,
	0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x6c, 0x79, 0x5f,
	0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x6c, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x22, 0xac, 0x01, 0x0a,
	0x1c, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x48, 0x0a,
	0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72,
	0x52, 0x61, 0x6e, 0x6b, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x22, 0xb1, 0x03, 0x0a, 0x0d,
	0x50, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x68, 0x0a, 0x10, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x46, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x2e, 0x50, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0x71, 0x0a, 0x10,
	0x50, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f,
	0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e,
	0x47, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x55, 0x50, 0x4c, 0x45, 0x10, 0x08, 0x22,
	0x8b, 0x01, 0x0a, 0x17, 0x50, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x46, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xc7, 0x03,
	0x0a, 0x24, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x48, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x12, 0x4e, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x53, 0x0a, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x59, 0x0a, 0x15,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x1a, 0x50, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x48, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x72, 0x0a, 0x24, 0x50, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4f,
	0x6e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x4a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0x6b,
	0x0a, 0x1d, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x4a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0x86, 0x02, 0x0a, 0x15,
	0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x4e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x6d, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x22, 0xc2, 0x01, 0x0a, 0x21, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x44, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x48, 0x0a, 0x05, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4b, 0x65, 0x79,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x77, 0x0a, 0x2b, 0x50, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x65, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x48, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x22, 0x70, 0x0a, 0x1e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x55, 0x6e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x4e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x22, 0x8b, 0x01, 0x0a, 0x19, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x42, 0x61,
	0x73, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x22, 0x77, 0x0a, 0x16, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x5d, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x2a, 0x61, 0x0a, 0x11, 0x50,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x45, 0x54,
	0x43, 0x48, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x54, 0x45, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x55, 0x53,
	0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x2a, 0x41,
	0x0a, 0x12, 0x50, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f,
	0x4b, 0x45, 0x59, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x59, 0x4e, 0x54, 0x48, 0x45, 0x54,
	0x49, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x49, 0x54, 0x55, 0x45, 0x4e, 0x54, 0x53, 0x10,
	0x02, 0x42, 0x2a, 0x42, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x12, 0x63, 0x69, 0x6f, 0x2f, 0x66,
	0x64, 0x62, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x73, 0x72, 0x63,
}

var (
	file_record_query_plan_proto_rawDescOnce sync.Once
	file_record_query_plan_proto_rawDescData = file_record_query_plan_proto_rawDesc
)

func file_record_query_plan_proto_rawDescGZIP() []byte {
	file_record_query_plan_proto_rawDescOnce.Do(func() {
		file_record_query_plan_proto_rawDescData = protoimpl.X.CompressGZIP(file_record_query_plan_proto_rawDescData)
	})
	return file_record_query_plan_proto_rawDescData
}

var file_record_query_plan_proto_enumTypes = make([]protoimpl.EnumInfo, 16)
var file_record_query_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 170)
var file_record_query_plan_proto_goTypes = []any{
	(PIndexFetchMethod)(0),                                  // 0: com.apple.foundationdb.record.PIndexFetchMethod
	(PFetchIndexRecords)(0),                                 // 1: com.apple.foundationdb.record.PFetchIndexRecords
	(PType_PTypeCode)(0),                                    // 2: com.apple.foundationdb.record.PType.PTypeCode
	(PPrimitiveCoercionBiFunction_PPhysicalOperator)(0),     // 3: com.apple.foundationdb.record.PPrimitiveCoercionBiFunction.PPhysicalOperator
	(PAndOrValue_POperator)(0),                              // 4: com.apple.foundationdb.record.PAndOrValue.POperator
	(PArithmeticValue_PPhysicalOperator)(0),                 // 5: com.apple.foundationdb.record.PArithmeticValue.PPhysicalOperator
	(PCountValue_PPhysicalOperator)(0),                      // 6: com.apple.foundationdb.record.PCountValue.PPhysicalOperator
	(PIndexOnlyAggregateValue_PPhysicalOperator)(0),         // 7: com.apple.foundationdb.record.PIndexOnlyAggregateValue.PPhysicalOperator
	(PNumericAggregationValue_PPhysicalOperator)(0),         // 8: com.apple.foundationdb.record.PNumericAggregationValue.PPhysicalOperator
	(PBinaryRelOpValue_PBinaryPhysicalOperator)(0),          // 9: com.apple.foundationdb.record.PBinaryRelOpValue.PBinaryPhysicalOperator
	(PUnaryRelOpValue_PUnaryPhysicalOperator)(0),            // 10: com.apple.foundationdb.record.PUnaryRelOpValue.PUnaryPhysicalOperator
	(PVariadicFunctionValue_PPhysicalOperator)(0),           // 11: com.apple.foundationdb.record.PVariadicFunctionValue.PPhysicalOperator
	(PComparison_PComparisonType)(0),                        // 12: com.apple.foundationdb.record.PComparison.PComparisonType
	(PParameterComparison_PBindingKind)(0),                  // 13: com.apple.foundationdb.record.PParameterComparison.PBindingKind
	(PIndexKeyValueToPartialRecord_PTupleSource)(0),         // 14: com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PTupleSource
	(PScoreForRank_PBindingFunction)(0),                     // 15: com.apple.foundationdb.record.PScoreForRank.PBindingFunction
	(*PType)(nil),                                           // 16: com.apple.foundationdb.record.PType
	(*PCoercionTrieNode)(nil),                               // 17: com.apple.foundationdb.record.PCoercionTrieNode
	(*PCoercionBiFunction)(nil),                             // 18: com.apple.foundationdb.record.PCoercionBiFunction
	(*PPrimitiveCoercionBiFunction)(nil),                    // 19: com.apple.foundationdb.record.PPrimitiveCoercionBiFunction
	(*PArrayCoercionBiFunction)(nil),                        // 20: com.apple.foundationdb.record.PArrayCoercionBiFunction
	(*PTransformationTrieNode)(nil),                         // 21: com.apple.foundationdb.record.PTransformationTrieNode
	(*PFieldAccessTrieNode)(nil),                            // 22: com.apple.foundationdb.record.PFieldAccessTrieNode
	(*PValue)(nil),                                          // 23: com.apple.foundationdb.record.PValue
	(*PAbstractArrayConstructorValue)(nil),                  // 24: com.apple.foundationdb.record.PAbstractArrayConstructorValue
	(*PLightArrayConstructorValue)(nil),                     // 25: com.apple.foundationdb.record.PLightArrayConstructorValue
	(*PAndOrValue)(nil),                                     // 26: com.apple.foundationdb.record.PAndOrValue
	(*PArithmeticValue)(nil),                                // 27: com.apple.foundationdb.record.PArithmeticValue
	(*PConditionSelectorValue)(nil),                         // 28: com.apple.foundationdb.record.PConditionSelectorValue
	(*PConstantObjectValue)(nil),                            // 29: com.apple.foundationdb.record.PConstantObjectValue
	(*PConstantValue)(nil),                                  // 30: com.apple.foundationdb.record.PConstantValue
	(*PCountValue)(nil),                                     // 31: com.apple.foundationdb.record.PCountValue
	(*PDerivedValue)(nil),                                   // 32: com.apple.foundationdb.record.PDerivedValue
	(*PEmptyValue)(nil),                                     // 33: com.apple.foundationdb.record.PEmptyValue
	(*PExistsValue)(nil),                                    // 34: com.apple.foundationdb.record.PExistsValue
	(*PFieldValue)(nil),                                     // 35: com.apple.foundationdb.record.PFieldValue
	(*PFieldPath)(nil),                                      // 36: com.apple.foundationdb.record.PFieldPath
	(*PFirstOrDefaultValue)(nil),                            // 37: com.apple.foundationdb.record.PFirstOrDefaultValue
	(*PIndexedValue)(nil),                                   // 38: com.apple.foundationdb.record.PIndexedValue
	(*PIndexOnlyAggregateValue)(nil),                        // 39: com.apple.foundationdb.record.PIndexOnlyAggregateValue
	(*PInOpValue)(nil),                                      // 40: com.apple.foundationdb.record.PInOpValue
	(*PMaxEverLongValue)(nil),                               // 41: com.apple.foundationdb.record.PMaxEverLongValue
	(*PMinEverLongValue)(nil),                               // 42: com.apple.foundationdb.record.PMinEverLongValue
	(*PLikeOperatorValue)(nil),                              // 43: com.apple.foundationdb.record.PLikeOperatorValue
	(*PLiteralValue)(nil),                                   // 44: com.apple.foundationdb.record.PLiteralValue
	(*PNotValue)(nil),                                       // 45: com.apple.foundationdb.record.PNotValue
	(*PNullValue)(nil),                                      // 46: com.apple.foundationdb.record.PNullValue
	(*PNumericAggregationValue)(nil),                        // 47: com.apple.foundationdb.record.PNumericAggregationValue
	(*PObjectValue)(nil),                                    // 48: com.apple.foundationdb.record.PObjectValue
	(*POfTypeValue)(nil),                                    // 49: com.apple.foundationdb.record.POfTypeValue
	(*PPatternForLikeValue)(nil),                            // 50: com.apple.foundationdb.record.PPatternForLikeValue
	(*PPickValue)(nil),                                      // 51: com.apple.foundationdb.record.PPickValue
	(*PPromoteValue)(nil),                                   // 52: com.apple.foundationdb.record.PPromoteValue
	(*PQuantifiedObjectValue)(nil),                          // 53: com.apple.foundationdb.record.PQuantifiedObjectValue
	(*PQueriedValue)(nil),                                   // 54: com.apple.foundationdb.record.PQueriedValue
	(*PRankValue)(nil),                                      // 55: com.apple.foundationdb.record.PRankValue
	(*PRecordConstructorValue)(nil),                         // 56: com.apple.foundationdb.record.PRecordConstructorValue
	(*PRecordTypeValue)(nil),                                // 57: com.apple.foundationdb.record.PRecordTypeValue
	(*PRelOpValue)(nil),                                     // 58: com.apple.foundationdb.record.PRelOpValue
	(*PBinaryRelOpValue)(nil),                               // 59: com.apple.foundationdb.record.PBinaryRelOpValue
	(*PThrowsValue)(nil),                                    // 60: com.apple.foundationdb.record.PThrowsValue
	(*PUnaryRelOpValue)(nil),                                // 61: com.apple.foundationdb.record.PUnaryRelOpValue
	(*PUdfValue)(nil),                                       // 62: com.apple.foundationdb.record.PUdfValue
	(*PVariadicFunctionValue)(nil),                          // 63: com.apple.foundationdb.record.PVariadicFunctionValue
	(*PVersionValue)(nil),                                   // 64: com.apple.foundationdb.record.PVersionValue
	(*PWindowedValue)(nil),                                  // 65: com.apple.foundationdb.record.PWindowedValue
	(*PComparison)(nil),                                     // 66: com.apple.foundationdb.record.PComparison
	(*PSimpleComparison)(nil),                               // 67: com.apple.foundationdb.record.PSimpleComparison
	(*PComparableObject)(nil),                               // 68: com.apple.foundationdb.record.PComparableObject
	(*PEnumLightValue)(nil),                                 // 69: com.apple.foundationdb.record.PEnumLightValue
	(*PUUID)(nil),                                           // 70: com.apple.foundationdb.record.PUUID
	(*PFDBRecordVersion)(nil),                               // 71: com.apple.foundationdb.record.PFDBRecordVersion
	(*PParameterComparison)(nil),                            // 72: com.apple.foundationdb.record.PParameterComparison
	(*PValueComparison)(nil),                                // 73: com.apple.foundationdb.record.PValueComparison
	(*PListComparison)(nil),                                 // 74: com.apple.foundationdb.record.PListComparison
	(*PNullComparison)(nil),                                 // 75: com.apple.foundationdb.record.PNullComparison
	(*POpaqueEqualityComparison)(nil),                       // 76: com.apple.foundationdb.record.POpaqueEqualityComparison
	(*PMultiColumnComparison)(nil),                          // 77: com.apple.foundationdb.record.PMultiColumnComparison
	(*PInvertedFunctionComparison)(nil),                     // 78: com.apple.foundationdb.record.PInvertedFunctionComparison
	(*PRecordTypeComparison)(nil),                           // 79: com.apple.foundationdb.record.PRecordTypeComparison
	(*PQueryPredicate)(nil),                                 // 80: com.apple.foundationdb.record.PQueryPredicate
	(*PAbstractQueryPredicate)(nil),                         // 81: com.apple.foundationdb.record.PAbstractQueryPredicate
	(*PAndOrPredicate)(nil),                                 // 82: com.apple.foundationdb.record.PAndOrPredicate
	(*PAndPredicate)(nil),                                   // 83: com.apple.foundationdb.record.PAndPredicate
	(*PCompatibleTypeEvolutionPredicate)(nil),               // 84: com.apple.foundationdb.record.PCompatibleTypeEvolutionPredicate
	(*PConstantPredicate)(nil),                              // 85: com.apple.foundationdb.record.PConstantPredicate
	(*PDatabaseObjectDependenciesPredicate)(nil),            // 86: com.apple.foundationdb.record.PDatabaseObjectDependenciesPredicate
	(*PExistsPredicate)(nil),                                // 87: com.apple.foundationdb.record.PExistsPredicate
	(*PNotPredicate)(nil),                                   // 88: com.apple.foundationdb.record.PNotPredicate
	(*POrPredicate)(nil),                                    // 89: com.apple.foundationdb.record.POrPredicate
	(*PPredicateWithValueAndRanges)(nil),                    // 90: com.apple.foundationdb.record.PPredicateWithValueAndRanges
	(*PRangeConstraints)(nil),                               // 91: com.apple.foundationdb.record.PRangeConstraints
	(*PCompilableRange)(nil),                                // 92: com.apple.foundationdb.record.PCompilableRange
	(*PValuePredicate)(nil),                                 // 93: com.apple.foundationdb.record.PValuePredicate
	(*PPhysicalQuantifier)(nil),                             // 94: com.apple.foundationdb.record.PPhysicalQuantifier
	(*PPlanReference)(nil),                                  // 95: com.apple.foundationdb.record.PPlanReference
	(*PRecordQueryPlan)(nil),                                // 96: com.apple.foundationdb.record.PRecordQueryPlan
	(*PRecordQueryAbstractDataModificationPlan)(nil),        // 97: com.apple.foundationdb.record.PRecordQueryAbstractDataModificationPlan
	(*PRecordQueryAggregateIndexPlan)(nil),                  // 98: com.apple.foundationdb.record.PRecordQueryAggregateIndexPlan
	(*PRecordQueryCoveringIndexPlan)(nil),                   // 99: com.apple.foundationdb.record.PRecordQueryCoveringIndexPlan
	(*PIndexKeyValueToPartialRecord)(nil),                   // 100: com.apple.foundationdb.record.PIndexKeyValueToPartialRecord
	(*PRecordQueryDamPlan)(nil),                             // 101: com.apple.foundationdb.record.PRecordQueryDamPlan
	(*PRecordQueryDeletePlan)(nil),                          // 102: com.apple.foundationdb.record.PRecordQueryDeletePlan
	(*PRecordQueryExplodePlan)(nil),                         // 103: com.apple.foundationdb.record.PRecordQueryExplodePlan
	(*PRecordQueryFetchFromPartialRecordPlan)(nil),          // 104: com.apple.foundationdb.record.PRecordQueryFetchFromPartialRecordPlan
	(*PRecordQueryFilterPlanBase)(nil),                      // 105: com.apple.foundationdb.record.PRecordQueryFilterPlanBase
	(*PRecordQueryFirstOrDefaultPlan)(nil),                  // 106: com.apple.foundationdb.record.PRecordQueryFirstOrDefaultPlan
	(*PRecordQueryFlatMapPlan)(nil),                         // 107: com.apple.foundationdb.record.PRecordQueryFlatMapPlan
	(*PRecordQueryIndexPlan)(nil),                           // 108: com.apple.foundationdb.record.PRecordQueryIndexPlan
	(*PIndexScanParameters)(nil),                            // 109: com.apple.foundationdb.record.PIndexScanParameters
	(*PIndexScanType)(nil),                                  // 110: com.apple.foundationdb.record.PIndexScanType
	(*PScanComparisons)(nil),                                // 111: com.apple.foundationdb.record.PScanComparisons
	(*PIndexScanComparisons)(nil),                           // 112: com.apple.foundationdb.record.PIndexScanComparisons
	(*PMultidimensionalIndexScanComparisons)(nil),           // 113: com.apple.foundationdb.record.PMultidimensionalIndexScanComparisons
	(*PTimeWindowForFunction)(nil),                          // 114: com.apple.foundationdb.record.PTimeWindowForFunction
	(*PTimeWindowScanComparisons)(nil),                      // 115: com.apple.foundationdb.record.PTimeWindowScanComparisons
	(*PQueryPlanConstraint)(nil),                            // 116: com.apple.foundationdb.record.PQueryPlanConstraint
	(*PRecordQueryInComparandJoinPlan)(nil),                 // 117: com.apple.foundationdb.record.PRecordQueryInComparandJoinPlan
	(*PRecordQueryInJoinPlan)(nil),                          // 118: com.apple.foundationdb.record.PRecordQueryInJoinPlan
	(*PInSource)(nil),                                       // 119: com.apple.foundationdb.record.PInSource
	(*PInComparandSource)(nil),                              // 120: com.apple.foundationdb.record.PInComparandSource
	(*PSortedInComparandSource)(nil),                        // 121: com.apple.foundationdb.record.PSortedInComparandSource
	(*PInParameterSource)(nil),                              // 122: com.apple.foundationdb.record.PInParameterSource
	(*PSortedInParameterSource)(nil),                        // 123: com.apple.foundationdb.record.PSortedInParameterSource
	(*PInValuesSource)(nil),                                 // 124: com.apple.foundationdb.record.PInValuesSource
	(*PSortedInValuesSource)(nil),                           // 125: com.apple.foundationdb.record.PSortedInValuesSource
	(*PRecordQueryInParameterJoinPlan)(nil),                 // 126: com.apple.foundationdb.record.PRecordQueryInParameterJoinPlan
	(*PRecordQueryInsertPlan)(nil),                          // 127: com.apple.foundationdb.record.PRecordQueryInsertPlan
	(*PRecordQueryIntersectionPlan)(nil),                    // 128: com.apple.foundationdb.record.PRecordQueryIntersectionPlan
	(*PComparisonKeyFunction)(nil),                          // 129: com.apple.foundationdb.record.PComparisonKeyFunction
	(*PRecordQueryIntersectionOnKeyExpressionPlan)(nil),     // 130: com.apple.foundationdb.record.PRecordQueryIntersectionOnKeyExpressionPlan
	(*PRecordQueryIntersectionOnValuesPlan)(nil),            // 131: com.apple.foundationdb.record.PRecordQueryIntersectionOnValuesPlan
	(*PRecordQueryInUnionPlan)(nil),                         // 132: com.apple.foundationdb.record.PRecordQueryInUnionPlan
	(*PRecordQueryInUnionOnKeyExpressionPlan)(nil),          // 133: com.apple.foundationdb.record.PRecordQueryInUnionOnKeyExpressionPlan
	(*PRecordQueryInUnionOnValuesPlan)(nil),                 // 134: com.apple.foundationdb.record.PRecordQueryInUnionOnValuesPlan
	(*PRecordQueryInValuesJoinPlan)(nil),                    // 135: com.apple.foundationdb.record.PRecordQueryInValuesJoinPlan
	(*PRecordQueryMapPlan)(nil),                             // 136: com.apple.foundationdb.record.PRecordQueryMapPlan
	(*PRecordQueryPredicatesFilterPlan)(nil),                // 137: com.apple.foundationdb.record.PRecordQueryPredicatesFilterPlan
	(*PRecordQueryRangePlan)(nil),                           // 138: com.apple.foundationdb.record.PRecordQueryRangePlan
	(*PRecordQuerySortPlan)(nil),                            // 139: com.apple.foundationdb.record.PRecordQuerySortPlan
	(*PRecordQuerySortKey)(nil),                             // 140: com.apple.foundationdb.record.PRecordQuerySortKey
	(*PRecordQueryScanPlan)(nil),                            // 141: com.apple.foundationdb.record.PRecordQueryScanPlan
	(*PRecordQueryScoreForRankPlan)(nil),                    // 142: com.apple.foundationdb.record.PRecordQueryScoreForRankPlan
	(*PScoreForRank)(nil),                                   // 143: com.apple.foundationdb.record.PScoreForRank
	(*PIndexAggregateFunction)(nil),                         // 144: com.apple.foundationdb.record.PIndexAggregateFunction
	(*PRecordQueryStreamingAggregationPlan)(nil),            // 145: com.apple.foundationdb.record.PRecordQueryStreamingAggregationPlan
	(*PRecordQueryTypeFilterPlan)(nil),                      // 146: com.apple.foundationdb.record.PRecordQueryTypeFilterPlan
	(*PRecordQueryUnionOnKeyExpressionPlan)(nil),            // 147: com.apple.foundationdb.record.PRecordQueryUnionOnKeyExpressionPlan
	(*PRecordQueryUnionOnValuesPlan)(nil),                   // 148: com.apple.foundationdb.record.PRecordQueryUnionOnValuesPlan
	(*PRecordQueryUnionPlan)(nil),                           // 149: com.apple.foundationdb.record.PRecordQueryUnionPlan
	(*PRecordQueryUnorderedDistinctPlan)(nil),               // 150: com.apple.foundationdb.record.PRecordQueryUnorderedDistinctPlan
	(*PRecordQueryUnorderedPrimaryKeyDistinctPlan)(nil),     // 151: com.apple.foundationdb.record.PRecordQueryUnorderedPrimaryKeyDistinctPlan
	(*PRecordQueryUnorderedUnionPlan)(nil),                  // 152: com.apple.foundationdb.record.PRecordQueryUnorderedUnionPlan
	(*PRecordQueryUnionPlanBase)(nil),                       // 153: com.apple.foundationdb.record.PRecordQueryUnionPlanBase
	(*PRecordQueryUpdatePlan)(nil),                          // 154: com.apple.foundationdb.record.PRecordQueryUpdatePlan
	(*PType_PPrimitiveType)(nil),                            // 155: com.apple.foundationdb.record.PType.PPrimitiveType
	(*PType_PNullType)(nil),                                 // 156: com.apple.foundationdb.record.PType.PNullType
	(*PType_PNoneType)(nil),                                 // 157: com.apple.foundationdb.record.PType.PNoneType
	(*PType_PAnyType)(nil),                                  // 158: com.apple.foundationdb.record.PType.PAnyType
	(*PType_PAnyRecordType)(nil),                            // 159: com.apple.foundationdb.record.PType.PAnyRecordType
	(*PType_PEnumType)(nil),                                 // 160: com.apple.foundationdb.record.PType.PEnumType
	(*PType_PRecordType)(nil),                               // 161: com.apple.foundationdb.record.PType.PRecordType
	(*PType_PRelationType)(nil),                             // 162: com.apple.foundationdb.record.PType.PRelationType
	(*PType_PArrayType)(nil),                                // 163: com.apple.foundationdb.record.PType.PArrayType
	(*PType_PEnumType_PEnumValue)(nil),                      // 164: com.apple.foundationdb.record.PType.PEnumType.PEnumValue
	(*PType_PRecordType_PField)(nil),                        // 165: com.apple.foundationdb.record.PType.PRecordType.PField
	(*PCoercionTrieNode_IntChildPair)(nil),                  // 166: com.apple.foundationdb.record.PCoercionTrieNode.IntChildPair
	(*PTransformationTrieNode_IntChildPair)(nil),            // 167: com.apple.foundationdb.record.PTransformationTrieNode.IntChildPair
	(*PFieldAccessTrieNode_PResolvedAccessorChildPair)(nil), // 168: com.apple.foundationdb.record.PFieldAccessTrieNode.PResolvedAccessorChildPair
	(*PFieldPath_PResolvedAccessor)(nil),                    // 169: com.apple.foundationdb.record.PFieldPath.PResolvedAccessor
	(*PNumericAggregationValue_PSum)(nil),                   // 170: com.apple.foundationdb.record.PNumericAggregationValue.PSum
	(*PNumericAggregationValue_PAvg)(nil),                   // 171: com.apple.foundationdb.record.PNumericAggregationValue.PAvg
	(*PNumericAggregationValue_PMin)(nil),                   // 172: com.apple.foundationdb.record.PNumericAggregationValue.PMin
	(*PNumericAggregationValue_PMax)(nil),                   // 173: com.apple.foundationdb.record.PNumericAggregationValue.PMax
	(*PRecordConstructorValue_PColumn)(nil),                 // 174: com.apple.foundationdb.record.PRecordConstructorValue.PColumn
	(*PCompatibleTypeEvolutionPredicate_PRecordTypeNameFieldAccessPair)(nil),             // 175: com.apple.foundationdb.record.PCompatibleTypeEvolutionPredicate.PRecordTypeNameFieldAccessPair
	(*PDatabaseObjectDependenciesPredicate_PUsedIndex)(nil),                              // 176: com.apple.foundationdb.record.PDatabaseObjectDependenciesPredicate.PUsedIndex
	(*PIndexKeyValueToPartialRecord_PCopier)(nil),                                        // 177: com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PCopier
	(*PIndexKeyValueToPartialRecord_PFieldCopier)(nil),                                   // 178: com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PFieldCopier
	(*PIndexKeyValueToPartialRecord_PCopyIfPredicate)(nil),                               // 179: com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PCopyIfPredicate
	(*PIndexKeyValueToPartialRecord_PMessageCopier)(nil),                                 // 180: com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PMessageCopier
	(*PIndexKeyValueToPartialRecord_PCopyIfPredicate_PTruePredicate)(nil),                // 181: com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PCopyIfPredicate.PTruePredicate
	(*PIndexKeyValueToPartialRecord_PCopyIfPredicate_PConditionalUponPathPredicate)(nil), // 182: com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PCopyIfPredicate.PConditionalUponPathPredicate
	(*PInSource_Super)(nil),                         // 183: com.apple.foundationdb.record.PInSource.Super
	(*PComparisonKeyFunction_POnKeyExpression)(nil), // 184: com.apple.foundationdb.record.PComparisonKeyFunction.POnKeyExpression
	(*PComparisonKeyFunction_POnValues)(nil),        // 185: com.apple.foundationdb.record.PComparisonKeyFunction.POnValues
	(*anypb.Any)(nil),                               // 186: google.protobuf.Any
	(*Value)(nil),                                   // 187: com.apple.foundationdb.record.Value
	(*Function)(nil),                                // 188: com.apple.foundationdb.record.Function
	(*KeyExpression)(nil),                           // 189: com.apple.foundationdb.record.KeyExpression
}
var file_record_query_plan_proto_depIdxs = []int32{
	155, // 0: com.apple.foundationdb.record.PType.primitive_type:type_name -> com.apple.foundationdb.record.PType.PPrimitiveType
	156, // 1: com.apple.foundationdb.record.PType.null_type:type_name -> com.apple.foundationdb.record.PType.PNullType
	157, // 2: com.apple.foundationdb.record.PType.none_type:type_name -> com.apple.foundationdb.record.PType.PNoneType
	158, // 3: com.apple.foundationdb.record.PType.any_type:type_name -> com.apple.foundationdb.record.PType.PAnyType
	160, // 4: com.apple.foundationdb.record.PType.enum_type:type_name -> com.apple.foundationdb.record.PType.PEnumType
	161, // 5: com.apple.foundationdb.record.PType.record_type:type_name -> com.apple.foundationdb.record.PType.PRecordType
	162, // 6: com.apple.foundationdb.record.PType.relation_type:type_name -> com.apple.foundationdb.record.PType.PRelationType
	163, // 7: com.apple.foundationdb.record.PType.array_type:type_name -> com.apple.foundationdb.record.PType.PArrayType
	159, // 8: com.apple.foundationdb.record.PType.any_record_type:type_name -> com.apple.foundationdb.record.PType.PAnyRecordType
	166, // 9: com.apple.foundationdb.record.PCoercionTrieNode.child_pair:type_name -> com.apple.foundationdb.record.PCoercionTrieNode.IntChildPair
	18,  // 10: com.apple.foundationdb.record.PCoercionTrieNode.value:type_name -> com.apple.foundationdb.record.PCoercionBiFunction
	186, // 11: com.apple.foundationdb.record.PCoercionBiFunction.additional_coercion_bi_functions:type_name -> google.protobuf.Any
	19,  // 12: com.apple.foundationdb.record.PCoercionBiFunction.primitive_coercion_bi_function:type_name -> com.apple.foundationdb.record.PPrimitiveCoercionBiFunction
	20,  // 13: com.apple.foundationdb.record.PCoercionBiFunction.array_coercion_bi_function:type_name -> com.apple.foundationdb.record.PArrayCoercionBiFunction
	3,   // 14: com.apple.foundationdb.record.PPrimitiveCoercionBiFunction.operator:type_name -> com.apple.foundationdb.record.PPrimitiveCoercionBiFunction.PPhysicalOperator
	16,  // 15: com.apple.foundationdb.record.PArrayCoercionBiFunction.from_array_type:type_name -> com.apple.foundationdb.record.PType
	16,  // 16: com.apple.foundationdb.record.PArrayCoercionBiFunction.to_array_type:type_name -> com.apple.foundationdb.record.PType
	17,  // 17: com.apple.foundationdb.record.PArrayCoercionBiFunction.elements_trie:type_name -> com.apple.foundationdb.record.PCoercionTrieNode
	167, // 18: com.apple.foundationdb.record.PTransformationTrieNode.child_pair:type_name -> com.apple.foundationdb.record.PTransformationTrieNode.IntChildPair
	23,  // 19: com.apple.foundationdb.record.PTransformationTrieNode.value:type_name -> com.apple.foundationdb.record.PValue
	168, // 20: com.apple.foundationdb.record.PFieldAccessTrieNode.child_pair:type_name -> com.apple.foundationdb.record.PFieldAccessTrieNode.PResolvedAccessorChildPair
	16,  // 21: com.apple.foundationdb.record.PFieldAccessTrieNode.type:type_name -> com.apple.foundationdb.record.PType
	186, // 22: com.apple.foundationdb.record.PValue.additional_values:type_name -> google.protobuf.Any
	25,  // 23: com.apple.foundationdb.record.PValue.light_array_constructor_value:type_name -> com.apple.foundationdb.record.PLightArrayConstructorValue
	26,  // 24: com.apple.foundationdb.record.PValue.and_or_value:type_name -> com.apple.foundationdb.record.PAndOrValue
	27,  // 25: com.apple.foundationdb.record.PValue.arithmetic_value:type_name -> com.apple.foundationdb.record.PArithmeticValue
	28,  // 26: com.apple.foundationdb.record.PValue.condition_selector_value:type_name -> com.apple.foundationdb.record.PConditionSelectorValue
	29,  // 27: com.apple.foundationdb.record.PValue.constant_object_value:type_name -> com.apple.foundationdb.record.PConstantObjectValue
	30,  // 28: com.apple.foundationdb.record.PValue.constant_value:type_name -> com.apple.foundationdb.record.PConstantValue
	31,  // 29: com.apple.foundationdb.record.PValue.count_value:type_name -> com.apple.foundationdb.record.PCountValue
	32,  // 30: com.apple.foundationdb.record.PValue.derived_value:type_name -> com.apple.foundationdb.record.PDerivedValue
	33,  // 31: com.apple.foundationdb.record.PValue.empty_value:type_name -> com.apple.foundationdb.record.PEmptyValue
	34,  // 32: com.apple.foundationdb.record.PValue.exists_value:type_name -> com.apple.foundationdb.record.PExistsValue
	35,  // 33: com.apple.foundationdb.record.PValue.field_value:type_name -> com.apple.foundationdb.record.PFieldValue
	38,  // 34: com.apple.foundationdb.record.PValue.indexed_value:type_name -> com.apple.foundationdb.record.PIndexedValue
	41,  // 35: com.apple.foundationdb.record.PValue.max_ever_long_value:type_name -> com.apple.foundationdb.record.PMaxEverLongValue
	42,  // 36: com.apple.foundationdb.record.PValue.min_ever_long_value:type_name -> com.apple.foundationdb.record.PMinEverLongValue
	40,  // 37: com.apple.foundationdb.record.PValue.in_op_value:type_name -> com.apple.foundationdb.record.PInOpValue
	43,  // 38: com.apple.foundationdb.record.PValue.like_operator_value:type_name -> com.apple.foundationdb.record.PLikeOperatorValue
	44,  // 39: com.apple.foundationdb.record.PValue.literal_value:type_name -> com.apple.foundationdb.record.PLiteralValue
	45,  // 40: com.apple.foundationdb.record.PValue.not_value:type_name -> com.apple.foundationdb.record.PNotValue
	46,  // 41: com.apple.foundationdb.record.PValue.null_value:type_name -> com.apple.foundationdb.record.PNullValue
	170, // 42: com.apple.foundationdb.record.PValue.numeric_aggregation_value_sum:type_name -> com.apple.foundationdb.record.PNumericAggregationValue.PSum
	171, // 43: com.apple.foundationdb.record.PValue.numeric_aggregation_value_avg:type_name -> com.apple.foundationdb.record.PNumericAggregationValue.PAvg
	172, // 44: com.apple.foundationdb.record.PValue.numeric_aggregation_value_min:type_name -> com.apple.foundationdb.record.PNumericAggregationValue.PMin
	173, // 45: com.apple.foundationdb.record.PValue.numeric_aggregation_value_max:type_name -> com.apple.foundationdb.record.PNumericAggregationValue.PMax
	48,  // 46: com.apple.foundationdb.record.PValue.object_value:type_name -> com.apple.foundationdb.record.PObjectValue
	49,  // 47: com.apple.foundationdb.record.PValue.of_type_value:type_name -> com.apple.foundationdb.record.POfTypeValue
	50,  // 48: com.apple.foundationdb.record.PValue.pattern_for_like_value:type_name -> com.apple.foundationdb.record.PPatternForLikeValue
	51,  // 49: com.apple.foundationdb.record.PValue.pick_value:type_name -> com.apple.foundationdb.record.PPickValue
	52,  // 50: com.apple.foundationdb.record.PValue.promote_value:type_name -> com.apple.foundationdb.record.PPromoteValue
	53,  // 51: com.apple.foundationdb.record.PValue.quantified_object_value:type_name -> com.apple.foundationdb.record.PQuantifiedObjectValue
	54,  // 52: com.apple.foundationdb.record.PValue.queried_value:type_name -> com.apple.foundationdb.record.PQueriedValue
	55,  // 53: com.apple.foundationdb.record.PValue.rank_value:type_name -> com.apple.foundationdb.record.PRankValue
	56,  // 54: com.apple.foundationdb.record.PValue.record_constructor_value:type_name -> com.apple.foundationdb.record.PRecordConstructorValue
	57,  // 55: com.apple.foundationdb.record.PValue.record_type_value:type_name -> com.apple.foundationdb.record.PRecordTypeValue
	59,  // 56: com.apple.foundationdb.record.PValue.binary_rel_op_value:type_name -> com.apple.foundationdb.record.PBinaryRelOpValue
	61,  // 57: com.apple.foundationdb.record.PValue.unary_rel_op_value:type_name -> com.apple.foundationdb.record.PUnaryRelOpValue
	63,  // 58: com.apple.foundationdb.record.PValue.variadic_function_value:type_name -> com.apple.foundationdb.record.PVariadicFunctionValue
	64,  // 59: com.apple.foundationdb.record.PValue.version_value:type_name -> com.apple.foundationdb.record.PVersionValue
	37,  // 60: com.apple.foundationdb.record.PValue.first_or_default_value:type_name -> com.apple.foundationdb.record.PFirstOrDefaultValue
	60,  // 61: com.apple.foundationdb.record.PValue.throws_value:type_name -> com.apple.foundationdb.record.PThrowsValue
	23,  // 62: com.apple.foundationdb.record.PAbstractArrayConstructorValue.children:type_name -> com.apple.foundationdb.record.PValue
	16,  // 63: com.apple.foundationdb.record.PAbstractArrayConstructorValue.element_type:type_name -> com.apple.foundationdb.record.PType
	24,  // 64: com.apple.foundationdb.record.PLightArrayConstructorValue.super:type_name -> com.apple.foundationdb.record.PAbstractArrayConstructorValue
	23,  // 65: com.apple.foundationdb.record.PAndOrValue.left_child:type_name -> com.apple.foundationdb.record.PValue
	23,  // 66: com.apple.foundationdb.record.PAndOrValue.right_child:type_name -> com.apple.foundationdb.record.PValue
	4,   // 67: com.apple.foundationdb.record.PAndOrValue.operator:type_name -> com.apple.foundationdb.record.PAndOrValue.POperator
	5,   // 68: com.apple.foundationdb.record.PArithmeticValue.operator:type_name -> com.apple.foundationdb.record.PArithmeticValue.PPhysicalOperator
	23,  // 69: com.apple.foundationdb.record.PArithmeticValue.left_child:type_name -> com.apple.foundationdb.record.PValue
	23,  // 70: com.apple.foundationdb.record.PArithmeticValue.right_child:type_name -> com.apple.foundationdb.record.PValue
	23,  // 71: com.apple.foundationdb.record.PConditionSelectorValue.implications:type_name -> com.apple.foundationdb.record.PValue
	16,  // 72: com.apple.foundationdb.record.PConstantObjectValue.result_type:type_name -> com.apple.foundationdb.record.PType
	23,  // 73: com.apple.foundationdb.record.PConstantValue.value:type_name -> com.apple.foundationdb.record.PValue
	6,   // 74: com.apple.foundationdb.record.PCountValue.operator:type_name -> com.apple.foundationdb.record.PCountValue.PPhysicalOperator
	23,  // 75: com.apple.foundationdb.record.PCountValue.child:type_name -> com.apple.foundationdb.record.PValue
	23,  // 76: com.apple.foundationdb.record.PDerivedValue.children:type_name -> com.apple.foundationdb.record.PValue
	16,  // 77: com.apple.foundationdb.record.PDerivedValue.result_type:type_name -> com.apple.foundationdb.record.PType
	53,  // 78: com.apple.foundationdb.record.PExistsValue.child:type_name -> com.apple.foundationdb.record.PQuantifiedObjectValue
	23,  // 79: com.apple.foundationdb.record.PFieldValue.child_value:type_name -> com.apple.foundationdb.record.PValue
	36,  // 80: com.apple.foundationdb.record.PFieldValue.field_path:type_name -> com.apple.foundationdb.record.PFieldPath
	169, // 81: com.apple.foundationdb.record.PFieldPath.field_accessors:type_name -> com.apple.foundationdb.record.PFieldPath.PResolvedAccessor
	23,  // 82: com.apple.foundationdb.record.PFirstOrDefaultValue.child_value:type_name -> com.apple.foundationdb.record.PValue
	23,  // 83: com.apple.foundationdb.record.PFirstOrDefaultValue.on_empty_result_value:type_name -> com.apple.foundationdb.record.PValue
	16,  // 84: com.apple.foundationdb.record.PIndexedValue.result_type:type_name -> com.apple.foundationdb.record.PType
	7,   // 85: com.apple.foundationdb.record.PIndexOnlyAggregateValue.operator:type_name -> com.apple.foundationdb.record.PIndexOnlyAggregateValue.PPhysicalOperator
	23,  // 86: com.apple.foundationdb.record.PIndexOnlyAggregateValue.child:type_name -> com.apple.foundationdb.record.PValue
	23,  // 87: com.apple.foundationdb.record.PInOpValue.probe_value:type_name -> com.apple.foundationdb.record.PValue
	23,  // 88: com.apple.foundationdb.record.PInOpValue.in_array_value:type_name -> com.apple.foundationdb.record.PValue
	39,  // 89: com.apple.foundationdb.record.PMaxEverLongValue.super:type_name -> com.apple.foundationdb.record.PIndexOnlyAggregateValue
	39,  // 90: com.apple.foundationdb.record.PMinEverLongValue.super:type_name -> com.apple.foundationdb.record.PIndexOnlyAggregateValue
	23,  // 91: com.apple.foundationdb.record.PLikeOperatorValue.src_child:type_name -> com.apple.foundationdb.record.PValue
	23,  // 92: com.apple.foundationdb.record.PLikeOperatorValue.pattern_child:type_name -> com.apple.foundationdb.record.PValue
	16,  // 93: com.apple.foundationdb.record.PLiteralValue.result_type:type_name -> com.apple.foundationdb.record.PType
	68,  // 94: com.apple.foundationdb.record.PLiteralValue.value:type_name -> com.apple.foundationdb.record.PComparableObject
	23,  // 95: com.apple.foundationdb.record.PNotValue.child:type_name -> com.apple.foundationdb.record.PValue
	16,  // 96: com.apple.foundationdb.record.PNullValue.result_type:type_name -> com.apple.foundationdb.record.PType
	8,   // 97: com.apple.foundationdb.record.PNumericAggregationValue.operator:type_name -> com.apple.foundationdb.record.PNumericAggregationValue.PPhysicalOperator
	23,  // 98: com.apple.foundationdb.record.PNumericAggregationValue.child:type_name -> com.apple.foundationdb.record.PValue
	16,  // 99: com.apple.foundationdb.record.PObjectValue.result_type:type_name -> com.apple.foundationdb.record.PType
	23,  // 100: com.apple.foundationdb.record.POfTypeValue.child:type_name -> com.apple.foundationdb.record.PValue
	16,  // 101: com.apple.foundationdb.record.POfTypeValue.expected_type:type_name -> com.apple.foundationdb.record.PType
	23,  // 102: com.apple.foundationdb.record.PPatternForLikeValue.pattern_child:type_name -> com.apple.foundationdb.record.PValue
	23,  // 103: com.apple.foundationdb.record.PPatternForLikeValue.escape_child:type_name -> com.apple.foundationdb.record.PValue
	23,  // 104: com.apple.foundationdb.record.PPickValue.selector_value:type_name -> com.apple.foundationdb.record.PValue
	23,  // 105: com.apple.foundationdb.record.PPickValue.alternative_values:type_name -> com.apple.foundationdb.record.PValue
	16,  // 106: com.apple.foundationdb.record.PPickValue.result_type:type_name -> com.apple.foundationdb.record.PType
	23,  // 107: com.apple.foundationdb.record.PPromoteValue.in_value:type_name -> com.apple.foundationdb.record.PValue
	16,  // 108: com.apple.foundationdb.record.PPromoteValue.promote_to_type:type_name -> com.apple.foundationdb.record.PType
	17,  // 109: com.apple.foundationdb.record.PPromoteValue.promotion_trie:type_name -> com.apple.foundationdb.record.PCoercionTrieNode
	16,  // 110: com.apple.foundationdb.record.PQuantifiedObjectValue.result_type:type_name -> com.apple.foundationdb.record.PType
	16,  // 111: com.apple.foundationdb.record.PQueriedValue.result_type:type_name -> com.apple.foundationdb.record.PType
	65,  // 112: com.apple.foundationdb.record.PRankValue.super:type_name -> com.apple.foundationdb.record.PWindowedValue
	16,  // 113: com.apple.foundationdb.record.PRecordConstructorValue.result_type:type_name -> com.apple.foundationdb.record.PType
	174, // 114: com.apple.foundationdb.record.PRecordConstructorValue.columns:type_name -> com.apple.foundationdb.record.PRecordConstructorValue.PColumn
	12,  // 115: com.apple.foundationdb.record.PRelOpValue.comparison_type:type_name -> com.apple.foundationdb.record.PComparison.PComparisonType
	23,  // 116: com.apple.foundationdb.record.PRelOpValue.children:type_name -> com.apple.foundationdb.record.PValue
	58,  // 117: com.apple.foundationdb.record.PBinaryRelOpValue.super:type_name -> com.apple.foundationdb.record.PRelOpValue
	9,   // 118: com.apple.foundationdb.record.PBinaryRelOpValue.operator:type_name -> com.apple.foundationdb.record.PBinaryRelOpValue.PBinaryPhysicalOperator
	16,  // 119: com.apple.foundationdb.record.PThrowsValue.result_type:type_name -> com.apple.foundationdb.record.PType
	58,  // 120: com.apple.foundationdb.record.PUnaryRelOpValue.super:type_name -> com.apple.foundationdb.record.PRelOpValue
	10,  // 121: com.apple.foundationdb.record.PUnaryRelOpValue.operator:type_name -> com.apple.foundationdb.record.PUnaryRelOpValue.PUnaryPhysicalOperator
	23,  // 122: com.apple.foundationdb.record.PUdfValue.children:type_name -> com.apple.foundationdb.record.PValue
	16,  // 123: com.apple.foundationdb.record.PUdfValue.result_type:type_name -> com.apple.foundationdb.record.PType
	11,  // 124: com.apple.foundationdb.record.PVariadicFunctionValue.operator:type_name -> com.apple.foundationdb.record.PVariadicFunctionValue.PPhysicalOperator
	23,  // 125: com.apple.foundationdb.record.PVariadicFunctionValue.children:type_name -> com.apple.foundationdb.record.PValue
	23,  // 126: com.apple.foundationdb.record.PWindowedValue.partitioning_values:type_name -> com.apple.foundationdb.record.PValue
	23,  // 127: com.apple.foundationdb.record.PWindowedValue.argument_values:type_name -> com.apple.foundationdb.record.PValue
	186, // 128: com.apple.foundationdb.record.PComparison.additional_comparisons:type_name -> google.protobuf.Any
	67,  // 129: com.apple.foundationdb.record.PComparison.simple_comparison:type_name -> com.apple.foundationdb.record.PSimpleComparison
	72,  // 130: com.apple.foundationdb.record.PComparison.parameter_comparison:type_name -> com.apple.foundationdb.record.PParameterComparison
	73,  // 131: com.apple.foundationdb.record.PComparison.value_comparison:type_name -> com.apple.foundationdb.record.PValueComparison
	74,  // 132: com.apple.foundationdb.record.PComparison.list_comparison:type_name -> com.apple.foundationdb.record.PListComparison
	75,  // 133: com.apple.foundationdb.record.PComparison.null_comparison:type_name -> com.apple.foundationdb.record.PNullComparison
	76,  // 134: com.apple.foundationdb.record.PComparison.opaque_equality_comparison:type_name -> com.apple.foundationdb.record.POpaqueEqualityComparison
	77,  // 135: com.apple.foundationdb.record.PComparison.multi_column_comparison:type_name -> com.apple.foundationdb.record.PMultiColumnComparison
	78,  // 136: com.apple.foundationdb.record.PComparison.inverted_function_comparison:type_name -> com.apple.foundationdb.record.PInvertedFunctionComparison
	79,  // 137: com.apple.foundationdb.record.PComparison.record_type_comparison:type_name -> com.apple.foundationdb.record.PRecordTypeComparison
	12,  // 138: com.apple.foundationdb.record.PSimpleComparison.type:type_name -> com.apple.foundationdb.record.PComparison.PComparisonType
	68,  // 139: com.apple.foundationdb.record.PSimpleComparison.object:type_name -> com.apple.foundationdb.record.PComparableObject
	187, // 140: com.apple.foundationdb.record.PComparableObject.primitive_object:type_name -> com.apple.foundationdb.record.Value
	69,  // 141: com.apple.foundationdb.record.PComparableObject.enum_object:type_name -> com.apple.foundationdb.record.PEnumLightValue
	70,  // 142: com.apple.foundationdb.record.PComparableObject.uuid:type_name -> com.apple.foundationdb.record.PUUID
	71,  // 143: com.apple.foundationdb.record.PComparableObject.fdb_record_version:type_name -> com.apple.foundationdb.record.PFDBRecordVersion
	12,  // 144: com.apple.foundationdb.record.PParameterComparison.type:type_name -> com.apple.foundationdb.record.PComparison.PComparisonType
	13,  // 145: com.apple.foundationdb.record.PParameterComparison.internal:type_name -> com.apple.foundationdb.record.PParameterComparison.PBindingKind
	12,  // 146: com.apple.foundationdb.record.PValueComparison.type:type_name -> com.apple.foundationdb.record.PComparison.PComparisonType
	23,  // 147: com.apple.foundationdb.record.PValueComparison.comparandValue:type_name -> com.apple.foundationdb.record.PValue
	12,  // 148: com.apple.foundationdb.record.PListComparison.type:type_name -> com.apple.foundationdb.record.PComparison.PComparisonType
	68,  // 149: com.apple.foundationdb.record.PListComparison.comparand:type_name -> com.apple.foundationdb.record.PComparableObject
	12,  // 150: com.apple.foundationdb.record.PNullComparison.type:type_name -> com.apple.foundationdb.record.PComparison.PComparisonType
	66,  // 151: com.apple.foundationdb.record.PMultiColumnComparison.inner:type_name -> com.apple.foundationdb.record.PComparison
	188, // 152: com.apple.foundationdb.record.PInvertedFunctionComparison.function:type_name -> com.apple.foundationdb.record.Function
	66,  // 153: com.apple.foundationdb.record.PInvertedFunctionComparison.original_comparison:type_name -> com.apple.foundationdb.record.PComparison
	12,  // 154: com.apple.foundationdb.record.PInvertedFunctionComparison.type:type_name -> com.apple.foundationdb.record.PComparison.PComparisonType
	186, // 155: com.apple.foundationdb.record.PQueryPredicate.additional_query_predicates:type_name -> google.protobuf.Any
	83,  // 156: com.apple.foundationdb.record.PQueryPredicate.and_predicate:type_name -> com.apple.foundationdb.record.PAndPredicate
	85,  // 157: com.apple.foundationdb.record.PQueryPredicate.constant_predicate:type_name -> com.apple.foundationdb.record.PConstantPredicate
	87,  // 158: com.apple.foundationdb.record.PQueryPredicate.exists_predicate:type_name -> com.apple.foundationdb.record.PExistsPredicate
	88,  // 159: com.apple.foundationdb.record.PQueryPredicate.not_predicate:type_name -> com.apple.foundationdb.record.PNotPredicate
	89,  // 160: com.apple.foundationdb.record.PQueryPredicate.or_predicate:type_name -> com.apple.foundationdb.record.POrPredicate
	90,  // 161: com.apple.foundationdb.record.PQueryPredicate.predicate_with_value_and_ranges:type_name -> com.apple.foundationdb.record.PPredicateWithValueAndRanges
	93,  // 162: com.apple.foundationdb.record.PQueryPredicate.value_predicate:type_name -> com.apple.foundationdb.record.PValuePredicate
	84,  // 163: com.apple.foundationdb.record.PQueryPredicate.compatible_type_evolution_predicate:type_name -> com.apple.foundationdb.record.PCompatibleTypeEvolutionPredicate
	86,  // 164: com.apple.foundationdb.record.PQueryPredicate.database_object_dependencies_predicate:type_name -> com.apple.foundationdb.record.PDatabaseObjectDependenciesPredicate
	81,  // 165: com.apple.foundationdb.record.PAndOrPredicate.super:type_name -> com.apple.foundationdb.record.PAbstractQueryPredicate
	80,  // 166: com.apple.foundationdb.record.PAndOrPredicate.children:type_name -> com.apple.foundationdb.record.PQueryPredicate
	82,  // 167: com.apple.foundationdb.record.PAndPredicate.super:type_name -> com.apple.foundationdb.record.PAndOrPredicate
	175, // 168: com.apple.foundationdb.record.PCompatibleTypeEvolutionPredicate.record_type_name_field_access_pairs:type_name -> com.apple.foundationdb.record.PCompatibleTypeEvolutionPredicate.PRecordTypeNameFieldAccessPair
	81,  // 169: com.apple.foundationdb.record.PConstantPredicate.super:type_name -> com.apple.foundationdb.record.PAbstractQueryPredicate
	176, // 170: com.apple.foundationdb.record.PDatabaseObjectDependenciesPredicate.used_indexes:type_name -> com.apple.foundationdb.record.PDatabaseObjectDependenciesPredicate.PUsedIndex
	81,  // 171: com.apple.foundationdb.record.PExistsPredicate.super:type_name -> com.apple.foundationdb.record.PAbstractQueryPredicate
	81,  // 172: com.apple.foundationdb.record.PNotPredicate.super:type_name -> com.apple.foundationdb.record.PAbstractQueryPredicate
	80,  // 173: com.apple.foundationdb.record.PNotPredicate.child:type_name -> com.apple.foundationdb.record.PQueryPredicate
	82,  // 174: com.apple.foundationdb.record.POrPredicate.super:type_name -> com.apple.foundationdb.record.PAndOrPredicate
	81,  // 175: com.apple.foundationdb.record.PPredicateWithValueAndRanges.super:type_name -> com.apple.foundationdb.record.PAbstractQueryPredicate
	23,  // 176: com.apple.foundationdb.record.PPredicateWithValueAndRanges.value:type_name -> com.apple.foundationdb.record.PValue
	91,  // 177: com.apple.foundationdb.record.PPredicateWithValueAndRanges.ranges:type_name -> com.apple.foundationdb.record.PRangeConstraints
	92,  // 178: com.apple.foundationdb.record.PRangeConstraints.evaluable_range:type_name -> com.apple.foundationdb.record.PCompilableRange
	66,  // 179: com.apple.foundationdb.record.PRangeConstraints.deferred_ranges:type_name -> com.apple.foundationdb.record.PComparison
	66,  // 180: com.apple.foundationdb.record.PCompilableRange.compilable_comparisons:type_name -> com.apple.foundationdb.record.PComparison
	81,  // 181: com.apple.foundationdb.record.PValuePredicate.super:type_name -> com.apple.foundationdb.record.PAbstractQueryPredicate
	23,  // 182: com.apple.foundationdb.record.PValuePredicate.value:type_name -> com.apple.foundationdb.record.PValue
	66,  // 183: com.apple.foundationdb.record.PValuePredicate.comparison:type_name -> com.apple.foundationdb.record.PComparison
	95,  // 184: com.apple.foundationdb.record.PPhysicalQuantifier.plan_references:type_name -> com.apple.foundationdb.record.PPlanReference
	96,  // 185: com.apple.foundationdb.record.PPlanReference.record_query_plan:type_name -> com.apple.foundationdb.record.PRecordQueryPlan
	186, // 186: com.apple.foundationdb.record.PRecordQueryPlan.additional_plans:type_name -> google.protobuf.Any
	98,  // 187: com.apple.foundationdb.record.PRecordQueryPlan.aggregate_index_plan:type_name -> com.apple.foundationdb.record.PRecordQueryAggregateIndexPlan
	99,  // 188: com.apple.foundationdb.record.PRecordQueryPlan.covering_index_plan:type_name -> com.apple.foundationdb.record.PRecordQueryCoveringIndexPlan
	101, // 189: com.apple.foundationdb.record.PRecordQueryPlan.dam_plan:type_name -> com.apple.foundationdb.record.PRecordQueryDamPlan
	102, // 190: com.apple.foundationdb.record.PRecordQueryPlan.delete_plan:type_name -> com.apple.foundationdb.record.PRecordQueryDeletePlan
	103, // 191: com.apple.foundationdb.record.PRecordQueryPlan.explode_plan:type_name -> com.apple.foundationdb.record.PRecordQueryExplodePlan
	104, // 192: com.apple.foundationdb.record.PRecordQueryPlan.fetch_from_partial_record_plan:type_name -> com.apple.foundationdb.record.PRecordQueryFetchFromPartialRecordPlan
	106, // 193: com.apple.foundationdb.record.PRecordQueryPlan.first_or_default_plan:type_name -> com.apple.foundationdb.record.PRecordQueryFirstOrDefaultPlan
	107, // 194: com.apple.foundationdb.record.PRecordQueryPlan.flat_map_plan:type_name -> com.apple.foundationdb.record.PRecordQueryFlatMapPlan
	117, // 195: com.apple.foundationdb.record.PRecordQueryPlan.in_comparand_join_plan:type_name -> com.apple.foundationdb.record.PRecordQueryInComparandJoinPlan
	108, // 196: com.apple.foundationdb.record.PRecordQueryPlan.record_query_index_plan:type_name -> com.apple.foundationdb.record.PRecordQueryIndexPlan
	126, // 197: com.apple.foundationdb.record.PRecordQueryPlan.in_parameter_join_plan:type_name -> com.apple.foundationdb.record.PRecordQueryInParameterJoinPlan
	127, // 198: com.apple.foundationdb.record.PRecordQueryPlan.insert_plan:type_name -> com.apple.foundationdb.record.PRecordQueryInsertPlan
	130, // 199: com.apple.foundationdb.record.PRecordQueryPlan.intersection_on_key_expression_plan:type_name -> com.apple.foundationdb.record.PRecordQueryIntersectionOnKeyExpressionPlan
	131, // 200: com.apple.foundationdb.record.PRecordQueryPlan.intersection_on_values_plan:type_name -> com.apple.foundationdb.record.PRecordQueryIntersectionOnValuesPlan
	133, // 201: com.apple.foundationdb.record.PRecordQueryPlan.in_union_on_key_expression_plan:type_name -> com.apple.foundationdb.record.PRecordQueryInUnionOnKeyExpressionPlan
	134, // 202: com.apple.foundationdb.record.PRecordQueryPlan.in_union_on_values_plan:type_name -> com.apple.foundationdb.record.PRecordQueryInUnionOnValuesPlan
	135, // 203: com.apple.foundationdb.record.PRecordQueryPlan.in_values_join_plan:type_name -> com.apple.foundationdb.record.PRecordQueryInValuesJoinPlan
	136, // 204: com.apple.foundationdb.record.PRecordQueryPlan.map_plan:type_name -> com.apple.foundationdb.record.PRecordQueryMapPlan
	137, // 205: com.apple.foundationdb.record.PRecordQueryPlan.predicates_filter_plan:type_name -> com.apple.foundationdb.record.PRecordQueryPredicatesFilterPlan
	138, // 206: com.apple.foundationdb.record.PRecordQueryPlan.range_plan:type_name -> com.apple.foundationdb.record.PRecordQueryRangePlan
	141, // 207: com.apple.foundationdb.record.PRecordQueryPlan.scan_plan:type_name -> com.apple.foundationdb.record.PRecordQueryScanPlan
	142, // 208: com.apple.foundationdb.record.PRecordQueryPlan.score_for_rank_plan:type_name -> com.apple.foundationdb.record.PRecordQueryScoreForRankPlan
	139, // 209: com.apple.foundationdb.record.PRecordQueryPlan.sort_plan:type_name -> com.apple.foundationdb.record.PRecordQuerySortPlan
	145, // 210: com.apple.foundationdb.record.PRecordQueryPlan.streaming_aggregation_plan:type_name -> com.apple.foundationdb.record.PRecordQueryStreamingAggregationPlan
	146, // 211: com.apple.foundationdb.record.PRecordQueryPlan.type_filter_plan:type_name -> com.apple.foundationdb.record.PRecordQueryTypeFilterPlan
	147, // 212: com.apple.foundationdb.record.PRecordQueryPlan.union_on_key_expression_plan:type_name -> com.apple.foundationdb.record.PRecordQueryUnionOnKeyExpressionPlan
	148, // 213: com.apple.foundationdb.record.PRecordQueryPlan.union_on_values_plan:type_name -> com.apple.foundationdb.record.PRecordQueryUnionOnValuesPlan
	150, // 214: com.apple.foundationdb.record.PRecordQueryPlan.unordered_distinct_plan:type_name -> com.apple.foundationdb.record.PRecordQueryUnorderedDistinctPlan
	151, // 215: com.apple.foundationdb.record.PRecordQueryPlan.unordered_primary_key_distinct_plan:type_name -> com.apple.foundationdb.record.PRecordQueryUnorderedPrimaryKeyDistinctPlan
	152, // 216: com.apple.foundationdb.record.PRecordQueryPlan.unordered_union_plan:type_name -> com.apple.foundationdb.record.PRecordQueryUnorderedUnionPlan
	154, // 217: com.apple.foundationdb.record.PRecordQueryPlan.update_plan:type_name -> com.apple.foundationdb.record.PRecordQueryUpdatePlan
	94,  // 218: com.apple.foundationdb.record.PRecordQueryAbstractDataModificationPlan.inner:type_name -> com.apple.foundationdb.record.PPhysicalQuantifier
	161, // 219: com.apple.foundationdb.record.PRecordQueryAbstractDataModificationPlan.target_type:type_name -> com.apple.foundationdb.record.PType.PRecordType
	21,  // 220: com.apple.foundationdb.record.PRecordQueryAbstractDataModificationPlan.transformations_trie:type_name -> com.apple.foundationdb.record.PTransformationTrieNode
	17,  // 221: com.apple.foundationdb.record.PRecordQueryAbstractDataModificationPlan.coercion_trie:type_name -> com.apple.foundationdb.record.PCoercionTrieNode
	23,  // 222: com.apple.foundationdb.record.PRecordQueryAbstractDataModificationPlan.computation_value:type_name -> com.apple.foundationdb.record.PValue
	108, // 223: com.apple.foundationdb.record.PRecordQueryAggregateIndexPlan.index_plan:type_name -> com.apple.foundationdb.record.PRecordQueryIndexPlan
	100, // 224: com.apple.foundationdb.record.PRecordQueryAggregateIndexPlan.to_record:type_name -> com.apple.foundationdb.record.PIndexKeyValueToPartialRecord
	23,  // 225: com.apple.foundationdb.record.PRecordQueryAggregateIndexPlan.result_value:type_name -> com.apple.foundationdb.record.PValue
	116, // 226: com.apple.foundationdb.record.PRecordQueryAggregateIndexPlan.constraint:type_name -> com.apple.foundationdb.record.PQueryPlanConstraint
	96,  // 227: com.apple.foundationdb.record.PRecordQueryCoveringIndexPlan.index_plan:type_name -> com.apple.foundationdb.record.PRecordQueryPlan
	100, // 228: com.apple.foundationdb.record.PRecordQueryCoveringIndexPlan.to_record:type_name -> com.apple.foundationdb.record.PIndexKeyValueToPartialRecord
	177, // 229: com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.copiers:type_name -> com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PCopier
	94,  // 230: com.apple.foundationdb.record.PRecordQueryDamPlan.inner:type_name -> com.apple.foundationdb.record.PPhysicalQuantifier
	140, // 231: com.apple.foundationdb.record.PRecordQueryDamPlan.key:type_name -> com.apple.foundationdb.record.PRecordQuerySortKey
	94,  // 232: com.apple.foundationdb.record.PRecordQueryDeletePlan.inner:type_name -> com.apple.foundationdb.record.PPhysicalQuantifier
	23,  // 233: com.apple.foundationdb.record.PRecordQueryExplodePlan.collection_value:type_name -> com.apple.foundationdb.record.PValue
	94,  // 234: com.apple.foundationdb.record.PRecordQueryFetchFromPartialRecordPlan.inner:type_name -> com.apple.foundationdb.record.PPhysicalQuantifier
	16,  // 235: com.apple.foundationdb.record.PRecordQueryFetchFromPartialRecordPlan.result_type:type_name -> com.apple.foundationdb.record.PType
	1,   // 236: com.apple.foundationdb.record.PRecordQueryFetchFromPartialRecordPlan.fetch_index_records:type_name -> com.apple.foundationdb.record.PFetchIndexRecords
	94,  // 237: com.apple.foundationdb.record.PRecordQueryFilterPlanBase.inner:type_name -> com.apple.foundationdb.record.PPhysicalQuantifier
	94,  // 238: com.apple.foundationdb.record.PRecordQueryFirstOrDefaultPlan.inner:type_name -> com.apple.foundationdb.record.PPhysicalQuantifier
	23,  // 239: com.apple.foundationdb.record.PRecordQueryFirstOrDefaultPlan.on_empty_result_value:type_name -> com.apple.foundationdb.record.PValue
	94,  // 240: com.apple.foundationdb.record.PRecordQueryFlatMapPlan.outer_quantifier:type_name -> com.apple.foundationdb.record.PPhysicalQuantifier
	94,  // 241: com.apple.foundationdb.record.PRecordQueryFlatMapPlan.inner_quantifier:type_name -> com.apple.foundationdb.record.PPhysicalQuantifier
	23,  // 242: com.apple.foundationdb.record.PRecordQueryFlatMapPlan.result_value:type_name -> com.apple.foundationdb.record.PValue
	189, // 243: com.apple.foundationdb.record.PRecordQueryIndexPlan.common_primary_key:type_name -> com.apple.foundationdb.record.KeyExpression
	109, // 244: com.apple.foundationdb.record.PRecordQueryIndexPlan.scan_parameters:type_name -> com.apple.foundationdb.record.PIndexScanParameters
	0,   // 245: com.apple.foundationdb.record.PRecordQueryIndexPlan.index_fetch_method:type_name -> com.apple.foundationdb.record.PIndexFetchMethod
	1,   // 246: com.apple.foundationdb.record.PRecordQueryIndexPlan.fetch_index_records:type_name -> com.apple.foundationdb.record.PFetchIndexRecords
	16,  // 247: com.apple.foundationdb.record.PRecordQueryIndexPlan.result_type:type_name -> com.apple.foundationdb.record.PType
	116, // 248: com.apple.foundationdb.record.PRecordQueryIndexPlan.constraint:type_name -> com.apple.foundationdb.record.PQueryPlanConstraint
	186, // 249: com.apple.foundationdb.record.PIndexScanParameters.additional_index_scan_parameters:type_name -> google.protobuf.Any
	112, // 250: com.apple.foundationdb.record.PIndexScanParameters.index_scan_comparisons:type_name -> com.apple.foundationdb.record.PIndexScanComparisons
	113, // 251: com.apple.foundationdb.record.PIndexScanParameters.multidimensional_index_scan_comparisons:type_name -> com.apple.foundationdb.record.PMultidimensionalIndexScanComparisons
	115, // 252: com.apple.foundationdb.record.PIndexScanParameters.time_window_scan_comparisons:type_name -> com.apple.foundationdb.record.PTimeWindowScanComparisons
	66,  // 253: com.apple.foundationdb.record.PScanComparisons.equality_comparisons:type_name -> com.apple.foundationdb.record.PComparison
	66,  // 254: com.apple.foundationdb.record.PScanComparisons.inequality_comparisons:type_name -> com.apple.foundationdb.record.PComparison
	110, // 255: com.apple.foundationdb.record.PIndexScanComparisons.scan_type:type_name -> com.apple.foundationdb.record.PIndexScanType
	111, // 256: com.apple.foundationdb.record.PIndexScanComparisons.scan_comparisons:type_name -> com.apple.foundationdb.record.PScanComparisons
	111, // 257: com.apple.foundationdb.record.PMultidimensionalIndexScanComparisons.prefix_scan_comparisons:type_name -> com.apple.foundationdb.record.PScanComparisons
	111, // 258: com.apple.foundationdb.record.PMultidimensionalIndexScanComparisons.dimensions_scan_comparisons:type_name -> com.apple.foundationdb.record.PScanComparisons
	111, // 259: com.apple.foundationdb.record.PMultidimensionalIndexScanComparisons.suffix_scan_comparisons:type_name -> com.apple.foundationdb.record.PScanComparisons
	112, // 260: com.apple.foundationdb.record.PTimeWindowScanComparisons.super:type_name -> com.apple.foundationdb.record.PIndexScanComparisons
	114, // 261: com.apple.foundationdb.record.PTimeWindowScanComparisons.time_window:type_name -> com.apple.foundationdb.record.PTimeWindowForFunction
	80,  // 262: com.apple.foundationdb.record.PQueryPlanConstraint.predicate:type_name -> com.apple.foundationdb.record.PQueryPredicate
	118, // 263: com.apple.foundationdb.record.PRecordQueryInComparandJoinPlan.super:type_name -> com.apple.foundationdb.record.PRecordQueryInJoinPlan
	94,  // 264: com.apple.foundationdb.record.PRecordQueryInJoinPlan.physical_quantifier:type_name -> com.apple.foundationdb.record.PPhysicalQuantifier
	119, // 265: com.apple.foundationdb.record.PRecordQueryInJoinPlan.in_source:type_name -> com.apple.foundationdb.record.PInSource
	13,  // 266: com.apple.foundationdb.record.PRecordQueryInJoinPlan.internal:type_name -> com.apple.foundationdb.record.PParameterComparison.PBindingKind
	120, // 267: com.apple.foundationdb.record.PInSource.in_comparand_source:type_name -> com.apple.foundationdb.record.PInComparandSource
	121, // 268: com.apple.foundationdb.record.PInSource.sorted_in_comparand_source:type_name -> com.apple.foundationdb.record.PSortedInComparandSource
	122, // 269: com.apple.foundationdb.record.PInSource.in_parameter_source:type_name -> com.apple.foundationdb.record.PInParameterSource
	123, // 270: com.apple.foundationdb.record.PInSource.sorted_in_parameter_source:type_name -> com.apple.foundationdb.record.PSortedInParameterSource
	124, // 271: com.apple.foundationdb.record.PInSource.in_values_source:type_name -> com.apple.foundationdb.record.PInValuesSource
	125, // 272: com.apple.foundationdb.record.PInSource.sorted_in_values_source:type_name -> com.apple.foundationdb.record.PSortedInValuesSource
	183, // 273: com.apple.foundationdb.record.PInComparandSource.super:type_name -> com.apple.foundationdb.record.PInSource.Super
	66,  // 274: com.apple.foundationdb.record.PInComparandSource.comparison:type_name -> com.apple.foundationdb.record.PComparison
	120, // 275: com.apple.foundationdb.record.PSortedInComparandSource.super:type_name -> com.apple.foundationdb.record.PInComparandSource
	183, // 276: com.apple.foundationdb.record.PInParameterSource.super:type_name -> com.apple.foundationdb.record.PInSource.Super
	122, // 277: com.apple.foundationdb.record.PSortedInParameterSource.super:type_name -> com.apple.foundationdb.record.PInParameterSource
	183, // 278: com.apple.foundationdb.record.PInValuesSource.super:type_name -> com.apple.foundationdb.record.PInSource.Super
	68,  // 279: com.apple.foundationdb.record.PInValuesSource.values:type_name -> com.apple.foundationdb.record.PComparableObject
	124, // 280: com.apple.foundationdb.record.PSortedInValuesSource.super:type_name -> com.apple.foundationdb.record.PInValuesSource
	118, // 281: com.apple.foundationdb.record.PRecordQueryInParameterJoinPlan.super:type_name -> com.apple.foundationdb.record.PRecordQueryInJoinPlan
	97,  // 282: com.apple.foundationdb.record.PRecordQueryInsertPlan.super:type_name -> com.apple.foundationdb.record.PRecordQueryAbstractDataModificationPlan
	94,  // 283: com.apple.foundationdb.record.PRecordQueryIntersectionPlan.quantifiers:type_name -> com.apple.foundationdb.record.PPhysicalQuantifier
	129, // 284: com.apple.foundationdb.record.PRecordQueryIntersectionPlan.comparison_key_function:type_name -> com.apple.foundationdb.record.PComparisonKeyFunction
	184, // 285: com.apple.foundationdb.record.PComparisonKeyFunction.on_key_expression:type_name -> com.apple.foundationdb.record.PComparisonKeyFunction.POnKeyExpression
	185, // 286: com.apple.foundationdb.record.PComparisonKeyFunction.on_values:type_name -> com.apple.foundationdb.record.PComparisonKeyFunction.POnValues
	128, // 287: com.apple.foundationdb.record.PRecordQueryIntersectionOnKeyExpressionPlan.super:type_name -> com.apple.foundationdb.record.PRecordQueryIntersectionPlan
	128, // 288: com.apple.foundationdb.record.PRecordQueryIntersectionOnValuesPlan.super:type_name -> com.apple.foundationdb.record.PRecordQueryIntersectionPlan
	94,  // 289: com.apple.foundationdb.record.PRecordQueryInUnionPlan.inner:type_name -> com.apple.foundationdb.record.PPhysicalQuantifier
	119, // 290: com.apple.foundationdb.record.PRecordQueryInUnionPlan.in_sources:type_name -> com.apple.foundationdb.record.PInSource
	129, // 291: com.apple.foundationdb.record.PRecordQueryInUnionPlan.comparison_key_function:type_name -> com.apple.foundationdb.record.PComparisonKeyFunction
	13,  // 292: com.apple.foundationdb.record.PRecordQueryInUnionPlan.internal:type_name -> com.apple.foundationdb.record.PParameterComparison.PBindingKind
	132, // 293: com.apple.foundationdb.record.PRecordQueryInUnionOnKeyExpressionPlan.super:type_name -> com.apple.foundationdb.record.PRecordQueryInUnionPlan
	132, // 294: com.apple.foundationdb.record.PRecordQueryInUnionOnValuesPlan.super:type_name -> com.apple.foundationdb.record.PRecordQueryInUnionPlan
	118, // 295: com.apple.foundationdb.record.PRecordQueryInValuesJoinPlan.super:type_name -> com.apple.foundationdb.record.PRecordQueryInJoinPlan
	94,  // 296: com.apple.foundationdb.record.PRecordQueryMapPlan.inner:type_name -> com.apple.foundationdb.record.PPhysicalQuantifier
	23,  // 297: com.apple.foundationdb.record.PRecordQueryMapPlan.result_value:type_name -> com.apple.foundationdb.record.PValue
	105, // 298: com.apple.foundationdb.record.PRecordQueryPredicatesFilterPlan.super:type_name -> com.apple.foundationdb.record.PRecordQueryFilterPlanBase
	80,  // 299: com.apple.foundationdb.record.PRecordQueryPredicatesFilterPlan.predicates:type_name -> com.apple.foundationdb.record.PQueryPredicate
	23,  // 300: com.apple.foundationdb.record.PRecordQueryRangePlan.exclusive_limit_value:type_name -> com.apple.foundationdb.record.PValue
	94,  // 301: com.apple.foundationdb.record.PRecordQuerySortPlan.inner:type_name -> com.apple.foundationdb.record.PPhysicalQuantifier
	140, // 302: com.apple.foundationdb.record.PRecordQuerySortPlan.key:type_name -> com.apple.foundationdb.record.PRecordQuerySortKey
	189, // 303: com.apple.foundationdb.record.PRecordQuerySortKey.key:type_name -> com.apple.foundationdb.record.KeyExpression
	16,  // 304: com.apple.foundationdb.record.PRecordQueryScanPlan.flowed_type:type_name -> com.apple.foundationdb.record.PType
	189, // 305: com.apple.foundationdb.record.PRecordQueryScanPlan.common_primary_key:type_name -> com.apple.foundationdb.record.KeyExpression
	111, // 306: com.apple.foundationdb.record.PRecordQueryScanPlan.comparisons:type_name -> com.apple.foundationdb.record.PScanComparisons
	94,  // 307: com.apple.foundationdb.record.PRecordQueryScoreForRankPlan.inner:type_name -> com.apple.foundationdb.record.PPhysicalQuantifier
	143, // 308: com.apple.foundationdb.record.PRecordQueryScoreForRankPlan.ranks:type_name -> com.apple.foundationdb.record.PScoreForRank
	15,  // 309: com.apple.foundationdb.record.PScoreForRank.binding_function:type_name -> com.apple.foundationdb.record.PScoreForRank.PBindingFunction
	144, // 310: com.apple.foundationdb.record.PScoreForRank.function:type_name -> com.apple.foundationdb.record.PIndexAggregateFunction
	66,  // 311: com.apple.foundationdb.record.PScoreForRank.comparisons:type_name -> com.apple.foundationdb.record.PComparison
	189, // 312: com.apple.foundationdb.record.PIndexAggregateFunction.operand:type_name -> com.apple.foundationdb.record.KeyExpression
	94,  // 313: com.apple.foundationdb.record.PRecordQueryStreamingAggregationPlan.inner:type_name -> com.apple.foundationdb.record.PPhysicalQuantifier
	23,  // 314: com.apple.foundationdb.record.PRecordQueryStreamingAggregationPlan.aggregate_value:type_name -> com.apple.foundationdb.record.PValue
	23,  // 315: com.apple.foundationdb.record.PRecordQueryStreamingAggregationPlan.grouping_key_value:type_name -> com.apple.foundationdb.record.PValue
	23,  // 316: com.apple.foundationdb.record.PRecordQueryStreamingAggregationPlan.complete_result_value:type_name -> com.apple.foundationdb.record.PValue
	94,  // 317: com.apple.foundationdb.record.PRecordQueryTypeFilterPlan.inner:type_name -> com.apple.foundationdb.record.PPhysicalQuantifier
	16,  // 318: com.apple.foundationdb.record.PRecordQueryTypeFilterPlan.result_type:type_name -> com.apple.foundationdb.record.PType
	149, // 319: com.apple.foundationdb.record.PRecordQueryUnionOnKeyExpressionPlan.super:type_name -> com.apple.foundationdb.record.PRecordQueryUnionPlan
	149, // 320: com.apple.foundationdb.record.PRecordQueryUnionOnValuesPlan.super:type_name -> com.apple.foundationdb.record.PRecordQueryUnionPlan
	153, // 321: com.apple.foundationdb.record.PRecordQueryUnionPlan.super:type_name -> com.apple.foundationdb.record.PRecordQueryUnionPlanBase
	129, // 322: com.apple.foundationdb.record.PRecordQueryUnionPlan.comparison_key_function:type_name -> com.apple.foundationdb.record.PComparisonKeyFunction
	94,  // 323: com.apple.foundationdb.record.PRecordQueryUnorderedDistinctPlan.inner:type_name -> com.apple.foundationdb.record.PPhysicalQuantifier
	189, // 324: com.apple.foundationdb.record.PRecordQueryUnorderedDistinctPlan.comparison_key:type_name -> com.apple.foundationdb.record.KeyExpression
	94,  // 325: com.apple.foundationdb.record.PRecordQueryUnorderedPrimaryKeyDistinctPlan.inner:type_name -> com.apple.foundationdb.record.PPhysicalQuantifier
	153, // 326: com.apple.foundationdb.record.PRecordQueryUnorderedUnionPlan.super:type_name -> com.apple.foundationdb.record.PRecordQueryUnionPlanBase
	94,  // 327: com.apple.foundationdb.record.PRecordQueryUnionPlanBase.quantifiers:type_name -> com.apple.foundationdb.record.PPhysicalQuantifier
	97,  // 328: com.apple.foundationdb.record.PRecordQueryUpdatePlan.super:type_name -> com.apple.foundationdb.record.PRecordQueryAbstractDataModificationPlan
	2,   // 329: com.apple.foundationdb.record.PType.PPrimitiveType.type_code:type_name -> com.apple.foundationdb.record.PType.PTypeCode
	164, // 330: com.apple.foundationdb.record.PType.PEnumType.enum_values:type_name -> com.apple.foundationdb.record.PType.PEnumType.PEnumValue
	165, // 331: com.apple.foundationdb.record.PType.PRecordType.fields:type_name -> com.apple.foundationdb.record.PType.PRecordType.PField
	16,  // 332: com.apple.foundationdb.record.PType.PRelationType.inner_type:type_name -> com.apple.foundationdb.record.PType
	16,  // 333: com.apple.foundationdb.record.PType.PArrayType.element_type:type_name -> com.apple.foundationdb.record.PType
	16,  // 334: com.apple.foundationdb.record.PType.PRecordType.PField.field_type:type_name -> com.apple.foundationdb.record.PType
	17,  // 335: com.apple.foundationdb.record.PCoercionTrieNode.IntChildPair.child_coercion_trie_node:type_name -> com.apple.foundationdb.record.PCoercionTrieNode
	21,  // 336: com.apple.foundationdb.record.PTransformationTrieNode.IntChildPair.child_transformation_trie_node:type_name -> com.apple.foundationdb.record.PTransformationTrieNode
	169, // 337: com.apple.foundationdb.record.PFieldAccessTrieNode.PResolvedAccessorChildPair.resolved_accessor:type_name -> com.apple.foundationdb.record.PFieldPath.PResolvedAccessor
	22,  // 338: com.apple.foundationdb.record.PFieldAccessTrieNode.PResolvedAccessorChildPair.child_field_access_trie_node:type_name -> com.apple.foundationdb.record.PFieldAccessTrieNode
	16,  // 339: com.apple.foundationdb.record.PFieldPath.PResolvedAccessor.type:type_name -> com.apple.foundationdb.record.PType
	47,  // 340: com.apple.foundationdb.record.PNumericAggregationValue.PSum.super:type_name -> com.apple.foundationdb.record.PNumericAggregationValue
	47,  // 341: com.apple.foundationdb.record.PNumericAggregationValue.PAvg.super:type_name -> com.apple.foundationdb.record.PNumericAggregationValue
	47,  // 342: com.apple.foundationdb.record.PNumericAggregationValue.PMin.super:type_name -> com.apple.foundationdb.record.PNumericAggregationValue
	47,  // 343: com.apple.foundationdb.record.PNumericAggregationValue.PMax.super:type_name -> com.apple.foundationdb.record.PNumericAggregationValue
	165, // 344: com.apple.foundationdb.record.PRecordConstructorValue.PColumn.field:type_name -> com.apple.foundationdb.record.PType.PRecordType.PField
	23,  // 345: com.apple.foundationdb.record.PRecordConstructorValue.PColumn.value:type_name -> com.apple.foundationdb.record.PValue
	22,  // 346: com.apple.foundationdb.record.PCompatibleTypeEvolutionPredicate.PRecordTypeNameFieldAccessPair.field_access_trie_node:type_name -> com.apple.foundationdb.record.PFieldAccessTrieNode
	186, // 347: com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PCopier.additional_copiers:type_name -> google.protobuf.Any
	178, // 348: com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PCopier.field_copier:type_name -> com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PFieldCopier
	180, // 349: com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PCopier.message_copier:type_name -> com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PMessageCopier
	14,  // 350: com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PFieldCopier.source:type_name -> com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PTupleSource
	179, // 351: com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PFieldCopier.copy_if_predicate:type_name -> com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PCopyIfPredicate
	186, // 352: com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PCopyIfPredicate.additional_copy_if_predicate:type_name -> google.protobuf.Any
	181, // 353: com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PCopyIfPredicate.true_predicate:type_name -> com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PCopyIfPredicate.PTruePredicate
	182, // 354: com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PCopyIfPredicate.conditional_upon_path_predicate:type_name -> com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PCopyIfPredicate.PConditionalUponPathPredicate
	100, // 355: com.apple.foundationdb.record.PIndexKeyValueToPartialRecord.PMessageCopier.nested:type_name -> com.apple.foundationdb.record.PIndexKeyValueToPartialRecord
	189, // 356: com.apple.foundationdb.record.PComparisonKeyFunction.POnKeyExpression.comparison_key_expression:type_name -> com.apple.foundationdb.record.KeyExpression
	23,  // 357: com.apple.foundationdb.record.PComparisonKeyFunction.POnValues.comparison_key_values:type_name -> com.apple.foundationdb.record.PValue
	358, // [358:358] is the sub-list for method output_type
	358, // [358:358] is the sub-list for method input_type
	358, // [358:358] is the sub-list for extension type_name
	358, // [358:358] is the sub-list for extension extendee
	0,   // [0:358] is the sub-list for field type_name
}

func init() { file_record_query_plan_proto_init() }
func file_record_query_plan_proto_init() {
	if File_record_query_plan_proto != nil {
		return
	}
	file_record_metadata_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_record_query_plan_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PCoercionTrieNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PCoercionBiFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PPrimitiveCoercionBiFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PArrayCoercionBiFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PTransformationTrieNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PFieldAccessTrieNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*PAbstractArrayConstructorValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PLightArrayConstructorValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*PAndOrValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*PArithmeticValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*PConditionSelectorValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PConstantObjectValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*PConstantValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*PCountValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*PDerivedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*PEmptyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*PExistsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*PFieldValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*PFieldPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*PFirstOrDefaultValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*PIndexedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*PIndexOnlyAggregateValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*PInOpValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*PMaxEverLongValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*PMinEverLongValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*PLikeOperatorValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*PLiteralValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*PNotValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*PNullValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*PNumericAggregationValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*PObjectValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*POfTypeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*PPatternForLikeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*PPickValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*PPromoteValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*PQuantifiedObjectValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*PQueriedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*PRankValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordConstructorValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordTypeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*PRelOpValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*PBinaryRelOpValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*PThrowsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*PUnaryRelOpValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*PUdfValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*PVariadicFunctionValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*PVersionValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*PWindowedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*PComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*PSimpleComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*PComparableObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*PEnumLightValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*PUUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*PFDBRecordVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*PParameterComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*PValueComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*PListComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*PNullComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*POpaqueEqualityComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*PMultiColumnComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*PInvertedFunctionComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordTypeComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*PQueryPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*PAbstractQueryPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*PAndOrPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*PAndPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*PCompatibleTypeEvolutionPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*PConstantPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*PDatabaseObjectDependenciesPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*PExistsPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*PNotPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*POrPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*PPredicateWithValueAndRanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*PRangeConstraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*PCompilableRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*PValuePredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*PPhysicalQuantifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*PPlanReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryAbstractDataModificationPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryAggregateIndexPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryCoveringIndexPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*PIndexKeyValueToPartialRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryDamPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryDeletePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryExplodePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryFetchFromPartialRecordPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryFilterPlanBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryFirstOrDefaultPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryFlatMapPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryIndexPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*PIndexScanParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[94].Exporter = func(v any, i int) any {
			switch v := v.(*PIndexScanType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[95].Exporter = func(v any, i int) any {
			switch v := v.(*PScanComparisons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[96].Exporter = func(v any, i int) any {
			switch v := v.(*PIndexScanComparisons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[97].Exporter = func(v any, i int) any {
			switch v := v.(*PMultidimensionalIndexScanComparisons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[98].Exporter = func(v any, i int) any {
			switch v := v.(*PTimeWindowForFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[99].Exporter = func(v any, i int) any {
			switch v := v.(*PTimeWindowScanComparisons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[100].Exporter = func(v any, i int) any {
			switch v := v.(*PQueryPlanConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[101].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryInComparandJoinPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[102].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryInJoinPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[103].Exporter = func(v any, i int) any {
			switch v := v.(*PInSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[104].Exporter = func(v any, i int) any {
			switch v := v.(*PInComparandSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[105].Exporter = func(v any, i int) any {
			switch v := v.(*PSortedInComparandSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[106].Exporter = func(v any, i int) any {
			switch v := v.(*PInParameterSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[107].Exporter = func(v any, i int) any {
			switch v := v.(*PSortedInParameterSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[108].Exporter = func(v any, i int) any {
			switch v := v.(*PInValuesSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[109].Exporter = func(v any, i int) any {
			switch v := v.(*PSortedInValuesSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[110].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryInParameterJoinPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[111].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryInsertPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[112].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryIntersectionPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[113].Exporter = func(v any, i int) any {
			switch v := v.(*PComparisonKeyFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[114].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryIntersectionOnKeyExpressionPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[115].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryIntersectionOnValuesPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[116].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryInUnionPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[117].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryInUnionOnKeyExpressionPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[118].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryInUnionOnValuesPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[119].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryInValuesJoinPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[120].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryMapPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[121].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryPredicatesFilterPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[122].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryRangePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[123].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQuerySortPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[124].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQuerySortKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[125].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryScanPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[126].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryScoreForRankPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[127].Exporter = func(v any, i int) any {
			switch v := v.(*PScoreForRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[128].Exporter = func(v any, i int) any {
			switch v := v.(*PIndexAggregateFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[129].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryStreamingAggregationPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[130].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryTypeFilterPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[131].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryUnionOnKeyExpressionPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[132].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryUnionOnValuesPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[133].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryUnionPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[134].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryUnorderedDistinctPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[135].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryUnorderedPrimaryKeyDistinctPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[136].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryUnorderedUnionPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[137].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryUnionPlanBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[138].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordQueryUpdatePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[139].Exporter = func(v any, i int) any {
			switch v := v.(*PType_PPrimitiveType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[140].Exporter = func(v any, i int) any {
			switch v := v.(*PType_PNullType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[141].Exporter = func(v any, i int) any {
			switch v := v.(*PType_PNoneType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[142].Exporter = func(v any, i int) any {
			switch v := v.(*PType_PAnyType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[143].Exporter = func(v any, i int) any {
			switch v := v.(*PType_PAnyRecordType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[144].Exporter = func(v any, i int) any {
			switch v := v.(*PType_PEnumType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[145].Exporter = func(v any, i int) any {
			switch v := v.(*PType_PRecordType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[146].Exporter = func(v any, i int) any {
			switch v := v.(*PType_PRelationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[147].Exporter = func(v any, i int) any {
			switch v := v.(*PType_PArrayType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[148].Exporter = func(v any, i int) any {
			switch v := v.(*PType_PEnumType_PEnumValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[149].Exporter = func(v any, i int) any {
			switch v := v.(*PType_PRecordType_PField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[150].Exporter = func(v any, i int) any {
			switch v := v.(*PCoercionTrieNode_IntChildPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[151].Exporter = func(v any, i int) any {
			switch v := v.(*PTransformationTrieNode_IntChildPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[152].Exporter = func(v any, i int) any {
			switch v := v.(*PFieldAccessTrieNode_PResolvedAccessorChildPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[153].Exporter = func(v any, i int) any {
			switch v := v.(*PFieldPath_PResolvedAccessor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[154].Exporter = func(v any, i int) any {
			switch v := v.(*PNumericAggregationValue_PSum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[155].Exporter = func(v any, i int) any {
			switch v := v.(*PNumericAggregationValue_PAvg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[156].Exporter = func(v any, i int) any {
			switch v := v.(*PNumericAggregationValue_PMin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[157].Exporter = func(v any, i int) any {
			switch v := v.(*PNumericAggregationValue_PMax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[158].Exporter = func(v any, i int) any {
			switch v := v.(*PRecordConstructorValue_PColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[159].Exporter = func(v any, i int) any {
			switch v := v.(*PCompatibleTypeEvolutionPredicate_PRecordTypeNameFieldAccessPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[160].Exporter = func(v any, i int) any {
			switch v := v.(*PDatabaseObjectDependenciesPredicate_PUsedIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[161].Exporter = func(v any, i int) any {
			switch v := v.(*PIndexKeyValueToPartialRecord_PCopier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[162].Exporter = func(v any, i int) any {
			switch v := v.(*PIndexKeyValueToPartialRecord_PFieldCopier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[163].Exporter = func(v any, i int) any {
			switch v := v.(*PIndexKeyValueToPartialRecord_PCopyIfPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[164].Exporter = func(v any, i int) any {
			switch v := v.(*PIndexKeyValueToPartialRecord_PMessageCopier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[165].Exporter = func(v any, i int) any {
			switch v := v.(*PIndexKeyValueToPartialRecord_PCopyIfPredicate_PTruePredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[166].Exporter = func(v any, i int) any {
			switch v := v.(*PIndexKeyValueToPartialRecord_PCopyIfPredicate_PConditionalUponPathPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[167].Exporter = func(v any, i int) any {
			switch v := v.(*PInSource_Super); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[168].Exporter = func(v any, i int) any {
			switch v := v.(*PComparisonKeyFunction_POnKeyExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_query_plan_proto_msgTypes[169].Exporter = func(v any, i int) any {
			switch v := v.(*PComparisonKeyFunction_POnValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_record_query_plan_proto_msgTypes[0].OneofWrappers = []any{
		(*PType_PrimitiveType)(nil),
		(*PType_NullType)(nil),
		(*PType_NoneType)(nil),
		(*PType_AnyType)(nil),
		(*PType_EnumType)(nil),
		(*PType_RecordType)(nil),
		(*PType_RelationType)(nil),
		(*PType_ArrayType)(nil),
		(*PType_AnyRecordType)(nil),
	}
	file_record_query_plan_proto_msgTypes[2].OneofWrappers = []any{
		(*PCoercionBiFunction_AdditionalCoercionBiFunctions)(nil),
		(*PCoercionBiFunction_PrimitiveCoercionBiFunction)(nil),
		(*PCoercionBiFunction_ArrayCoercionBiFunction)(nil),
	}
	file_record_query_plan_proto_msgTypes[7].OneofWrappers = []any{
		(*PValue_AdditionalValues)(nil),
		(*PValue_LightArrayConstructorValue)(nil),
		(*PValue_AndOrValue)(nil),
		(*PValue_ArithmeticValue)(nil),
		(*PValue_ConditionSelectorValue)(nil),
		(*PValue_ConstantObjectValue)(nil),
		(*PValue_ConstantValue)(nil),
		(*PValue_CountValue)(nil),
		(*PValue_DerivedValue)(nil),
		(*PValue_EmptyValue)(nil),
		(*PValue_ExistsValue)(nil),
		(*PValue_FieldValue)(nil),
		(*PValue_IndexedValue)(nil),
		(*PValue_MaxEverLongValue)(nil),
		(*PValue_MinEverLongValue)(nil),
		(*PValue_InOpValue)(nil),
		(*PValue_LikeOperatorValue)(nil),
		(*PValue_LiteralValue)(nil),
		(*PValue_NotValue)(nil),
		(*PValue_NullValue)(nil),
		(*PValue_NumericAggregationValueSum)(nil),
		(*PValue_NumericAggregationValueAvg)(nil),
		(*PValue_NumericAggregationValueMin)(nil),
		(*PValue_NumericAggregationValueMax)(nil),
		(*PValue_ObjectValue)(nil),
		(*PValue_OfTypeValue)(nil),
		(*PValue_PatternForLikeValue)(nil),
		(*PValue_PickValue)(nil),
		(*PValue_PromoteValue)(nil),
		(*PValue_QuantifiedObjectValue)(nil),
		(*PValue_QueriedValue)(nil),
		(*PValue_RankValue)(nil),
		(*PValue_RecordConstructorValue)(nil),
		(*PValue_RecordTypeValue)(nil),
		(*PValue_BinaryRelOpValue)(nil),
		(*PValue_UnaryRelOpValue)(nil),
		(*PValue_VariadicFunctionValue)(nil),
		(*PValue_VersionValue)(nil),
		(*PValue_FirstOrDefaultValue)(nil),
		(*PValue_ThrowsValue)(nil),
	}
	file_record_query_plan_proto_msgTypes[50].OneofWrappers = []any{
		(*PComparison_AdditionalComparisons)(nil),
		(*PComparison_SimpleComparison)(nil),
		(*PComparison_ParameterComparison)(nil),
		(*PComparison_ValueComparison)(nil),
		(*PComparison_ListComparison)(nil),
		(*PComparison_NullComparison)(nil),
		(*PComparison_OpaqueEqualityComparison)(nil),
		(*PComparison_MultiColumnComparison)(nil),
		(*PComparison_InvertedFunctionComparison)(nil),
		(*PComparison_RecordTypeComparison)(nil),
	}
	file_record_query_plan_proto_msgTypes[52].OneofWrappers = []any{
		(*PComparableObject_PrimitiveObject)(nil),
		(*PComparableObject_EnumObject)(nil),
		(*PComparableObject_Uuid)(nil),
		(*PComparableObject_FdbRecordVersion)(nil),
		(*PComparableObject_BytesAsByteString)(nil),
	}
	file_record_query_plan_proto_msgTypes[64].OneofWrappers = []any{
		(*PQueryPredicate_AdditionalQueryPredicates)(nil),
		(*PQueryPredicate_AndPredicate)(nil),
		(*PQueryPredicate_ConstantPredicate)(nil),
		(*PQueryPredicate_ExistsPredicate)(nil),
		(*PQueryPredicate_NotPredicate)(nil),
		(*PQueryPredicate_OrPredicate)(nil),
		(*PQueryPredicate_PredicateWithValueAndRanges)(nil),
		(*PQueryPredicate_ValuePredicate)(nil),
		(*PQueryPredicate_CompatibleTypeEvolutionPredicate)(nil),
		(*PQueryPredicate_DatabaseObjectDependenciesPredicate)(nil),
	}
	file_record_query_plan_proto_msgTypes[80].OneofWrappers = []any{
		(*PRecordQueryPlan_AdditionalPlans)(nil),
		(*PRecordQueryPlan_AggregateIndexPlan)(nil),
		(*PRecordQueryPlan_CoveringIndexPlan)(nil),
		(*PRecordQueryPlan_DamPlan)(nil),
		(*PRecordQueryPlan_DeletePlan)(nil),
		(*PRecordQueryPlan_ExplodePlan)(nil),
		(*PRecordQueryPlan_FetchFromPartialRecordPlan)(nil),
		(*PRecordQueryPlan_FirstOrDefaultPlan)(nil),
		(*PRecordQueryPlan_FlatMapPlan)(nil),
		(*PRecordQueryPlan_InComparandJoinPlan)(nil),
		(*PRecordQueryPlan_RecordQueryIndexPlan)(nil),
		(*PRecordQueryPlan_InParameterJoinPlan)(nil),
		(*PRecordQueryPlan_InsertPlan)(nil),
		(*PRecordQueryPlan_IntersectionOnKeyExpressionPlan)(nil),
		(*PRecordQueryPlan_IntersectionOnValuesPlan)(nil),
		(*PRecordQueryPlan_InUnionOnKeyExpressionPlan)(nil),
		(*PRecordQueryPlan_InUnionOnValuesPlan)(nil),
		(*PRecordQueryPlan_InValuesJoinPlan)(nil),
		(*PRecordQueryPlan_MapPlan)(nil),
		(*PRecordQueryPlan_PredicatesFilterPlan)(nil),
		(*PRecordQueryPlan_RangePlan)(nil),
		(*PRecordQueryPlan_ScanPlan)(nil),
		(*PRecordQueryPlan_ScoreForRankPlan)(nil),
		(*PRecordQueryPlan_SortPlan)(nil),
		(*PRecordQueryPlan_StreamingAggregationPlan)(nil),
		(*PRecordQueryPlan_TypeFilterPlan)(nil),
		(*PRecordQueryPlan_UnionOnKeyExpressionPlan)(nil),
		(*PRecordQueryPlan_UnionOnValuesPlan)(nil),
		(*PRecordQueryPlan_UnorderedDistinctPlan)(nil),
		(*PRecordQueryPlan_UnorderedPrimaryKeyDistinctPlan)(nil),
		(*PRecordQueryPlan_UnorderedUnionPlan)(nil),
		(*PRecordQueryPlan_UpdatePlan)(nil),
	}
	file_record_query_plan_proto_msgTypes[93].OneofWrappers = []any{
		(*PIndexScanParameters_AdditionalIndexScanParameters)(nil),
		(*PIndexScanParameters_IndexScanComparisons)(nil),
		(*PIndexScanParameters_MultidimensionalIndexScanComparisons)(nil),
		(*PIndexScanParameters_TimeWindowScanComparisons)(nil),
	}
	file_record_query_plan_proto_msgTypes[103].OneofWrappers = []any{
		(*PInSource_InComparandSource)(nil),
		(*PInSource_SortedInComparandSource)(nil),
		(*PInSource_InParameterSource)(nil),
		(*PInSource_SortedInParameterSource)(nil),
		(*PInSource_InValuesSource)(nil),
		(*PInSource_SortedInValuesSource)(nil),
	}
	file_record_query_plan_proto_msgTypes[113].OneofWrappers = []any{
		(*PComparisonKeyFunction_OnKeyExpression)(nil),
		(*PComparisonKeyFunction_OnValues)(nil),
	}
	file_record_query_plan_proto_msgTypes[161].OneofWrappers = []any{
		(*PIndexKeyValueToPartialRecord_PCopier_AdditionalCopiers)(nil),
		(*PIndexKeyValueToPartialRecord_PCopier_FieldCopier)(nil),
		(*PIndexKeyValueToPartialRecord_PCopier_MessageCopier)(nil),
	}
	file_record_query_plan_proto_msgTypes[163].OneofWrappers = []any{
		(*PIndexKeyValueToPartialRecord_PCopyIfPredicate_AdditionalCopyIfPredicate)(nil),
		(*PIndexKeyValueToPartialRecord_PCopyIfPredicate_TruePredicate)(nil),
		(*PIndexKeyValueToPartialRecord_PCopyIfPredicate_ConditionalUponPathPredicate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_record_query_plan_proto_rawDesc,
			NumEnums:      16,
			NumMessages:   170,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_record_query_plan_proto_goTypes,
		DependencyIndexes: file_record_query_plan_proto_depIdxs,
		EnumInfos:         file_record_query_plan_proto_enumTypes,
		MessageInfos:      file_record_query_plan_proto_msgTypes,
	}.Build()
	File_record_query_plan_proto = out.File
	file_record_query_plan_proto_rawDesc = nil
	file_record_query_plan_proto_goTypes = nil
	file_record_query_plan_proto_depIdxs = nil
}
