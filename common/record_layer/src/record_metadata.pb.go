//
// record_metadata.proto
//
// This source file is part of the FoundationDB open source project
//
// Copyright 2015-2018 Apple Inc. and the FoundationDB project authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.24.4
// source: record_metadata.proto

package src

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ComparisonType int32

const (
	ComparisonType_EQUALS                 ComparisonType = 1
	ComparisonType_NOT_EQUALS             ComparisonType = 2
	ComparisonType_LESS_THAN              ComparisonType = 3
	ComparisonType_LESS_THAN_OR_EQUALS    ComparisonType = 4
	ComparisonType_GREATER_THAN           ComparisonType = 5
	ComparisonType_GREATER_THAN_OR_EQUALS ComparisonType = 6
	ComparisonType_STARTS_WITH            ComparisonType = 7
	ComparisonType_NOT_NULL               ComparisonType = 8
	ComparisonType_IS_NULL                ComparisonType = 9
)

// Enum value maps for ComparisonType.
var (
	ComparisonType_name = map[int32]string{
		1: "EQUALS",
		2: "NOT_EQUALS",
		3: "LESS_THAN",
		4: "LESS_THAN_OR_EQUALS",
		5: "GREATER_THAN",
		6: "GREATER_THAN_OR_EQUALS",
		7: "STARTS_WITH",
		8: "NOT_NULL",
		9: "IS_NULL",
	}
	ComparisonType_value = map[string]int32{
		"EQUALS":                 1,
		"NOT_EQUALS":             2,
		"LESS_THAN":              3,
		"LESS_THAN_OR_EQUALS":    4,
		"GREATER_THAN":           5,
		"GREATER_THAN_OR_EQUALS": 6,
		"STARTS_WITH":            7,
		"NOT_NULL":               8,
		"IS_NULL":                9,
	}
)

func (x ComparisonType) Enum() *ComparisonType {
	p := new(ComparisonType)
	*p = x
	return p
}

func (x ComparisonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComparisonType) Descriptor() protoreflect.EnumDescriptor {
	return file_record_metadata_proto_enumTypes[0].Descriptor()
}

func (ComparisonType) Type() protoreflect.EnumType {
	return &file_record_metadata_proto_enumTypes[0]
}

func (x ComparisonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ComparisonType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ComparisonType(num)
	return nil
}

// Deprecated: Use ComparisonType.Descriptor instead.
func (ComparisonType) EnumDescriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{0}
}

type Index_Type int32

const (
	Index_INDEX       Index_Type = 1
	Index_UNIQUE      Index_Type = 2
	Index_RANK        Index_Type = 3
	Index_RANK_UNIQUE Index_Type = 4 // (Meaning the score is unique.)
)

// Enum value maps for Index_Type.
var (
	Index_Type_name = map[int32]string{
		1: "INDEX",
		2: "UNIQUE",
		3: "RANK",
		4: "RANK_UNIQUE",
	}
	Index_Type_value = map[string]int32{
		"INDEX":       1,
		"UNIQUE":      2,
		"RANK":        3,
		"RANK_UNIQUE": 4,
	}
)

func (x Index_Type) Enum() *Index_Type {
	p := new(Index_Type)
	*p = x
	return p
}

func (x Index_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Index_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_record_metadata_proto_enumTypes[1].Descriptor()
}

func (Index_Type) Type() protoreflect.EnumType {
	return &file_record_metadata_proto_enumTypes[1]
}

func (x Index_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Index_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Index_Type(num)
	return nil
}

// Deprecated: Use Index_Type.Descriptor instead.
func (Index_Type) EnumDescriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{1, 0}
}

type Field_FanType int32

const (
	Field_SCALAR      Field_FanType = 1
	Field_FAN_OUT     Field_FanType = 2
	Field_CONCATENATE Field_FanType = 3
)

// Enum value maps for Field_FanType.
var (
	Field_FanType_name = map[int32]string{
		1: "SCALAR",
		2: "FAN_OUT",
		3: "CONCATENATE",
	}
	Field_FanType_value = map[string]int32{
		"SCALAR":      1,
		"FAN_OUT":     2,
		"CONCATENATE": 3,
	}
)

func (x Field_FanType) Enum() *Field_FanType {
	p := new(Field_FanType)
	*p = x
	return p
}

func (x Field_FanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Field_FanType) Descriptor() protoreflect.EnumDescriptor {
	return file_record_metadata_proto_enumTypes[2].Descriptor()
}

func (Field_FanType) Type() protoreflect.EnumType {
	return &file_record_metadata_proto_enumTypes[2]
}

func (x Field_FanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Field_FanType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Field_FanType(num)
	return nil
}

// Deprecated: Use Field_FanType.Descriptor instead.
func (Field_FanType) EnumDescriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{7, 0}
}

type Field_NullInterpretation int32

const (
	Field_NOT_UNIQUE Field_NullInterpretation = 1 // Missing values allowed multiple times in unique index
	Field_UNIQUE     Field_NullInterpretation = 2 // Missing values treated like null value in unique index
	Field_NOT_NULL   Field_NullInterpretation = 3 // Missing values are the default for the type, not null
)

// Enum value maps for Field_NullInterpretation.
var (
	Field_NullInterpretation_name = map[int32]string{
		1: "NOT_UNIQUE",
		2: "UNIQUE",
		3: "NOT_NULL",
	}
	Field_NullInterpretation_value = map[string]int32{
		"NOT_UNIQUE": 1,
		"UNIQUE":     2,
		"NOT_NULL":   3,
	}
)

func (x Field_NullInterpretation) Enum() *Field_NullInterpretation {
	p := new(Field_NullInterpretation)
	*p = x
	return p
}

func (x Field_NullInterpretation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Field_NullInterpretation) Descriptor() protoreflect.EnumDescriptor {
	return file_record_metadata_proto_enumTypes[3].Descriptor()
}

func (Field_NullInterpretation) Type() protoreflect.EnumType {
	return &file_record_metadata_proto_enumTypes[3]
}

func (x Field_NullInterpretation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Field_NullInterpretation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Field_NullInterpretation(num)
	return nil
}

// Deprecated: Use Field_NullInterpretation.Descriptor instead.
func (Field_NullInterpretation) EnumDescriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{7, 1}
}

type ConstantPredicate_ConstantValue int32

const (
	ConstantPredicate_TRUE  ConstantPredicate_ConstantValue = 1
	ConstantPredicate_FALSE ConstantPredicate_ConstantValue = 2
	ConstantPredicate_NULL  ConstantPredicate_ConstantValue = 3
)

// Enum value maps for ConstantPredicate_ConstantValue.
var (
	ConstantPredicate_ConstantValue_name = map[int32]string{
		1: "TRUE",
		2: "FALSE",
		3: "NULL",
	}
	ConstantPredicate_ConstantValue_value = map[string]int32{
		"TRUE":  1,
		"FALSE": 2,
		"NULL":  3,
	}
)

func (x ConstantPredicate_ConstantValue) Enum() *ConstantPredicate_ConstantValue {
	p := new(ConstantPredicate_ConstantValue)
	*p = x
	return p
}

func (x ConstantPredicate_ConstantValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConstantPredicate_ConstantValue) Descriptor() protoreflect.EnumDescriptor {
	return file_record_metadata_proto_enumTypes[4].Descriptor()
}

func (ConstantPredicate_ConstantValue) Type() protoreflect.EnumType {
	return &file_record_metadata_proto_enumTypes[4]
}

func (x ConstantPredicate_ConstantValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ConstantPredicate_ConstantValue) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ConstantPredicate_ConstantValue(num)
	return nil
}

// Deprecated: Use ConstantPredicate_ConstantValue.Descriptor instead.
func (ConstantPredicate_ConstantValue) EnumDescriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{26, 0}
}

type DataStoreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatVersion           *int32                          `protobuf:"varint,1,opt,name=formatVersion" json:"formatVersion,omitempty"`
	MetaDataversion         *int32                          `protobuf:"varint,2,opt,name=metaDataversion" json:"metaDataversion,omitempty"`
	UserVersion             *int32                          `protobuf:"varint,3,opt,name=userVersion" json:"userVersion,omitempty"`
	RecordCountKey          *KeyExpression                  `protobuf:"bytes,4,opt,name=record_count_key,json=recordCountKey" json:"record_count_key,omitempty"`
	LastUpdateTime          *uint64                         `protobuf:"varint,5,opt,name=lastUpdateTime" json:"lastUpdateTime,omitempty"`
	OmitUnsplitRecordSuffix *bool                           `protobuf:"varint,6,opt,name=omit_unsplit_record_suffix,json=omitUnsplitRecordSuffix" json:"omit_unsplit_record_suffix,omitempty"`
	Cacheable               *bool                           `protobuf:"varint,7,opt,name=cacheable" json:"cacheable,omitempty"`
	UserField               []*DataStoreInfo_UserFieldEntry `protobuf:"bytes,8,rep,name=user_field,json=userField" json:"user_field,omitempty"`
}

func (x *DataStoreInfo) Reset() {
	*x = DataStoreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataStoreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataStoreInfo) ProtoMessage() {}

func (x *DataStoreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataStoreInfo.ProtoReflect.Descriptor instead.
func (*DataStoreInfo) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{0}
}

func (x *DataStoreInfo) GetFormatVersion() int32 {
	if x != nil && x.FormatVersion != nil {
		return *x.FormatVersion
	}
	return 0
}

func (x *DataStoreInfo) GetMetaDataversion() int32 {
	if x != nil && x.MetaDataversion != nil {
		return *x.MetaDataversion
	}
	return 0
}

func (x *DataStoreInfo) GetUserVersion() int32 {
	if x != nil && x.UserVersion != nil {
		return *x.UserVersion
	}
	return 0
}

func (x *DataStoreInfo) GetRecordCountKey() *KeyExpression {
	if x != nil {
		return x.RecordCountKey
	}
	return nil
}

func (x *DataStoreInfo) GetLastUpdateTime() uint64 {
	if x != nil && x.LastUpdateTime != nil {
		return *x.LastUpdateTime
	}
	return 0
}

func (x *DataStoreInfo) GetOmitUnsplitRecordSuffix() bool {
	if x != nil && x.OmitUnsplitRecordSuffix != nil {
		return *x.OmitUnsplitRecordSuffix
	}
	return false
}

func (x *DataStoreInfo) GetCacheable() bool {
	if x != nil && x.Cacheable != nil {
		return *x.Cacheable
	}
	return false
}

func (x *DataStoreInfo) GetUserField() []*DataStoreInfo_UserFieldEntry {
	if x != nil {
		return x.UserField
	}
	return nil
}

type Index struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	RecordType []string `protobuf:"bytes,1,rep,name=record_type,json=recordType" json:"record_type,omitempty"`
	// Deprecated: Marked as deprecated in record_metadata.proto.
	IndexType           *Index_Type    `protobuf:"varint,2,opt,name=index_type,json=indexType,enum=com.apple.foundationdb.record.Index_Type" json:"index_type,omitempty"` // Use type.
	Name                *string        `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	RootExpression      *KeyExpression `protobuf:"bytes,4,opt,name=root_expression,json=rootExpression" json:"root_expression,omitempty"`
	SubspaceKey         []byte         `protobuf:"bytes,5,opt,name=subspace_key,json=subspaceKey" json:"subspace_key,omitempty"`
	LastModifiedVersion *int32         `protobuf:"varint,6,opt,name=last_modified_version,json=lastModifiedVersion" json:"last_modified_version,omitempty"`
	// value_expression should now be expressed as a KeyWithValue() root expression
	//
	// Deprecated: Marked as deprecated in record_metadata.proto.
	ValueExpression *KeyExpression  `protobuf:"bytes,7,opt,name=value_expression,json=valueExpression" json:"value_expression,omitempty"`
	Type            *string         `protobuf:"bytes,8,opt,name=type" json:"type,omitempty"`
	Options         []*Index_Option `protobuf:"bytes,9,rep,name=options" json:"options,omitempty"`
	AddedVersion    *int32          `protobuf:"varint,10,opt,name=added_version,json=addedVersion" json:"added_version,omitempty"`
	Predicate       *Predicate      `protobuf:"bytes,11,opt,name=predicate" json:"predicate,omitempty"`
}

func (x *Index) Reset() {
	*x = Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Index) ProtoMessage() {}

func (x *Index) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Index.ProtoReflect.Descriptor instead.
func (*Index) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{1}
}

func (x *Index) GetRecordType() []string {
	if x != nil {
		return x.RecordType
	}
	return nil
}

// Deprecated: Marked as deprecated in record_metadata.proto.
func (x *Index) GetIndexType() Index_Type {
	if x != nil && x.IndexType != nil {
		return *x.IndexType
	}
	return Index_INDEX
}

func (x *Index) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Index) GetRootExpression() *KeyExpression {
	if x != nil {
		return x.RootExpression
	}
	return nil
}

func (x *Index) GetSubspaceKey() []byte {
	if x != nil {
		return x.SubspaceKey
	}
	return nil
}

func (x *Index) GetLastModifiedVersion() int32 {
	if x != nil && x.LastModifiedVersion != nil {
		return *x.LastModifiedVersion
	}
	return 0
}

// Deprecated: Marked as deprecated in record_metadata.proto.
func (x *Index) GetValueExpression() *KeyExpression {
	if x != nil {
		return x.ValueExpression
	}
	return nil
}

func (x *Index) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Index) GetOptions() []*Index_Option {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Index) GetAddedVersion() int32 {
	if x != nil && x.AddedVersion != nil {
		return *x.AddedVersion
	}
	return 0
}

func (x *Index) GetPredicate() *Predicate {
	if x != nil {
		return x.Predicate
	}
	return nil
}

type RecordType struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Name         *string        `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	PrimaryKey   *KeyExpression `protobuf:"bytes,2,opt,name=primary_key,json=primaryKey" json:"primary_key,omitempty"`
	SinceVersion *int32         `protobuf:"varint,3,opt,name=since_version,json=sinceVersion" json:"since_version,omitempty"`
	ExplicitKey  *Value         `protobuf:"bytes,4,opt,name=explicit_key,json=explicitKey" json:"explicit_key,omitempty"`
}

func (x *RecordType) Reset() {
	*x = RecordType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordType) ProtoMessage() {}

func (x *RecordType) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordType.ProtoReflect.Descriptor instead.
func (*RecordType) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{2}
}

func (x *RecordType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RecordType) GetPrimaryKey() *KeyExpression {
	if x != nil {
		return x.PrimaryKey
	}
	return nil
}

func (x *RecordType) GetSinceVersion() int32 {
	if x != nil && x.SinceVersion != nil {
		return *x.SinceVersion
	}
	return 0
}

func (x *RecordType) GetExplicitKey() *Value {
	if x != nil {
		return x.ExplicitKey
	}
	return nil
}

type FormerIndex struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	FormerName     *string `protobuf:"bytes,3,opt,name=former_name,json=formerName" json:"former_name,omitempty"`
	SubspaceKey    []byte  `protobuf:"bytes,5,opt,name=subspace_key,json=subspaceKey" json:"subspace_key,omitempty"`
	RemovedVersion *int32  `protobuf:"varint,6,opt,name=removed_version,json=removedVersion" json:"removed_version,omitempty"`
	AddedVersion   *int32  `protobuf:"varint,10,opt,name=added_version,json=addedVersion" json:"added_version,omitempty"`
}

func (x *FormerIndex) Reset() {
	*x = FormerIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormerIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormerIndex) ProtoMessage() {}

func (x *FormerIndex) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormerIndex.ProtoReflect.Descriptor instead.
func (*FormerIndex) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{3}
}

func (x *FormerIndex) GetFormerName() string {
	if x != nil && x.FormerName != nil {
		return *x.FormerName
	}
	return ""
}

func (x *FormerIndex) GetSubspaceKey() []byte {
	if x != nil {
		return x.SubspaceKey
	}
	return nil
}

func (x *FormerIndex) GetRemovedVersion() int32 {
	if x != nil && x.RemovedVersion != nil {
		return *x.RemovedVersion
	}
	return 0
}

func (x *FormerIndex) GetAddedVersion() int32 {
	if x != nil && x.AddedVersion != nil {
		return *x.AddedVersion
	}
	return 0
}

type MetaData struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Records          *descriptorpb.FileDescriptorProto `protobuf:"bytes,1,opt,name=records" json:"records,omitempty"`
	Indexes          []*Index                          `protobuf:"bytes,2,rep,name=indexes" json:"indexes,omitempty"`
	RecordTypes      []*RecordType                     `protobuf:"bytes,3,rep,name=record_types,json=recordTypes" json:"record_types,omitempty"`
	SplitLongRecords *bool                             `protobuf:"varint,4,opt,name=split_long_records,json=splitLongRecords" json:"split_long_records,omitempty"`
	Version          *int32                            `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
	FormerIndexes    []*FormerIndex                    `protobuf:"bytes,6,rep,name=former_indexes,json=formerIndexes" json:"former_indexes,omitempty"`
	// Deprecated: Marked as deprecated in record_metadata.proto.
	RecordCountKey         *KeyExpression                      `protobuf:"bytes,7,opt,name=record_count_key,json=recordCountKey" json:"record_count_key,omitempty"`
	StoreRecordVersions    *bool                               `protobuf:"varint,8,opt,name=store_record_versions,json=storeRecordVersions" json:"store_record_versions,omitempty"`
	Dependencies           []*descriptorpb.FileDescriptorProto `protobuf:"bytes,9,rep,name=dependencies" json:"dependencies,omitempty"`
	SubspaceKeyCounter     *int64                              `protobuf:"varint,10,opt,name=subspace_key_counter,json=subspaceKeyCounter" json:"subspace_key_counter,omitempty"`
	UsesSubspaceKeyCounter *bool                               `protobuf:"varint,11,opt,name=uses_subspace_key_counter,json=usesSubspaceKeyCounter" json:"uses_subspace_key_counter,omitempty"`
	JoinedRecordTypes      []*JoinedRecordType                 `protobuf:"bytes,12,rep,name=joined_record_types,json=joinedRecordTypes" json:"joined_record_types,omitempty"`
	UnnestedRecordTypes    []*UnnestedRecordType               `protobuf:"bytes,13,rep,name=unnested_record_types,json=unnestedRecordTypes" json:"unnested_record_types,omitempty"`
}

func (x *MetaData) Reset() {
	*x = MetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaData) ProtoMessage() {}

func (x *MetaData) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaData.ProtoReflect.Descriptor instead.
func (*MetaData) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{4}
}

func (x *MetaData) GetRecords() *descriptorpb.FileDescriptorProto {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *MetaData) GetIndexes() []*Index {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *MetaData) GetRecordTypes() []*RecordType {
	if x != nil {
		return x.RecordTypes
	}
	return nil
}

func (x *MetaData) GetSplitLongRecords() bool {
	if x != nil && x.SplitLongRecords != nil {
		return *x.SplitLongRecords
	}
	return false
}

func (x *MetaData) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *MetaData) GetFormerIndexes() []*FormerIndex {
	if x != nil {
		return x.FormerIndexes
	}
	return nil
}

// Deprecated: Marked as deprecated in record_metadata.proto.
func (x *MetaData) GetRecordCountKey() *KeyExpression {
	if x != nil {
		return x.RecordCountKey
	}
	return nil
}

func (x *MetaData) GetStoreRecordVersions() bool {
	if x != nil && x.StoreRecordVersions != nil {
		return *x.StoreRecordVersions
	}
	return false
}

func (x *MetaData) GetDependencies() []*descriptorpb.FileDescriptorProto {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *MetaData) GetSubspaceKeyCounter() int64 {
	if x != nil && x.SubspaceKeyCounter != nil {
		return *x.SubspaceKeyCounter
	}
	return 0
}

func (x *MetaData) GetUsesSubspaceKeyCounter() bool {
	if x != nil && x.UsesSubspaceKeyCounter != nil {
		return *x.UsesSubspaceKeyCounter
	}
	return false
}

func (x *MetaData) GetJoinedRecordTypes() []*JoinedRecordType {
	if x != nil {
		return x.JoinedRecordTypes
	}
	return nil
}

func (x *MetaData) GetUnnestedRecordTypes() []*UnnestedRecordType {
	if x != nil {
		return x.UnnestedRecordTypes
	}
	return nil
}

type Then struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Child []*KeyExpression `protobuf:"bytes,1,rep,name=child" json:"child,omitempty"`
}

func (x *Then) Reset() {
	*x = Then{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Then) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Then) ProtoMessage() {}

func (x *Then) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Then.ProtoReflect.Descriptor instead.
func (*Then) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{5}
}

func (x *Then) GetChild() []*KeyExpression {
	if x != nil {
		return x.Child
	}
	return nil
}

type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Child []*KeyExpression `protobuf:"bytes,1,rep,name=child" json:"child,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{6}
}

func (x *List) GetChild() []*KeyExpression {
	if x != nil {
		return x.Child
	}
	return nil
}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName          *string                   `protobuf:"bytes,1,req,name=field_name,json=fieldName" json:"field_name,omitempty"`
	FanType            *Field_FanType            `protobuf:"varint,2,req,name=fan_type,json=fanType,enum=com.apple.foundationdb.record.Field_FanType" json:"fan_type,omitempty"`
	NullInterpretation *Field_NullInterpretation `protobuf:"varint,3,opt,name=nullInterpretation,enum=com.apple.foundationdb.record.Field_NullInterpretation,def=1" json:"nullInterpretation,omitempty"`
}

// Default values for Field fields.
const (
	Default_Field_NullInterpretation = Field_NOT_UNIQUE
)

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{7}
}

func (x *Field) GetFieldName() string {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return ""
}

func (x *Field) GetFanType() Field_FanType {
	if x != nil && x.FanType != nil {
		return *x.FanType
	}
	return Field_SCALAR
}

func (x *Field) GetNullInterpretation() Field_NullInterpretation {
	if x != nil && x.NullInterpretation != nil {
		return *x.NullInterpretation
	}
	return Default_Field_NullInterpretation
}

type Nesting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent *Field         `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	Child  *KeyExpression `protobuf:"bytes,2,opt,name=child" json:"child,omitempty"`
}

func (x *Nesting) Reset() {
	*x = Nesting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nesting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nesting) ProtoMessage() {}

func (x *Nesting) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nesting.ProtoReflect.Descriptor instead.
func (*Nesting) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{8}
}

func (x *Nesting) GetParent() *Field {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *Nesting) GetChild() *KeyExpression {
	if x != nil {
		return x.Child
	}
	return nil
}

type Grouping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WholeKey     *KeyExpression `protobuf:"bytes,1,req,name=whole_key,json=wholeKey" json:"whole_key,omitempty"`
	GroupedCount *int32         `protobuf:"varint,3,opt,name=grouped_count,json=groupedCount,def=1" json:"grouped_count,omitempty"`
}

// Default values for Grouping fields.
const (
	Default_Grouping_GroupedCount = int32(1)
)

func (x *Grouping) Reset() {
	*x = Grouping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grouping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grouping) ProtoMessage() {}

func (x *Grouping) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grouping.ProtoReflect.Descriptor instead.
func (*Grouping) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{9}
}

func (x *Grouping) GetWholeKey() *KeyExpression {
	if x != nil {
		return x.WholeKey
	}
	return nil
}

func (x *Grouping) GetGroupedCount() int32 {
	if x != nil && x.GroupedCount != nil {
		return *x.GroupedCount
	}
	return Default_Grouping_GroupedCount
}

type Dimensions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WholeKey       *KeyExpression `protobuf:"bytes,1,req,name=whole_key,json=wholeKey" json:"whole_key,omitempty"`
	PrefixSize     *int32         `protobuf:"varint,2,opt,name=prefix_size,json=prefixSize" json:"prefix_size,omitempty"`
	DimensionsSize *int32         `protobuf:"varint,3,opt,name=dimensions_size,json=dimensionsSize" json:"dimensions_size,omitempty"`
}

func (x *Dimensions) Reset() {
	*x = Dimensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dimensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dimensions) ProtoMessage() {}

func (x *Dimensions) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dimensions.ProtoReflect.Descriptor instead.
func (*Dimensions) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{10}
}

func (x *Dimensions) GetWholeKey() *KeyExpression {
	if x != nil {
		return x.WholeKey
	}
	return nil
}

func (x *Dimensions) GetPrefixSize() int32 {
	if x != nil && x.PrefixSize != nil {
		return *x.PrefixSize
	}
	return 0
}

func (x *Dimensions) GetDimensionsSize() int32 {
	if x != nil && x.DimensionsSize != nil {
		return *x.DimensionsSize
	}
	return 0
}

type KeyWithValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerKey   *KeyExpression `protobuf:"bytes,1,req,name=inner_key,json=innerKey" json:"inner_key,omitempty"`
	SplitPoint *int32         `protobuf:"varint,2,opt,name=split_point,json=splitPoint,def=1" json:"split_point,omitempty"`
}

// Default values for KeyWithValue fields.
const (
	Default_KeyWithValue_SplitPoint = int32(1)
)

func (x *KeyWithValue) Reset() {
	*x = KeyWithValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyWithValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyWithValue) ProtoMessage() {}

func (x *KeyWithValue) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyWithValue.ProtoReflect.Descriptor instead.
func (*KeyWithValue) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{11}
}

func (x *KeyWithValue) GetInnerKey() *KeyExpression {
	if x != nil {
		return x.InnerKey
	}
	return nil
}

func (x *KeyWithValue) GetSplitPoint() int32 {
	if x != nil && x.SplitPoint != nil {
		return *x.SplitPoint
	}
	return Default_KeyWithValue_SplitPoint
}

type Split struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Joined    *KeyExpression `protobuf:"bytes,1,req,name=joined" json:"joined,omitempty"`
	SplitSize *int32         `protobuf:"varint,2,opt,name=split_size,json=splitSize" json:"split_size,omitempty"`
}

func (x *Split) Reset() {
	*x = Split{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Split) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Split) ProtoMessage() {}

func (x *Split) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Split.ProtoReflect.Descriptor instead.
func (*Split) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{12}
}

func (x *Split) GetJoined() *KeyExpression {
	if x != nil {
		return x.Joined
	}
	return nil
}

func (x *Split) GetSplitSize() int32 {
	if x != nil && x.SplitSize != nil {
		return *x.SplitSize
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{13}
}

type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{14}
}

type RecordTypeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecordTypeKey) Reset() {
	*x = RecordTypeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordTypeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordTypeKey) ProtoMessage() {}

func (x *RecordTypeKey) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordTypeKey.ProtoReflect.Descriptor instead.
func (*RecordTypeKey) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{15}
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: This should be a oneof {}
	DoubleValue *float64 `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	FloatValue  *float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	LongValue   *int64   `protobuf:"varint,3,opt,name=long_value,json=longValue" json:"long_value,omitempty"`
	BoolValue   *bool    `protobuf:"varint,4,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	StringValue *string  `protobuf:"bytes,5,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	BytesValue  []byte   `protobuf:"bytes,6,opt,name=bytes_value,json=bytesValue" json:"bytes_value,omitempty"`
	IntValue    *int32   `protobuf:"varint,7,opt,name=int_value,json=intValue" json:"int_value,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{16}
}

func (x *Value) GetDoubleValue() float64 {
	if x != nil && x.DoubleValue != nil {
		return *x.DoubleValue
	}
	return 0
}

func (x *Value) GetFloatValue() float32 {
	if x != nil && x.FloatValue != nil {
		return *x.FloatValue
	}
	return 0
}

func (x *Value) GetLongValue() int64 {
	if x != nil && x.LongValue != nil {
		return *x.LongValue
	}
	return 0
}

func (x *Value) GetBoolValue() bool {
	if x != nil && x.BoolValue != nil {
		return *x.BoolValue
	}
	return false
}

func (x *Value) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

func (x *Value) GetBytesValue() []byte {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *Value) GetIntValue() int32 {
	if x != nil && x.IntValue != nil {
		return *x.IntValue
	}
	return 0
}

type Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *string        `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Arguments *KeyExpression `protobuf:"bytes,2,req,name=arguments" json:"arguments,omitempty"`
}

func (x *Function) Reset() {
	*x = Function{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Function) ProtoMessage() {}

func (x *Function) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Function.ProtoReflect.Descriptor instead.
func (*Function) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{17}
}

func (x *Function) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Function) GetArguments() *KeyExpression {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type KeyExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exactly one of the following:
	Then          *Then          `protobuf:"bytes,1,opt,name=then" json:"then,omitempty"`
	Nesting       *Nesting       `protobuf:"bytes,2,opt,name=nesting" json:"nesting,omitempty"`
	Field         *Field         `protobuf:"bytes,3,opt,name=field" json:"field,omitempty"`
	Grouping      *Grouping      `protobuf:"bytes,4,opt,name=grouping" json:"grouping,omitempty"`
	Empty         *Empty         `protobuf:"bytes,5,opt,name=empty" json:"empty,omitempty"`
	Split         *Split         `protobuf:"bytes,6,opt,name=split" json:"split,omitempty"`
	Version       *Version       `protobuf:"bytes,7,opt,name=version" json:"version,omitempty"`
	Value         *Value         `protobuf:"bytes,8,opt,name=value" json:"value,omitempty"`
	Function      *Function      `protobuf:"bytes,9,opt,name=function" json:"function,omitempty"`
	KeyWithValue  *KeyWithValue  `protobuf:"bytes,10,opt,name=key_with_value,json=keyWithValue" json:"key_with_value,omitempty"`
	RecordTypeKey *RecordTypeKey `protobuf:"bytes,11,opt,name=record_type_key,json=recordTypeKey" json:"record_type_key,omitempty"`
	List          *List          `protobuf:"bytes,12,opt,name=list" json:"list,omitempty"`
	Dimensions    *Dimensions    `protobuf:"bytes,13,opt,name=dimensions" json:"dimensions,omitempty"`
}

func (x *KeyExpression) Reset() {
	*x = KeyExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyExpression) ProtoMessage() {}

func (x *KeyExpression) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyExpression.ProtoReflect.Descriptor instead.
func (*KeyExpression) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{18}
}

func (x *KeyExpression) GetThen() *Then {
	if x != nil {
		return x.Then
	}
	return nil
}

func (x *KeyExpression) GetNesting() *Nesting {
	if x != nil {
		return x.Nesting
	}
	return nil
}

func (x *KeyExpression) GetField() *Field {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *KeyExpression) GetGrouping() *Grouping {
	if x != nil {
		return x.Grouping
	}
	return nil
}

func (x *KeyExpression) GetEmpty() *Empty {
	if x != nil {
		return x.Empty
	}
	return nil
}

func (x *KeyExpression) GetSplit() *Split {
	if x != nil {
		return x.Split
	}
	return nil
}

func (x *KeyExpression) GetVersion() *Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *KeyExpression) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *KeyExpression) GetFunction() *Function {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *KeyExpression) GetKeyWithValue() *KeyWithValue {
	if x != nil {
		return x.KeyWithValue
	}
	return nil
}

func (x *KeyExpression) GetRecordTypeKey() *RecordTypeKey {
	if x != nil {
		return x.RecordTypeKey
	}
	return nil
}

func (x *KeyExpression) GetList() *List {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *KeyExpression) GetDimensions() *Dimensions {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

type JoinedRecordType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             *string                             `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	RecordTypeKey    *Value                              `protobuf:"bytes,4,opt,name=record_type_key,json=recordTypeKey" json:"record_type_key,omitempty"`
	JoinConstituents []*JoinedRecordType_JoinConstituent `protobuf:"bytes,10,rep,name=join_constituents,json=joinConstituents" json:"join_constituents,omitempty"`
	Joins            []*JoinedRecordType_Join            `protobuf:"bytes,11,rep,name=joins" json:"joins,omitempty"`
}

func (x *JoinedRecordType) Reset() {
	*x = JoinedRecordType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinedRecordType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinedRecordType) ProtoMessage() {}

func (x *JoinedRecordType) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinedRecordType.ProtoReflect.Descriptor instead.
func (*JoinedRecordType) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{19}
}

func (x *JoinedRecordType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *JoinedRecordType) GetRecordTypeKey() *Value {
	if x != nil {
		return x.RecordTypeKey
	}
	return nil
}

func (x *JoinedRecordType) GetJoinConstituents() []*JoinedRecordType_JoinConstituent {
	if x != nil {
		return x.JoinConstituents
	}
	return nil
}

func (x *JoinedRecordType) GetJoins() []*JoinedRecordType_Join {
	if x != nil {
		return x.Joins
	}
	return nil
}

type UnnestedRecordType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               *string                                 `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	RecordTypeKey      *Value                                  `protobuf:"bytes,2,opt,name=record_type_key,json=recordTypeKey" json:"record_type_key,omitempty"`
	NestedConstituents []*UnnestedRecordType_NestedConstituent `protobuf:"bytes,3,rep,name=nested_constituents,json=nestedConstituents" json:"nested_constituents,omitempty"`
}

func (x *UnnestedRecordType) Reset() {
	*x = UnnestedRecordType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnnestedRecordType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnnestedRecordType) ProtoMessage() {}

func (x *UnnestedRecordType) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnnestedRecordType.ProtoReflect.Descriptor instead.
func (*UnnestedRecordType) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{20}
}

func (x *UnnestedRecordType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UnnestedRecordType) GetRecordTypeKey() *Value {
	if x != nil {
		return x.RecordTypeKey
	}
	return nil
}

func (x *UnnestedRecordType) GetNestedConstituents() []*UnnestedRecordType_NestedConstituent {
	if x != nil {
		return x.NestedConstituents
	}
	return nil
}

type SimpleComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *ComparisonType `protobuf:"varint,1,opt,name=type,enum=com.apple.foundationdb.record.ComparisonType" json:"type,omitempty"`
	Operand *Value          `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
}

func (x *SimpleComparison) Reset() {
	*x = SimpleComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleComparison) ProtoMessage() {}

func (x *SimpleComparison) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleComparison.ProtoReflect.Descriptor instead.
func (*SimpleComparison) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{21}
}

func (x *SimpleComparison) GetType() ComparisonType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ComparisonType_EQUALS
}

func (x *SimpleComparison) GetOperand() *Value {
	if x != nil {
		return x.Operand
	}
	return nil
}

// in Comparisons.Comparison we have a special NullComparison that takes care of comparing
// an operand to null.
type NullComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNull *bool `protobuf:"varint,1,opt,name=isNull" json:"isNull,omitempty"`
}

func (x *NullComparison) Reset() {
	*x = NullComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullComparison) ProtoMessage() {}

func (x *NullComparison) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullComparison.ProtoReflect.Descriptor instead.
func (*NullComparison) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{22}
}

func (x *NullComparison) GetIsNull() bool {
	if x != nil && x.IsNull != nil {
		return *x.IsNull
	}
	return false
}

type Comparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// exactly one of the following
	SimpleComparison *SimpleComparison `protobuf:"bytes,1,opt,name=simple_comparison,json=simpleComparison" json:"simple_comparison,omitempty"`
	NullComparison   *NullComparison   `protobuf:"bytes,2,opt,name=null_comparison,json=nullComparison" json:"null_comparison,omitempty"`
}

func (x *Comparison) Reset() {
	*x = Comparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comparison) ProtoMessage() {}

func (x *Comparison) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comparison.ProtoReflect.Descriptor instead.
func (*Comparison) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{23}
}

func (x *Comparison) GetSimpleComparison() *SimpleComparison {
	if x != nil {
		return x.SimpleComparison
	}
	return nil
}

func (x *Comparison) GetNullComparison() *NullComparison {
	if x != nil {
		return x.NullComparison
	}
	return nil
}

type AndPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children []*Predicate `protobuf:"bytes,1,rep,name=children" json:"children,omitempty"`
}

func (x *AndPredicate) Reset() {
	*x = AndPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndPredicate) ProtoMessage() {}

func (x *AndPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndPredicate.ProtoReflect.Descriptor instead.
func (*AndPredicate) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{24}
}

func (x *AndPredicate) GetChildren() []*Predicate {
	if x != nil {
		return x.Children
	}
	return nil
}

type OrPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children []*Predicate `protobuf:"bytes,2,rep,name=children" json:"children,omitempty"`
}

func (x *OrPredicate) Reset() {
	*x = OrPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrPredicate) ProtoMessage() {}

func (x *OrPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrPredicate.ProtoReflect.Descriptor instead.
func (*OrPredicate) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{25}
}

func (x *OrPredicate) GetChildren() []*Predicate {
	if x != nil {
		return x.Children
	}
	return nil
}

type ConstantPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *ConstantPredicate_ConstantValue `protobuf:"varint,1,opt,name=value,enum=com.apple.foundationdb.record.ConstantPredicate_ConstantValue" json:"value,omitempty"`
}

func (x *ConstantPredicate) Reset() {
	*x = ConstantPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstantPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstantPredicate) ProtoMessage() {}

func (x *ConstantPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstantPredicate.ProtoReflect.Descriptor instead.
func (*ConstantPredicate) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{26}
}

func (x *ConstantPredicate) GetValue() ConstantPredicate_ConstantValue {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ConstantPredicate_TRUE
}

type NotPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Child *Predicate `protobuf:"bytes,1,opt,name=child" json:"child,omitempty"`
}

func (x *NotPredicate) Reset() {
	*x = NotPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotPredicate) ProtoMessage() {}

func (x *NotPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotPredicate.ProtoReflect.Descriptor instead.
func (*NotPredicate) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{27}
}

func (x *NotPredicate) GetChild() *Predicate {
	if x != nil {
		return x.Child
	}
	return nil
}

type ValuePredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value      []string    `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Comparison *Comparison `protobuf:"bytes,2,opt,name=comparison" json:"comparison,omitempty"`
}

func (x *ValuePredicate) Reset() {
	*x = ValuePredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValuePredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValuePredicate) ProtoMessage() {}

func (x *ValuePredicate) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValuePredicate.ProtoReflect.Descriptor instead.
func (*ValuePredicate) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{28}
}

func (x *ValuePredicate) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ValuePredicate) GetComparison() *Comparison {
	if x != nil {
		return x.Comparison
	}
	return nil
}

type Predicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// exactly one of the following
	AndPredicate      *AndPredicate      `protobuf:"bytes,1,opt,name=and_predicate,json=andPredicate" json:"and_predicate,omitempty"`
	OrPredicate       *OrPredicate       `protobuf:"bytes,2,opt,name=or_predicate,json=orPredicate" json:"or_predicate,omitempty"`
	ConstantPredicate *ConstantPredicate `protobuf:"bytes,3,opt,name=constant_predicate,json=constantPredicate" json:"constant_predicate,omitempty"`
	NotPredicate      *NotPredicate      `protobuf:"bytes,4,opt,name=not_predicate,json=notPredicate" json:"not_predicate,omitempty"`
	ValuePredicate    *ValuePredicate    `protobuf:"bytes,5,opt,name=value_predicate,json=valuePredicate" json:"value_predicate,omitempty"`
}

func (x *Predicate) Reset() {
	*x = Predicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Predicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Predicate) ProtoMessage() {}

func (x *Predicate) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Predicate.ProtoReflect.Descriptor instead.
func (*Predicate) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{29}
}

func (x *Predicate) GetAndPredicate() *AndPredicate {
	if x != nil {
		return x.AndPredicate
	}
	return nil
}

func (x *Predicate) GetOrPredicate() *OrPredicate {
	if x != nil {
		return x.OrPredicate
	}
	return nil
}

func (x *Predicate) GetConstantPredicate() *ConstantPredicate {
	if x != nil {
		return x.ConstantPredicate
	}
	return nil
}

func (x *Predicate) GetNotPredicate() *NotPredicate {
	if x != nil {
		return x.NotPredicate
	}
	return nil
}

func (x *Predicate) GetValuePredicate() *ValuePredicate {
	if x != nil {
		return x.ValuePredicate
	}
	return nil
}

// Compatible with map<string, bytes> on the wire
type DataStoreInfo_UserFieldEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value []byte  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *DataStoreInfo_UserFieldEntry) Reset() {
	*x = DataStoreInfo_UserFieldEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataStoreInfo_UserFieldEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataStoreInfo_UserFieldEntry) ProtoMessage() {}

func (x *DataStoreInfo_UserFieldEntry) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataStoreInfo_UserFieldEntry.ProtoReflect.Descriptor instead.
func (*DataStoreInfo_UserFieldEntry) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DataStoreInfo_UserFieldEntry) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *DataStoreInfo_UserFieldEntry) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type Index_Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *Index_Option) Reset() {
	*x = Index_Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Index_Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Index_Option) ProtoMessage() {}

func (x *Index_Option) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Index_Option.ProtoReflect.Descriptor instead.
func (*Index_Option) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Index_Option) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Index_Option) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type JoinedRecordType_JoinConstituent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	RecordType  *string `protobuf:"bytes,2,opt,name=record_type,json=recordType" json:"record_type,omitempty"`
	OuterJoined *bool   `protobuf:"varint,3,opt,name=outer_joined,json=outerJoined" json:"outer_joined,omitempty"`
}

func (x *JoinedRecordType_JoinConstituent) Reset() {
	*x = JoinedRecordType_JoinConstituent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinedRecordType_JoinConstituent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinedRecordType_JoinConstituent) ProtoMessage() {}

func (x *JoinedRecordType_JoinConstituent) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinedRecordType_JoinConstituent.ProtoReflect.Descriptor instead.
func (*JoinedRecordType_JoinConstituent) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{19, 0}
}

func (x *JoinedRecordType_JoinConstituent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *JoinedRecordType_JoinConstituent) GetRecordType() string {
	if x != nil && x.RecordType != nil {
		return *x.RecordType
	}
	return ""
}

func (x *JoinedRecordType_JoinConstituent) GetOuterJoined() bool {
	if x != nil && x.OuterJoined != nil {
		return *x.OuterJoined
	}
	return false
}

type JoinedRecordType_Join struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left            *string        `protobuf:"bytes,1,opt,name=left" json:"left,omitempty"`
	LeftExpression  *KeyExpression `protobuf:"bytes,2,opt,name=left_expression,json=leftExpression" json:"left_expression,omitempty"`
	Right           *string        `protobuf:"bytes,3,opt,name=right" json:"right,omitempty"`
	RightExpression *KeyExpression `protobuf:"bytes,4,opt,name=right_expression,json=rightExpression" json:"right_expression,omitempty"`
}

func (x *JoinedRecordType_Join) Reset() {
	*x = JoinedRecordType_Join{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinedRecordType_Join) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinedRecordType_Join) ProtoMessage() {}

func (x *JoinedRecordType_Join) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinedRecordType_Join.ProtoReflect.Descriptor instead.
func (*JoinedRecordType_Join) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{19, 1}
}

func (x *JoinedRecordType_Join) GetLeft() string {
	if x != nil && x.Left != nil {
		return *x.Left
	}
	return ""
}

func (x *JoinedRecordType_Join) GetLeftExpression() *KeyExpression {
	if x != nil {
		return x.LeftExpression
	}
	return nil
}

func (x *JoinedRecordType_Join) GetRight() string {
	if x != nil && x.Right != nil {
		return *x.Right
	}
	return ""
}

func (x *JoinedRecordType_Join) GetRightExpression() *KeyExpression {
	if x != nil {
		return x.RightExpression
	}
	return nil
}

type UnnestedRecordType_NestedConstituent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              *string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Parent            *string        `protobuf:"bytes,2,opt,name=parent" json:"parent,omitempty"`
	TypeName          *string        `protobuf:"bytes,3,opt,name=type_name,json=typeName" json:"type_name,omitempty"`
	NestingExpression *KeyExpression `protobuf:"bytes,4,opt,name=nesting_expression,json=nestingExpression" json:"nesting_expression,omitempty"`
}

func (x *UnnestedRecordType_NestedConstituent) Reset() {
	*x = UnnestedRecordType_NestedConstituent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_metadata_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnnestedRecordType_NestedConstituent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnnestedRecordType_NestedConstituent) ProtoMessage() {}

func (x *UnnestedRecordType_NestedConstituent) ProtoReflect() protoreflect.Message {
	mi := &file_record_metadata_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnnestedRecordType_NestedConstituent.ProtoReflect.Descriptor instead.
func (*UnnestedRecordType_NestedConstituent) Descriptor() ([]byte, []int) {
	return file_record_metadata_proto_rawDescGZIP(), []int{20, 0}
}

func (x *UnnestedRecordType_NestedConstituent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UnnestedRecordType_NestedConstituent) GetParent() string {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return ""
}

func (x *UnnestedRecordType_NestedConstituent) GetTypeName() string {
	if x != nil && x.TypeName != nil {
		return *x.TypeName
	}
	return ""
}

func (x *UnnestedRecordType_NestedConstituent) GetNestingExpression() *KeyExpression {
	if x != nil {
		return x.NestingExpression
	}
	return nil
}

var File_record_metadata_proto protoreflect.FileDescriptor

var file_record_metadata_proto_rawDesc = []byte{
	0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x03, 0x0a, 0x0d, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x10,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x1a,
	0x6f, 0x6d, 0x69, 0x74, 0x5f, 0x75, 0x6e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x6f, 0x6d, 0x69, 0x74, 0x55, 0x6e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5a, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x1a, 0x38, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd1, 0x05,
	0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x65, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x1a, 0x30, 0x0a,
	0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x38, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x44, 0x45, 0x58,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x41, 0x4e, 0x4b,
	0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x10, 0x04, 0x2a, 0x06, 0x08, 0xe8, 0x07, 0x10, 0xd1,
	0x0f, 0x22, 0xe5, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x4b, 0x65,
	0x79, 0x2a, 0x06, 0x08, 0xe8, 0x07, 0x10, 0xd1, 0x0f, 0x22, 0xa7, 0x01, 0x0a, 0x0b, 0x46, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61,
	0x64, 0x64, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0x06, 0x08, 0xe8, 0x07,
	0x10, 0xd1, 0x0f, 0x22, 0x8a, 0x07, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x3e, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x12, 0x4c, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x10, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x75, 0x73, 0x65, 0x73, 0x53, 0x75,
	0x62, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x5f, 0x0a, 0x13, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11,
	0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x65, 0x0a, 0x15, 0x75, 0x6e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x55, 0x6e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x13, 0x75, 0x6e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2a, 0x06, 0x08, 0xe8, 0x07, 0x10, 0xd1, 0x0f,
	0x22, 0x4a, 0x0a, 0x04, 0x54, 0x68, 0x65, 0x6e, 0x12, 0x42, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x22, 0x4a, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x22, 0xd9, 0x02, 0x0a, 0x05, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x47, 0x0a, 0x08, 0x66, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x46, 0x61, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x66, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x73, 0x0a, 0x12, 0x6e, 0x75,
	0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x52, 0x12, 0x6e, 0x75, 0x6c,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x33, 0x0a, 0x07, 0x46, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x43,
	0x41, 0x4c, 0x41, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x4e, 0x5f, 0x4f, 0x55,
	0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x4e, 0x41,
	0x54, 0x45, 0x10, 0x03, 0x22, 0x3e, 0x0a, 0x12, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f,
	0x54, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e,
	0x49, 0x51, 0x55, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x03, 0x22, 0x8b, 0x01, 0x0a, 0x07, 0x4e, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x3c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x42,
	0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4b, 0x65,
	0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x22, 0x7d, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x49,
	0x0a, 0x09, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x01, 0x31, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xa1, 0x01, 0x0a, 0x0a, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x49, 0x0a, 0x09, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x7d, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x22, 0x0a, 0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x05, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x44, 0x0a,
	0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4b, 0x65,
	0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6a, 0x6f, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x09, 0x0a, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x0f, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x22, 0xea, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x6a, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xf3, 0x06, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x68, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x54, 0x68, 0x65, 0x6e, 0x52, 0x04, 0x74, 0x68, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x07, 0x6e,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4e, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6e, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x43, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3a,
	0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52,
	0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0e, 0x6b, 0x65, 0x79,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x6b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x0f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x4b, 0x65, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xfc, 0x04, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x6c, 0x0a,
	0x11, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x6a, 0x6f, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x05, 0x6a,
	0x6f, 0x69, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x05, 0x6a, 0x6f, 0x69, 0x6e, 0x73, 0x1a, 0x69, 0x0a, 0x0f, 0x4a, 0x6f, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e,
	0x65, 0x64, 0x1a, 0xe0, 0x01, 0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12,
	0x55, 0x0a, 0x0f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x57, 0x0a, 0x10,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x03, 0x0a, 0x12, 0x55, 0x6e, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x74,
	0x0a, 0x13, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x55, 0x6e, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x65, 0x6e, 0x74,
	0x52, 0x12, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x65, 0x6e, 0x74, 0x73, 0x1a, 0xb9, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x6e, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6e,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x95, 0x01, 0x0a, 0x10, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x22, 0x28, 0x0a, 0x0e, 0x4e, 0x75, 0x6c, 0x6c,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4e, 0x75,
	0x6c, 0x6c, 0x22, 0xc2, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x12, 0x5c, 0x0a, 0x11, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x10, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12,
	0x56, 0x0a, 0x0f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x0e, 0x6e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x0c, 0x41, 0x6e, 0x64, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x53, 0x0a,
	0x0b, 0x4f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2e,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x4c,
	0x53, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x22, 0x4e,
	0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x3e,
	0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x22, 0x71,
	0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x22, 0xb7, 0x03, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x50, 0x0a, 0x0d, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x0c, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x0b, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x5f, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x11,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x50, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2a, 0xae, 0x01, 0x0a, 0x0e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x45, 0x53,
	0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48,
	0x41, 0x4e, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f,
	0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x06,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x52, 0x54, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x10,
	0x07, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x08, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x53, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x09, 0x42, 0x29, 0x42, 0x13,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5a, 0x12, 0x63, 0x69, 0x6f, 0x2f, 0x66, 0x64, 0x62, 0x2f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2f, 0x73, 0x72, 0x63,
}

var (
	file_record_metadata_proto_rawDescOnce sync.Once
	file_record_metadata_proto_rawDescData = file_record_metadata_proto_rawDesc
)

func file_record_metadata_proto_rawDescGZIP() []byte {
	file_record_metadata_proto_rawDescOnce.Do(func() {
		file_record_metadata_proto_rawDescData = protoimpl.X.CompressGZIP(file_record_metadata_proto_rawDescData)
	})
	return file_record_metadata_proto_rawDescData
}

var file_record_metadata_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_record_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_record_metadata_proto_goTypes = []any{
	(ComparisonType)(0),                          // 0: com.apple.foundationdb.record.ComparisonType
	(Index_Type)(0),                              // 1: com.apple.foundationdb.record.Index.Type
	(Field_FanType)(0),                           // 2: com.apple.foundationdb.record.Field.FanType
	(Field_NullInterpretation)(0),                // 3: com.apple.foundationdb.record.Field.NullInterpretation
	(ConstantPredicate_ConstantValue)(0),         // 4: com.apple.foundationdb.record.ConstantPredicate.ConstantValue
	(*DataStoreInfo)(nil),                        // 5: com.apple.foundationdb.record.DataStoreInfo
	(*Index)(nil),                                // 6: com.apple.foundationdb.record.Index
	(*RecordType)(nil),                           // 7: com.apple.foundationdb.record.RecordType
	(*FormerIndex)(nil),                          // 8: com.apple.foundationdb.record.FormerIndex
	(*MetaData)(nil),                             // 9: com.apple.foundationdb.record.MetaData
	(*Then)(nil),                                 // 10: com.apple.foundationdb.record.Then
	(*List)(nil),                                 // 11: com.apple.foundationdb.record.List
	(*Field)(nil),                                // 12: com.apple.foundationdb.record.Field
	(*Nesting)(nil),                              // 13: com.apple.foundationdb.record.Nesting
	(*Grouping)(nil),                             // 14: com.apple.foundationdb.record.Grouping
	(*Dimensions)(nil),                           // 15: com.apple.foundationdb.record.Dimensions
	(*KeyWithValue)(nil),                         // 16: com.apple.foundationdb.record.KeyWithValue
	(*Split)(nil),                                // 17: com.apple.foundationdb.record.Split
	(*Empty)(nil),                                // 18: com.apple.foundationdb.record.Empty
	(*Version)(nil),                              // 19: com.apple.foundationdb.record.Version
	(*RecordTypeKey)(nil),                        // 20: com.apple.foundationdb.record.RecordTypeKey
	(*Value)(nil),                                // 21: com.apple.foundationdb.record.Value
	(*Function)(nil),                             // 22: com.apple.foundationdb.record.Function
	(*KeyExpression)(nil),                        // 23: com.apple.foundationdb.record.KeyExpression
	(*JoinedRecordType)(nil),                     // 24: com.apple.foundationdb.record.JoinedRecordType
	(*UnnestedRecordType)(nil),                   // 25: com.apple.foundationdb.record.UnnestedRecordType
	(*SimpleComparison)(nil),                     // 26: com.apple.foundationdb.record.SimpleComparison
	(*NullComparison)(nil),                       // 27: com.apple.foundationdb.record.NullComparison
	(*Comparison)(nil),                           // 28: com.apple.foundationdb.record.Comparison
	(*AndPredicate)(nil),                         // 29: com.apple.foundationdb.record.AndPredicate
	(*OrPredicate)(nil),                          // 30: com.apple.foundationdb.record.OrPredicate
	(*ConstantPredicate)(nil),                    // 31: com.apple.foundationdb.record.ConstantPredicate
	(*NotPredicate)(nil),                         // 32: com.apple.foundationdb.record.NotPredicate
	(*ValuePredicate)(nil),                       // 33: com.apple.foundationdb.record.ValuePredicate
	(*Predicate)(nil),                            // 34: com.apple.foundationdb.record.Predicate
	(*DataStoreInfo_UserFieldEntry)(nil),         // 35: com.apple.foundationdb.record.DataStoreInfo.UserFieldEntry
	(*Index_Option)(nil),                         // 36: com.apple.foundationdb.record.Index.Option
	(*JoinedRecordType_JoinConstituent)(nil),     // 37: com.apple.foundationdb.record.JoinedRecordType.JoinConstituent
	(*JoinedRecordType_Join)(nil),                // 38: com.apple.foundationdb.record.JoinedRecordType.Join
	(*UnnestedRecordType_NestedConstituent)(nil), // 39: com.apple.foundationdb.record.UnnestedRecordType.NestedConstituent
	(*descriptorpb.FileDescriptorProto)(nil),     // 40: google.protobuf.FileDescriptorProto
}
var file_record_metadata_proto_depIdxs = []int32{
	23, // 0: com.apple.foundationdb.record.DataStoreInfo.record_count_key:type_name -> com.apple.foundationdb.record.KeyExpression
	35, // 1: com.apple.foundationdb.record.DataStoreInfo.user_field:type_name -> com.apple.foundationdb.record.DataStoreInfo.UserFieldEntry
	1,  // 2: com.apple.foundationdb.record.Index.index_type:type_name -> com.apple.foundationdb.record.Index.Type
	23, // 3: com.apple.foundationdb.record.Index.root_expression:type_name -> com.apple.foundationdb.record.KeyExpression
	23, // 4: com.apple.foundationdb.record.Index.value_expression:type_name -> com.apple.foundationdb.record.KeyExpression
	36, // 5: com.apple.foundationdb.record.Index.options:type_name -> com.apple.foundationdb.record.Index.Option
	34, // 6: com.apple.foundationdb.record.Index.predicate:type_name -> com.apple.foundationdb.record.Predicate
	23, // 7: com.apple.foundationdb.record.RecordType.primary_key:type_name -> com.apple.foundationdb.record.KeyExpression
	21, // 8: com.apple.foundationdb.record.RecordType.explicit_key:type_name -> com.apple.foundationdb.record.Value
	40, // 9: com.apple.foundationdb.record.MetaData.records:type_name -> google.protobuf.FileDescriptorProto
	6,  // 10: com.apple.foundationdb.record.MetaData.indexes:type_name -> com.apple.foundationdb.record.Index
	7,  // 11: com.apple.foundationdb.record.MetaData.record_types:type_name -> com.apple.foundationdb.record.RecordType
	8,  // 12: com.apple.foundationdb.record.MetaData.former_indexes:type_name -> com.apple.foundationdb.record.FormerIndex
	23, // 13: com.apple.foundationdb.record.MetaData.record_count_key:type_name -> com.apple.foundationdb.record.KeyExpression
	40, // 14: com.apple.foundationdb.record.MetaData.dependencies:type_name -> google.protobuf.FileDescriptorProto
	24, // 15: com.apple.foundationdb.record.MetaData.joined_record_types:type_name -> com.apple.foundationdb.record.JoinedRecordType
	25, // 16: com.apple.foundationdb.record.MetaData.unnested_record_types:type_name -> com.apple.foundationdb.record.UnnestedRecordType
	23, // 17: com.apple.foundationdb.record.Then.child:type_name -> com.apple.foundationdb.record.KeyExpression
	23, // 18: com.apple.foundationdb.record.List.child:type_name -> com.apple.foundationdb.record.KeyExpression
	2,  // 19: com.apple.foundationdb.record.Field.fan_type:type_name -> com.apple.foundationdb.record.Field.FanType
	3,  // 20: com.apple.foundationdb.record.Field.nullInterpretation:type_name -> com.apple.foundationdb.record.Field.NullInterpretation
	12, // 21: com.apple.foundationdb.record.Nesting.parent:type_name -> com.apple.foundationdb.record.Field
	23, // 22: com.apple.foundationdb.record.Nesting.child:type_name -> com.apple.foundationdb.record.KeyExpression
	23, // 23: com.apple.foundationdb.record.Grouping.whole_key:type_name -> com.apple.foundationdb.record.KeyExpression
	23, // 24: com.apple.foundationdb.record.Dimensions.whole_key:type_name -> com.apple.foundationdb.record.KeyExpression
	23, // 25: com.apple.foundationdb.record.KeyWithValue.inner_key:type_name -> com.apple.foundationdb.record.KeyExpression
	23, // 26: com.apple.foundationdb.record.Split.joined:type_name -> com.apple.foundationdb.record.KeyExpression
	23, // 27: com.apple.foundationdb.record.Function.arguments:type_name -> com.apple.foundationdb.record.KeyExpression
	10, // 28: com.apple.foundationdb.record.KeyExpression.then:type_name -> com.apple.foundationdb.record.Then
	13, // 29: com.apple.foundationdb.record.KeyExpression.nesting:type_name -> com.apple.foundationdb.record.Nesting
	12, // 30: com.apple.foundationdb.record.KeyExpression.field:type_name -> com.apple.foundationdb.record.Field
	14, // 31: com.apple.foundationdb.record.KeyExpression.grouping:type_name -> com.apple.foundationdb.record.Grouping
	18, // 32: com.apple.foundationdb.record.KeyExpression.empty:type_name -> com.apple.foundationdb.record.Empty
	17, // 33: com.apple.foundationdb.record.KeyExpression.split:type_name -> com.apple.foundationdb.record.Split
	19, // 34: com.apple.foundationdb.record.KeyExpression.version:type_name -> com.apple.foundationdb.record.Version
	21, // 35: com.apple.foundationdb.record.KeyExpression.value:type_name -> com.apple.foundationdb.record.Value
	22, // 36: com.apple.foundationdb.record.KeyExpression.function:type_name -> com.apple.foundationdb.record.Function
	16, // 37: com.apple.foundationdb.record.KeyExpression.key_with_value:type_name -> com.apple.foundationdb.record.KeyWithValue
	20, // 38: com.apple.foundationdb.record.KeyExpression.record_type_key:type_name -> com.apple.foundationdb.record.RecordTypeKey
	11, // 39: com.apple.foundationdb.record.KeyExpression.list:type_name -> com.apple.foundationdb.record.List
	15, // 40: com.apple.foundationdb.record.KeyExpression.dimensions:type_name -> com.apple.foundationdb.record.Dimensions
	21, // 41: com.apple.foundationdb.record.JoinedRecordType.record_type_key:type_name -> com.apple.foundationdb.record.Value
	37, // 42: com.apple.foundationdb.record.JoinedRecordType.join_constituents:type_name -> com.apple.foundationdb.record.JoinedRecordType.JoinConstituent
	38, // 43: com.apple.foundationdb.record.JoinedRecordType.joins:type_name -> com.apple.foundationdb.record.JoinedRecordType.Join
	21, // 44: com.apple.foundationdb.record.UnnestedRecordType.record_type_key:type_name -> com.apple.foundationdb.record.Value
	39, // 45: com.apple.foundationdb.record.UnnestedRecordType.nested_constituents:type_name -> com.apple.foundationdb.record.UnnestedRecordType.NestedConstituent
	0,  // 46: com.apple.foundationdb.record.SimpleComparison.type:type_name -> com.apple.foundationdb.record.ComparisonType
	21, // 47: com.apple.foundationdb.record.SimpleComparison.operand:type_name -> com.apple.foundationdb.record.Value
	26, // 48: com.apple.foundationdb.record.Comparison.simple_comparison:type_name -> com.apple.foundationdb.record.SimpleComparison
	27, // 49: com.apple.foundationdb.record.Comparison.null_comparison:type_name -> com.apple.foundationdb.record.NullComparison
	34, // 50: com.apple.foundationdb.record.AndPredicate.children:type_name -> com.apple.foundationdb.record.Predicate
	34, // 51: com.apple.foundationdb.record.OrPredicate.children:type_name -> com.apple.foundationdb.record.Predicate
	4,  // 52: com.apple.foundationdb.record.ConstantPredicate.value:type_name -> com.apple.foundationdb.record.ConstantPredicate.ConstantValue
	34, // 53: com.apple.foundationdb.record.NotPredicate.child:type_name -> com.apple.foundationdb.record.Predicate
	28, // 54: com.apple.foundationdb.record.ValuePredicate.comparison:type_name -> com.apple.foundationdb.record.Comparison
	29, // 55: com.apple.foundationdb.record.Predicate.and_predicate:type_name -> com.apple.foundationdb.record.AndPredicate
	30, // 56: com.apple.foundationdb.record.Predicate.or_predicate:type_name -> com.apple.foundationdb.record.OrPredicate
	31, // 57: com.apple.foundationdb.record.Predicate.constant_predicate:type_name -> com.apple.foundationdb.record.ConstantPredicate
	32, // 58: com.apple.foundationdb.record.Predicate.not_predicate:type_name -> com.apple.foundationdb.record.NotPredicate
	33, // 59: com.apple.foundationdb.record.Predicate.value_predicate:type_name -> com.apple.foundationdb.record.ValuePredicate
	23, // 60: com.apple.foundationdb.record.JoinedRecordType.Join.left_expression:type_name -> com.apple.foundationdb.record.KeyExpression
	23, // 61: com.apple.foundationdb.record.JoinedRecordType.Join.right_expression:type_name -> com.apple.foundationdb.record.KeyExpression
	23, // 62: com.apple.foundationdb.record.UnnestedRecordType.NestedConstituent.nesting_expression:type_name -> com.apple.foundationdb.record.KeyExpression
	63, // [63:63] is the sub-list for method output_type
	63, // [63:63] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_record_metadata_proto_init() }
func file_record_metadata_proto_init() {
	if File_record_metadata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_record_metadata_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*DataStoreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*RecordType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*FormerIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Then); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Nesting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Grouping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Dimensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*KeyWithValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Split); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*RecordTypeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*Function); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*KeyExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*JoinedRecordType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*UnnestedRecordType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*SimpleComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*NullComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*Comparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*AndPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*OrPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*ConstantPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*NotPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*ValuePredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*Predicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*DataStoreInfo_UserFieldEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*Index_Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*JoinedRecordType_JoinConstituent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*JoinedRecordType_Join); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_metadata_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*UnnestedRecordType_NestedConstituent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_record_metadata_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_record_metadata_proto_goTypes,
		DependencyIndexes: file_record_metadata_proto_depIdxs,
		EnumInfos:         file_record_metadata_proto_enumTypes,
		MessageInfos:      file_record_metadata_proto_msgTypes,
	}.Build()
	File_record_metadata_proto = out.File
	file_record_metadata_proto_rawDesc = nil
	file_record_metadata_proto_goTypes = nil
	file_record_metadata_proto_depIdxs = nil
}
